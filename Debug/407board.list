
407board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a288  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000620c  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010624  08010624  00030194  2**0
                  CONTENTS
  4 .ARM          00000008  08010624  08010624  00020624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801062c  0801062c  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0002062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010630  08010630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08010634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030194  2**0
                  CONTENTS
 10 .bss          00001f80  20000194  20000194  00030194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002114  20002114  00030194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b799  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c8e  00000000  00000000  0004b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  00050630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001064  00000000  00000000  00051c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a1cd  00000000  00000000  00052c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f987  00000000  00000000  0007ce49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7d06  00000000  00000000  0009c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cc4  00000000  00000000  001744d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0017a19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a400 	.word	0x0800a400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0800a400 	.word	0x0800a400

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000586:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800058a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_FSMC_Init+0xb8>)
 800058e:	4a26      	ldr	r2, [pc, #152]	; (8000628 <MX_FSMC_Init+0xbc>)
 8000590:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_FSMC_Init+0xb8>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80005f0:	2305      	movs	r3, #5
 80005f2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80005fc:	2311      	movs	r3, #17
 80005fe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_FSMC_Init+0xb8>)
 800060c:	f003 fbdc 	bl	8003dc8 <HAL_SRAM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000616:	f000 faaf 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001b0 	.word	0x200001b0
 8000628:	a0000104 	.word	0xa0000104

0800062c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d141      	bne.n	80006cc <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6393      	str	r3, [r2, #56]	; 0x38
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800066a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800066e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800067c:	230c      	movs	r3, #12
 800067e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <HAL_FSMC_MspInit+0xb0>)
 8000686:	f000 fee9 	bl	800145c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800068a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800068e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800069c:	230c      	movs	r3, #12
 800069e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006a6:	f000 fed9 	bl	800145c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80006aa:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80006ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006bc:	230c      	movs	r3, #12
 80006be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006c6:	f000 fec9 	bl	800145c <HAL_GPIO_Init>
 80006ca:	e000      	b.n	80006ce <HAL_FSMC_MspInit+0xa2>
    return;
 80006cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000200 	.word	0x20000200
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80006ec:	f7ff ff9e 	bl	800062c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	4b62      	ldr	r3, [pc, #392]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a61      	ldr	r2, [pc, #388]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	4b5b      	ldr	r3, [pc, #364]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a5a      	ldr	r2, [pc, #360]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b58      	ldr	r3, [pc, #352]	; (800089c <MX_GPIO_Init+0x1a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b54      	ldr	r3, [pc, #336]	; (800089c <MX_GPIO_Init+0x1a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a53      	ldr	r2, [pc, #332]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b4d      	ldr	r3, [pc, #308]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a4c      	ldr	r2, [pc, #304]	; (800089c <MX_GPIO_Init+0x1a4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b4a      	ldr	r3, [pc, #296]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a45      	ldr	r2, [pc, #276]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a3e      	ldr	r2, [pc, #248]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	21c0      	movs	r1, #192	; 0xc0
 80007ba:	4839      	ldr	r0, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x1a8>)
 80007bc:	f001 f802 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	4837      	ldr	r0, [pc, #220]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 80007c6:	f000 fffd 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CS_Pin|T_CLK_Pin|T_MOSI_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80007d0:	4834      	ldr	r0, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 80007d2:	f000 fff7 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80007d6:	2318      	movs	r3, #24
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <MX_GPIO_Init+0x1b0>)
 80007ea:	f000 fe37 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007ee:	23c0      	movs	r3, #192	; 0xc0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <MX_GPIO_Init+0x1a8>)
 8000806:	f000 fe29 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 800080a:	2320      	movs	r3, #32
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	2301      	movs	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x1b4>)
 800081e:	f000 fe1d 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000822:	2302      	movs	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 800083a:	f000 fe0f 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000844:	2311      	movs	r3, #17
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000858:	f000 fe00 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 800085c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000876:	f000 fdf1 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800087a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000890:	f000 fde4 	bl	800145c <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	; 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40020800 	.word	0x40020800

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fb97 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f8a1 	bl	8000a00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f7ff ff1b 	bl	80006f8 <MX_GPIO_Init>
  MX_FSMC_Init();
 80008c2:	f7ff fe53 	bl	800056c <MX_FSMC_Init>
  MX_RTC_Init();
 80008c6:	f000 f95d 	bl	8000b84 <MX_RTC_Init>
  MX_SPI1_Init();
 80008ca:	f000 f9ab 	bl	8000c24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008ce:	f000 fae7 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80008d2:	f008 fbfd 	bl	80090d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  time.Hours = 22;
//  time.Minutes = 59;
//  time.Seconds = 00;
//  HAL_RTC_SetTime(&rtc, &time , RTC_HOURFORMAT_24);
  LCD_BL_ON();
 80008d6:	2201      	movs	r2, #1
 80008d8:	2102      	movs	r1, #2
 80008da:	4844      	ldr	r0, [pc, #272]	; (80009ec <main+0x13c>)
 80008dc:	f000 ff72 	bl	80017c4 <HAL_GPIO_WritePin>
   lcdInit();
 80008e0:	f005 ffb6 	bl	8006850 <_Z7lcdInitv>
   int i = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
   lcdSetOrientation((lcdOrientationTypeDef)i);
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 faeb 	bl	8006ec8 <_Z17lcdSetOrientation21lcdOrientationTypeDef>
   // TpadInit();
   HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fbea 	bl	80010cc <HAL_Delay>
  // HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
   lcdFillRGB(COLOR_BLACK);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f006 f91d 	bl	8006b38 <_Z10lcdFillRGBt>
   lcdSetTextFont(&Font_verdana_10);
 80008fe:	483c      	ldr	r0, [pc, #240]	; (80009f0 <main+0x140>)
 8000900:	f006 fabc 	bl	8006e7c <_Z14lcdSetTextFontP6_tFont>
       lcdSetCursor(10,20);
 8000904:	2114      	movs	r1, #20
 8000906:	200a      	movs	r0, #10
 8000908:	f006 fb4c 	bl	8006fa4 <_Z12lcdSetCursortt>
       lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800090c:	2100      	movs	r1, #0
 800090e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000912:	f006 fac3 	bl	8006e9c <_Z15lcdSetTextColortt>
       lcdPrintf("CALIBRATE! \n Touch and move pen \n from  upper right \n to down left\n screens corner few time");
 8000916:	4837      	ldr	r0, [pc, #220]	; (80009f4 <main+0x144>)
 8000918:	f006 fa20 	bl	8006d5c <_Z9lcdPrintfPKcz>
       while(! TP_Touchpad_Pressed());
 800091c:	bf00      	nop
 800091e:	f005 fefb 	bl	8006718 <_Z19TP_Touchpad_Pressedv>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f5      	bne.n	800091e <main+0x6e>
       TP_calibration();
 8000932:	f005 ff07 	bl	8006744 <_Z14TP_calibrationv>
   lcdFillRGB(COLOR_BLACK);
 8000936:	2000      	movs	r0, #0
 8000938:	f006 f8fe 	bl	8006b38 <_Z10lcdFillRGBt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
bool refil = false;
 800093c:	2300      	movs	r3, #0
 800093e:	75fb      	strb	r3, [r7, #23]
  {

//      	if(TpadGetCoordinates(penX, penY)){
//      	}

      if(TP_Touchpad_Pressed() == 1){
 8000940:	f005 feea 	bl	8006718 <_Z19TP_Touchpad_Pressedv>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d022      	beq.n	800099a <main+0xea>
	  uint16_t Coord[4] ={0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
	  refil = true;
 800095c:	2301      	movs	r3, #1
 800095e:	75fb      	strb	r3, [r7, #23]
	  TP_Read_Coordinates(Coord);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fe18 	bl	8006598 <_Z19TP_Read_CoordinatesPt>
      		lcdSetTextFont(&Font_verdana_10);
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <main+0x140>)
 800096a:	f006 fa87 	bl	8006e7c <_Z14lcdSetTextFontP6_tFont>
      	      	lcdSetCursor(1 , 1);
 800096e:	2101      	movs	r1, #1
 8000970:	2001      	movs	r0, #1
 8000972:	f006 fb17 	bl	8006fa4 <_Z12lcdSetCursortt>
      	      	lcdSetTextColor(COLOR_GREENYELLOW, COLOR_BLACK);
 8000976:	2100      	movs	r1, #0
 8000978:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 800097c:	f006 fa8e 	bl	8006e9c <_Z15lcdSetTextColortt>
      	      	lcdPrintf("PEN: X %5i Y %5i\n \t X %5i Y %5i", Coord[0], Coord[1], Coord[2], Coord[3]);
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	4619      	mov	r1, r3
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	461a      	mov	r2, r3
 8000988:	893b      	ldrh	r3, [r7, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	897b      	ldrh	r3, [r7, #10]
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4603      	mov	r3, r0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0x148>)
 8000994:	f006 f9e2 	bl	8006d5c <_Z9lcdPrintfPKcz>
 8000998:	e007      	b.n	80009aa <main+0xfa>

      } else {
	  if (refil){
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <main+0xfa>
	  refil = false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75fb      	strb	r3, [r7, #23]
	  lcdFillRGB(COLOR_BLACK);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f006 f8c7 	bl	8006b38 <_Z10lcdFillRGBt>
	  }
      }
    unsigned long t = testText();
 80009aa:	f000 f89f 	bl	8000aec <_Z8testTextv>
 80009ae:	60f8      	str	r0, [r7, #12]
    lcdSetTextFont(&Font_verdana_10);
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <main+0x140>)
 80009b2:	f006 fa63 	bl	8006e7c <_Z14lcdSetTextFontP6_tFont>
    lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 2);
 80009b6:	f006 fb53 	bl	8007060 <_Z12lcdGetHeightv>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461c      	mov	r4, r3
 80009be:	f006 fb5b 	bl	8007078 <_Z14lcdGetTextFontv>
 80009c2:	4603      	mov	r3, r0
 80009c4:	88db      	ldrh	r3, [r3, #6]
 80009c6:	1ae3      	subs	r3, r4, r3
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3b02      	subs	r3, #2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f006 fae7 	bl	8006fa4 <_Z12lcdSetCursortt>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80009d6:	2100      	movs	r1, #0
 80009d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009dc:	f006 fa5e 	bl	8006e9c <_Z15lcdSetTextColortt>
    lcdPrintf("Time: %4lu ms", t);
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <main+0x14c>)
 80009e4:	f006 f9ba 	bl	8006d5c <_Z9lcdPrintfPKcz>
      		// HAL_Delay(_delay);

//      demoLCD(i);
//    	  i++;
      }
 80009e8:	e7aa      	b.n	8000940 <main+0x90>
 80009ea:	bf00      	nop
 80009ec:	40020400 	.word	0x40020400
 80009f0:	20000030 	.word	0x20000030
 80009f4:	0800a418 	.word	0x0800a418
 80009f8:	0800a474 	.word	0x0800a474
 80009fc:	0800a494 	.word	0x0800a494

08000a00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	; 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 f872 	bl	8009af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <_Z18SystemClock_Configv+0xe4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <_Z18SystemClock_Configv+0xe4>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <_Z18SystemClock_Configv+0xe4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <_Z18SystemClock_Configv+0xe8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <_Z18SystemClock_Configv+0xe8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <_Z18SystemClock_Configv+0xe8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 f905 	bl	8002c98 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000a9e:	f000 f86b 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2105      	movs	r1, #5
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fb61 	bl	8003188 <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000ad6:	f000 f84f 	bl	8000b78 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <_Z8testTextv>:
	lcdFillRGB(COLOR_BLACK);
	return t += HAL_GetTick() - start;
}

unsigned long testText()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick();
 8000af2:	f000 fadf 	bl	80010b4 <HAL_GetTick>
 8000af6:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
 8000af8:	2200      	movs	r2, #0
 8000afa:	4919      	ldr	r1, [pc, #100]	; (8000b60 <_Z8testTextv+0x74>)
 8000afc:	4819      	ldr	r0, [pc, #100]	; (8000b64 <_Z8testTextv+0x78>)
 8000afe:	f002 fec8 	bl	8003892 <HAL_RTC_GetTime>
	lcdSetCursor(50, 60);
 8000b02:	213c      	movs	r1, #60	; 0x3c
 8000b04:	2032      	movs	r0, #50	; 0x32
 8000b06:	f006 fa4d 	bl	8006fa4 <_Z12lcdSetCursortt>
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000b10:	f006 f9c4 	bl	8006e9c <_Z15lcdSetTextColortt>
	lcdSetTextFont(&Font_verdana_14);
 8000b14:	4814      	ldr	r0, [pc, #80]	; (8000b68 <_Z8testTextv+0x7c>)
 8000b16:	f006 f9b1 	bl	8006e7c <_Z14lcdSetTextFontP6_tFont>
	lcdPrintf("%02i : %02i : %02i ", time.Hours, time.Minutes, time.Seconds);
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_Z8testTextv+0x74>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_Z8testTextv+0x74>)
 8000b22:	785b      	ldrb	r3, [r3, #1]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <_Z8testTextv+0x74>)
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <_Z8testTextv+0x80>)
 8000b2c:	f006 f916 	bl	8006d5c <_Z9lcdPrintfPKcz>
		lcdSetCursor(0, 90);
 8000b30:	215a      	movs	r1, #90	; 0x5a
 8000b32:	2000      	movs	r0, #0
 8000b34:	f006 fa36 	bl	8006fa4 <_Z12lcdSetCursortt>
		lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000b3e:	f006 f9ad 	bl	8006e9c <_Z15lcdSetTextColortt>
		lcdSetTextFont(&Font_verdana_10);
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <_Z8testTextv+0x84>)
 8000b44:	f006 f99a 	bl	8006e7c <_Z14lcdSetTextFontP6_tFont>
		lcdPrintf("\t Monospace font type \n \t \texample: \n\n\t!@#$%^&,.-+=<>? \n\t 1234567890\n  Hello! It's monospace font example for STM32 MCU ");
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <_Z8testTextv+0x88>)
 8000b4a:	f006 f907 	bl	8006d5c <_Z9lcdPrintfPKcz>
	return HAL_GetTick() - start;
 8000b4e:	f000 fab1 	bl	80010b4 <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	1ad3      	subs	r3, r2, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000204 	.word	0x20000204
 8000b64:	20000218 	.word	0x20000218
 8000b68:	2000003c 	.word	0x2000003c
 8000b6c:	0800a4c0 	.word	0x0800a4c0
 8000b70:	20000030 	.word	0x20000030
 8000b74:	0800a4d4 	.word	0x0800a4d4

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <MX_RTC_Init+0x48>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000b96:	227f      	movs	r2, #127	; 0x7f
 8000b98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000b9c:	22ff      	movs	r2, #255	; 0xff
 8000b9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_RTC_Init+0x44>)
 8000bb4:	f002 fdea 	bl	800378c <HAL_RTC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000bbe:	f7ff ffdb 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000218 	.word	0x20000218
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_RTC_MspInit+0x4c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d111      	bne.n	8000c14 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fce2 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c0a:	f7ff ffb5 	bl	8000b78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_RTC_MspInit+0x50>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40002800 	.word	0x40002800
 8000c20:	42470e3c 	.word	0x42470e3c

08000c24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <MX_SPI1_Init+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c70:	220a      	movs	r2, #10
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c76:	f002 ff0b 	bl	8003a90 <HAL_SPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c80:	f7ff ff7a 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000238 	.word	0x20000238
 8000c8c:	40013000 	.word	0x40013000

08000c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d133      	bne.n	8000d1a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_SPI_MspInit+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cea:	2338      	movs	r3, #56	; 0x38
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <HAL_SPI_MspInit+0x9c>)
 8000d06:	f000 fba9 	bl	800145c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2023      	movs	r0, #35	; 0x23
 8000d10:	f000 fadb 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d14:	2023      	movs	r0, #35	; 0x23
 8000d16:	f000 faf4 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f95e 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <SPI1_IRQHandler+0x10>)
 8000dda:	f002 fee3 	bl	8003ba4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000238 	.word	0x20000238

08000de8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART1_IRQHandler+0x10>)
 8000dee:	f003 f883 	bl	8003ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000294 	.word	0x20000294

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f000 fe3c 	bl	8001a7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200018c8 	.word	0x200018c8

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f008 fe62 	bl	8009b08 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000290 	.word	0x20000290
 8000e78:	20002118 	.word	0x20002118

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_USART1_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ed8:	f002 ffbe 	bl	8003e58 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f7ff fe49 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000294 	.word	0x20000294
 8000ef0:	40011000 	.word	0x40011000

08000ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0x94>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d134      	bne.n	8000f80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_MspInit+0x9c>)
 8000f6c:	f000 fa76 	bl	800145c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2025      	movs	r0, #37	; 0x25
 8000f76:	f000 f9a8 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7a:	2025      	movs	r0, #37	; 0x25
 8000f7c:	f000 f9c1 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f98:	f7ff ff70 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f008 fda7 	bl	8009b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fc73 	bl	80008b0 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8000fd8:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 8000fdc:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8000fe0:	20002114 	.word	0x20002114

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f94f 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe88 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f967 	bl	800131e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f92f 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	200002dc 	.word	0x200002dc

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200002dc 	.word	0x200002dc

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff3e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff31 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff feb6 	bl	80010b4 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d008      	beq.n	8001368 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e052      	b.n	800140e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0216 	bic.w	r2, r2, #22
 8001376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001386:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <HAL_DMA_Abort+0x62>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0208 	bic.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b8:	e013      	b.n	80013e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ba:	f7ff fe7b 	bl	80010b4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d90c      	bls.n	80013e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e015      	b.n	800140e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e4      	bne.n	80013ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	223f      	movs	r2, #63	; 0x3f
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d004      	beq.n	8001434 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00c      	b.n	800144e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2205      	movs	r2, #5
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e16b      	b.n	8001750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 815a 	bne.w	800174a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d005      	beq.n	80014ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d130      	bne.n	8001510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 0201 	and.w	r2, r3, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d017      	beq.n	800154c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0203 	and.w	r2, r3, #3
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80b4 	beq.w	800174a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a5f      	ldr	r2, [pc, #380]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_GPIO_Init+0x310>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_GPIO_Init+0x314>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d02b      	beq.n	8001682 <HAL_GPIO_Init+0x226>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_GPIO_Init+0x318>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d025      	beq.n	800167e <HAL_GPIO_Init+0x222>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <HAL_GPIO_Init+0x31c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01f      	beq.n	800167a <HAL_GPIO_Init+0x21e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_GPIO_Init+0x320>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x21a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <HAL_GPIO_Init+0x324>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x216>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4d      	ldr	r2, [pc, #308]	; (8001784 <HAL_GPIO_Init+0x328>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x212>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_GPIO_Init+0x32c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x20e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <HAL_GPIO_Init+0x330>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x20a>
 8001662:	2307      	movs	r3, #7
 8001664:	e00e      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001666:	2308      	movs	r3, #8
 8001668:	e00c      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800166a:	2306      	movs	r3, #6
 800166c:	e00a      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800166e:	2305      	movs	r3, #5
 8001670:	e008      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001672:	2304      	movs	r3, #4
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001676:	2303      	movs	r3, #3
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001682:	2300      	movs	r3, #0
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001694:	4935      	ldr	r1, [pc, #212]	; (800176c <HAL_GPIO_Init+0x310>)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_GPIO_Init+0x334>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_GPIO_Init+0x334>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_GPIO_Init+0x334>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	f67f ae90 	bls.w	8001478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40013800 	.word	0x40013800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	40020800 	.word	0x40020800
 800177c:	40020c00 	.word	0x40020c00
 8001780:	40021000 	.word	0x40021000
 8001784:	40021400 	.word	0x40021400
 8001788:	40021800 	.word	0x40021800
 800178c:	40021c00 	.word	0x40021c00
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af02      	add	r7, sp, #8
 80017fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e101      	b.n	8001a0c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f007 fe34 	bl	8009490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001836:	d102      	bne.n	800183e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fc15 	bl	8005072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7c1a      	ldrb	r2, [r3, #16]
 8001850:	f88d 2000 	strb.w	r2, [sp]
 8001854:	3304      	adds	r3, #4
 8001856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001858:	f003 faf4 	bl	8004e44 <USB_CoreInit>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0ce      	b.n	8001a0c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fc0d 	bl	8005094 <USB_SetCurrentMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0bf      	b.n	8001a0c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e04a      	b.n	8001928 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3315      	adds	r3, #21
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3314      	adds	r3, #20
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b298      	uxth	r0, r3
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	332e      	adds	r3, #46	; 0x2e
 80018ce:	4602      	mov	r2, r0
 80018d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3318      	adds	r3, #24
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	331c      	adds	r3, #28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3320      	adds	r3, #32
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3324      	adds	r3, #36	; 0x24
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3301      	adds	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	791b      	ldrb	r3, [r3, #4]
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3af      	bcc.n	8001892 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e044      	b.n	80019c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f203 2355 	addw	r3, r3, #597	; 0x255
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3b5      	bcc.n	8001938 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7c1a      	ldrb	r2, [r3, #16]
 80019d4:	f88d 2000 	strb.w	r2, [sp]
 80019d8:	3304      	adds	r3, #4
 80019da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019dc:	f003 fba6 	bl	800512c <USB_DevInit>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00c      	b.n	8001a0c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fbea 	bl	80061de <USB_DevDisconnect>

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_PCD_Start+0x1c>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e022      	b.n	8001a76 <HAL_PCD_Start+0x62>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 faf7 	bl	8005050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fb98 	bl	800619c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b08d      	sub	sp, #52	; 0x34
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 fc56 	bl	8006346 <USB_GetMode>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 848c 	bne.w	80023ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fbba 	bl	8006220 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8482 	beq.w	80023b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 fba7 	bl	8006220 <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d107      	bne.n	8001aec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f002 0202 	and.w	r2, r2, #2
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 fb95 	bl	8006220 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d161      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0210 	bic.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f003 020f 	and.w	r2, r3, #15
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	0c5b      	lsrs	r3, r3, #17
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d124      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d035      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6a38      	ldr	r0, [r7, #32]
 8001b5c:	f004 f9cc 	bl	8005ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b6c:	441a      	add	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7e:	441a      	add	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	e016      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	0c5b      	lsrs	r3, r3, #17
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d110      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001b98:	2208      	movs	r2, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6a38      	ldr	r0, [r7, #32]
 8001b9e:	f004 f9ab 	bl	8005ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bae:	441a      	add	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0210 	orr.w	r2, r2, #16
 8001bc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fb29 	bl	8006220 <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bd8:	f040 80a7 	bne.w	8001d2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fb2e 	bl	8006246 <USB_ReadDevAllOutEpInterrupt>
 8001bea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bec:	e099      	b.n	8001d22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 808e 	beq.w	8001d16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 fb52 	bl	80062ae <USB_ReadDevOutEPInterrupt>
 8001c0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c22:	461a      	mov	r2, r3
 8001c24:	2301      	movs	r3, #1
 8001c26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fea2 	bl	8002974 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c46:	461a      	mov	r2, r3
 8001c48:	2308      	movs	r3, #8
 8001c4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 ff78 	bl	8002b44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d030      	beq.n	8001cdc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b80      	cmp	r3, #128	; 0x80
 8001c84:	d109      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c98:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	78db      	ldrb	r3, [r3, #3]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f007 fce9 	bl	800969c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2302      	movs	r3, #2
 8001cda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f47f af62 	bne.w	8001bee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fa76 	bl	8006220 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d3e:	f040 80db 	bne.w	8001ef8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fa97 	bl	800627a <USB_ReadDevAllInEpInterrupt>
 8001d4c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d52:	e0cd      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80c2 	beq.w	8001ee4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 fabd 	bl	80062ea <USB_ReadDevInEPInterrupt>
 8001d70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d057      	beq.n	8001e2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2201      	movs	r2, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69f9      	ldr	r1, [r7, #28]
 8001d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dac:	461a      	mov	r2, r3
 8001dae:	2301      	movs	r3, #1
 8001db0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	799b      	ldrb	r3, [r3, #6]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d132      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3320      	adds	r3, #32
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4403      	add	r3, r0
 8001dda:	331c      	adds	r3, #28
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4419      	add	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4403      	add	r3, r0
 8001dee:	3320      	adds	r3, #32
 8001df0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d113      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x3a2>
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3324      	adds	r3, #36	; 0x24
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	f004 fac4 	bl	80063a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f007 fbb3 	bl	8009592 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e42:	461a      	mov	r2, r3
 8001e44:	2308      	movs	r3, #8
 8001e46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2310      	movs	r3, #16
 8001e62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2340      	movs	r3, #64	; 0x40
 8001e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d023      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f003 fab1 	bl	80053f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f007 fc00 	bl	80096c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2302      	movs	r3, #2
 8001ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fcbb 	bl	800285a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f af2e 	bne.w	8001d54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 f98f 	bl	8006220 <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f0c:	d122      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f34:	2100      	movs	r1, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fea2 	bl	8002c80 <HAL_PCDEx_LPM_Callback>
 8001f3c:	e002      	b.n	8001f44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f007 fb9e 	bl	8009680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 f961 	bl	8006220 <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f68:	d112      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f007 fb5a 	bl	8009634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 f943 	bl	8006220 <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	f040 80b7 	bne.w	8002116 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fa16 	bl	80053f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	e046      	b.n	800205c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fe0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff2:	0151      	lsls	r1, r2, #5
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	461a      	mov	r2, r3
 8002010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002014:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	440a      	add	r2, r1
 800202c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002030:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002034:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002046:	0151      	lsls	r1, r2, #5
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	440a      	add	r2, r1
 800204c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002050:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002054:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	3301      	adds	r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	461a      	mov	r2, r3
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	4293      	cmp	r3, r2
 8002066:	d3b2      	bcc.n	8001fce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002076:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800207a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7bdb      	ldrb	r3, [r3, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002094:	f043 030b 	orr.w	r3, r3, #11
 8002098:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020aa:	f043 030b 	orr.w	r3, r3, #11
 80020ae:	6453      	str	r3, [r2, #68]	; 0x44
 80020b0:	e015      	b.n	80020de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d8:	f043 030b 	orr.w	r3, r3, #11
 80020dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002100:	461a      	mov	r2, r3
 8002102:	f004 f951 	bl	80063a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f004 f880 	bl	8006220 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	d123      	bne.n	8002174 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f004 f916 	bl	8006362 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f9d3 	bl	80054e6 <USB_GetDevSpeed>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	f001 fa08 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8002150:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002156:	461a      	mov	r2, r3
 8002158:	4620      	mov	r0, r4
 800215a:	f002 fed7 	bl	8004f0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f007 fa3f 	bl	80095e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002172:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f851 	bl	8006220 <USB_ReadInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b08      	cmp	r3, #8
 8002186:	d10a      	bne.n	800219e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f007 fa1c 	bl	80095c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 0208 	and.w	r2, r2, #8
 800219c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f83c 	bl	8006220 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d123      	bne.n	80021fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021be:	2301      	movs	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e014      	b.n	80021ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fb08 	bl	80027f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3301      	adds	r3, #1
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d3e4      	bcc.n	80021c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f80e 	bl	8006220 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800220e:	d13c      	bne.n	800228a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002210:	2301      	movs	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
 8002214:	e02b      	b.n	800226e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3318      	adds	r3, #24
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d115      	bne.n	8002268 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800223c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	da12      	bge.n	8002268 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3317      	adds	r3, #23
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fac8 	bl	80027f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	3301      	adds	r3, #1
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	461a      	mov	r2, r3
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	4293      	cmp	r3, r2
 8002278:	d3cd      	bcc.n	8002216 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 ffc6 	bl	8006220 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800229e:	d156      	bne.n	800234e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a0:	2301      	movs	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	e045      	b.n	8002332 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d12e      	bne.n	800232c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da2b      	bge.n	800232c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80022e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d121      	bne.n	800232c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002328:	6053      	str	r3, [r2, #4]
            break;
 800232a:	e008      	b.n	800233e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3301      	adds	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	791b      	ldrb	r3, [r3, #4]
 8002336:	461a      	mov	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4293      	cmp	r3, r2
 800233c:	d3b3      	bcc.n	80022a6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800234c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 ff64 	bl	8006220 <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d10a      	bne.n	800237a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f007 f9bd 	bl	80096e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 ff4e 	bl	8006220 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d115      	bne.n	80023ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f007 f9ad 	bl	8009700 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	e000      	b.n	80023ba <HAL_PCD_IRQHandler+0x93c>
      return;
 80023b8:	bf00      	nop
    }
  }
}
 80023ba:	3734      	adds	r7, #52	; 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}

080023c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_PCD_SetAddress+0x1a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e012      	b.n	8002400 <HAL_PCD_SetAddress+0x40>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fead 	bl	8006150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4603      	mov	r3, r0
 8002418:	70fb      	strb	r3, [r7, #3]
 800241a:	460b      	mov	r3, r1
 800241c:	803b      	strh	r3, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da0f      	bge.n	800244e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3310      	adds	r3, #16
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	705a      	strb	r2, [r3, #1]
 800244c:	e00f      	b.n	800246e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	3304      	adds	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	b2da      	uxtb	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800247a:	883a      	ldrh	r2, [r7, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	78ba      	ldrb	r2, [r7, #2]
 8002484:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002498:	78bb      	ldrb	r3, [r7, #2]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_PCD_EP_Open+0xaa>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e00e      	b.n	80024d0 <HAL_PCD_EP_Open+0xc8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 f835 	bl	8005530 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80024ce:	7afb      	ldrb	r3, [r7, #11]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da0f      	bge.n	800250c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3310      	adds	r3, #16
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	705a      	strb	r2, [r3, #1]
 800250a:	e00f      	b.n	800252c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 020f 	and.w	r2, r3, #15
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_PCD_EP_Close+0x6e>
 8002542:	2302      	movs	r3, #2
 8002544:	e00e      	b.n	8002564 <HAL_PCD_EP_Close+0x8c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f873 	bl	8005640 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	3304      	adds	r3, #4
 8002594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2200      	movs	r2, #0
 80025ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	799b      	ldrb	r3, [r3, #6]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	799b      	ldrb	r3, [r3, #6]
 80025d0:	461a      	mov	r2, r3
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	f003 f910 	bl	80057f8 <USB_EPStartXfer>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002604:	681b      	ldr	r3, [r3, #0]
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	460b      	mov	r3, r1
 8002620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	f003 020f 	and.w	r2, r3, #15
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3310      	adds	r3, #16
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2201      	movs	r2, #1
 8002650:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	799b      	ldrb	r3, [r3, #6]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d102      	bne.n	800266c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	799b      	ldrb	r3, [r3, #6]
 8002674:	461a      	mov	r2, r3
 8002676:	6979      	ldr	r1, [r7, #20]
 8002678:	f003 f8be 	bl	80057f8 <USB_EPStartXfer>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	7912      	ldrb	r2, [r2, #4]
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04f      	b.n	8002744 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3310      	adds	r3, #16
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	e00d      	b.n	80026e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	3304      	adds	r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_PCD_EP_SetStall+0x82>
 8002704:	2302      	movs	r3, #2
 8002706:	e01d      	b.n	8002744 <HAL_PCD_EP_SetStall+0xbe>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fc46 	bl	8005fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7999      	ldrb	r1, [r3, #6]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002734:	461a      	mov	r2, r3
 8002736:	f003 fe37 	bl	80063a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	7912      	ldrb	r2, [r2, #4]
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e042      	b.n	80027f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800276a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276e:	2b00      	cmp	r3, #0
 8002770:	da0f      	bge.n	8002792 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 020f 	and.w	r2, r3, #15
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3310      	adds	r3, #16
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
 8002790:	e00f      	b.n	80027b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_PCD_EP_ClrStall+0x86>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e00e      	b.n	80027f0 <HAL_PCD_EP_ClrStall+0xa4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68f9      	ldr	r1, [r7, #12]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fc4f 	bl	8006084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0c      	bge.n	8002826 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	3310      	adds	r3, #16
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e00c      	b.n	8002840 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fa6e 	bl	8005d28 <USB_EPStopXfer>
 800284c:	4603      	mov	r3, r0
 800284e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002850:	7afb      	ldrb	r3, [r7, #11]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08a      	sub	sp, #40	; 0x28
 800285e:	af02      	add	r7, sp, #8
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3310      	adds	r3, #16
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d901      	bls.n	8002892 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d902      	bls.n	80028ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3303      	adds	r3, #3
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b6:	e02a      	b.n	800290e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d902      	bls.n	80028d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3303      	adds	r3, #3
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68d9      	ldr	r1, [r3, #12]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f003 fac3 	bl	8005e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	441a      	add	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d809      	bhi.n	8002938 <PCD_WriteEmptyTxFifo+0xde>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800292c:	429a      	cmp	r2, r3
 800292e:	d203      	bcs.n	8002938 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1bf      	bne.n	80028b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d811      	bhi.n	8002968 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	2201      	movs	r2, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	43db      	mvns	r3, r3
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002964:	4013      	ands	r3, r2
 8002966:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	333c      	adds	r3, #60	; 0x3c
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d17b      	bne.n	8002aa2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4a61      	ldr	r2, [pc, #388]	; (8002b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	f240 80b9 	bls.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80b3 	beq.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	e0a7      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2320      	movs	r3, #32
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	e098      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 8093 	bne.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	; (8002b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d90f      	bls.n	8002a32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e07e      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	1ad2      	subs	r2, r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d114      	bne.n	8002a94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2101      	movs	r1, #1
 8002a80:	f003 fc92 	bl	80063a8 <USB_EP0_OutStart>
 8002a84:	e006      	b.n	8002a94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fd5e 	bl	800955c <HAL_PCD_DataOutStageCallback>
 8002aa0:	e046      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d124      	bne.n	8002af4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	e032      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f006 fd35 	bl	800955c <HAL_PCD_DataOutStageCallback>
 8002af2:	e01d      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f003 fc42 	bl	80063a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f006 fd16 	bl	800955c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	4f54300a 	.word	0x4f54300a
 8002b40:	4f54310a 	.word	0x4f54310a

08002b44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d90e      	bls.n	8002b98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f006 fccd 	bl	8009538 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d90c      	bls.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	799b      	ldrb	r3, [r3, #6]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f003 fbf4 	bl	80063a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	4f54300a 	.word	0x4f54300a

08002bd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bee:	883b      	ldrh	r3, [r7, #0]
 8002bf0:	0419      	lsls	r1, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfc:	e028      	b.n	8002c50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4413      	add	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e00d      	b.n	8002c2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	3340      	adds	r3, #64	; 0x40
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4413      	add	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3ec      	bcc.n	8002c12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c38:	883b      	ldrh	r3, [r7, #0]
 8002c3a:	0418      	lsls	r0, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4302      	orrs	r2, r0
 8002c48:	3340      	adds	r3, #64	; 0x40
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e267      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x108>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e242      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x74>
 8002cfe:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x98>
 8002d16:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6f      	ldr	r2, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6c      	ldr	r2, [pc, #432]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe f9b0 	bl	80010b4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe f9ac 	bl	80010b4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e207      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xc0>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f99c 	bl	80010b4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe f998 	bl	80010b4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1f3      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0xe8>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dae:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b44      	ldr	r3, [pc, #272]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1c7      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe f951 	bl	80010b4 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe f94d 	bl	80010b4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1a8      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f930 	bl	80010b4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe f92c 	bl	80010b4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e187      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f910 	bl	80010b4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f90c 	bl	80010b4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e167      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x200>
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f8f9 	bl	80010b4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe f8f5 	bl	80010b4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d907      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e150      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470000 	.word	0x42470000
 8002ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ea      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8097 	beq.w	800302c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b7a      	ldr	r3, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b77      	ldr	r3, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a73      	ldr	r2, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe f8b5 	bl	80010b4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7fe f8b1 	bl	80010b4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e10c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2ea>
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a5b      	ldr	r2, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002fa4:	4b58      	ldr	r3, [pc, #352]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4b55      	ldr	r3, [pc, #340]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe f876 	bl	80010b4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe f872 	bl	80010b4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0cb      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCC_OscConfig+0x334>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe f860 	bl	80010b4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe f85c 	bl	80010b4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0b5      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a1 	beq.w	8003178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d05c      	beq.n	80030fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d141      	bne.n	80030ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe f830 	bl	80010b4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe f82c 	bl	80010b4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e087      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	491b      	ldr	r1, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe f805 	bl	80010b4 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe f801 	bl	80010b4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e05c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x416>
 80030cc:	e054      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fd ffee 	bl	80010b4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fd ffea 	bl	80010b4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e045      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x444>
 80030fa:	e03d      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e038      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d028      	beq.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d121      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d11a      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fd ff1c 	bl	80010b4 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd ff18 	bl	80010b4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fe7c 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	0800a598 	.word	0x0800a598
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b094      	sub	sp, #80	; 0x50
 800335a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	2300      	movs	r3, #0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	2300      	movs	r3, #0
 8003366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336c:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d00d      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x40>
 8003378:	2b08      	cmp	r3, #8
 800337a:	f200 80e1 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x3a>
 8003386:	e0db      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800338c:	e0db      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x208>)
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003392:	e0d8      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
 80033c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033c6:	4622      	mov	r2, r4
 80033c8:	462b      	mov	r3, r5
 80033ca:	f04f 0000 	mov.w	r0, #0
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	0159      	lsls	r1, r3, #5
 80033d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d8:	0150      	lsls	r0, r2, #5
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4621      	mov	r1, r4
 80033e0:	1a51      	subs	r1, r2, r1
 80033e2:	6139      	str	r1, [r7, #16]
 80033e4:	4629      	mov	r1, r5
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003402:	4651      	mov	r1, sl
 8003404:	018a      	lsls	r2, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ebb2 0801 	subs.w	r8, r2, r1
 800340c:	4659      	mov	r1, fp
 800340e:	eb63 0901 	sbc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	462b      	mov	r3, r5
 8003434:	eb49 0303 	adc.w	r3, r9, r3
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003446:	4629      	mov	r1, r5
 8003448:	024b      	lsls	r3, r1, #9
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003450:	4621      	mov	r1, r4
 8003452:	024a      	lsls	r2, r1, #9
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003464:	f7fc ff04 	bl	8000270 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	e058      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	4611      	mov	r1, r2
 800347e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	f04f 0000 	mov.w	r0, #0
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349e:	0150      	lsls	r0, r2, #5
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4641      	mov	r1, r8
 80034a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c4:	ebb2 040a 	subs.w	r4, r2, sl
 80034c8:	eb63 050b 	sbc.w	r5, r3, fp
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	f7fc feaa 	bl	8000270 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003548:	4618      	mov	r0, r3
 800354a:	3750      	adds	r7, #80	; 0x50
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	0800a5a8 	.word	0x0800a5a8

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffdc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	0800a5a8 	.word	0x0800a5a8

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d035      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035f6:	f7fd fd5d 	bl	80010b4 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035fe:	f7fd fd59 	bl	80010b4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0b0      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003610:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	019a      	lsls	r2, r3, #6
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	071b      	lsls	r3, r3, #28
 8003628:	4955      	ldr	r1, [pc, #340]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003630:	4b52      	ldr	r3, [pc, #328]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003636:	f7fd fd3d 	bl	80010b4 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800363e:	f7fd fd39 	bl	80010b4 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e090      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8083 	beq.w	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003692:	f7fd fd0f 	bl	80010b4 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fd fd0b 	bl	80010b4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e062      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b8:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02f      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d028      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036e0:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036ec:	4a24      	ldr	r2, [pc, #144]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d114      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fd fcd9 	bl	80010b4 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fd fcd5 	bl	80010b4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e02a      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003734:	d10d      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374a:	490d      	ldr	r1, [pc, #52]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]
 8003750:	e005      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800375c:	6093      	str	r3, [r2, #8]
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	4905      	ldr	r1, [pc, #20]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800376c:	4313      	orrs	r3, r2
 800376e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	42470068 	.word	0x42470068
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	42470e40 	.word	0x42470e40

0800378c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e073      	b.n	800388a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7f5b      	ldrb	r3, [r3, #29]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fa0c 	bl	8000bd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d055      	beq.n	8003878 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	22ca      	movs	r2, #202	; 0xca
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2253      	movs	r2, #83	; 0x53
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8dd 	bl	800399c <RTC_EnterInitMode>
 80037e2:	4603      	mov	r3, r0
 80037e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12c      	bne.n	8003846 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	041a      	lsls	r2, r3, #16
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8e4 	bl	8003a0a <RTC_ExitInitMode>
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
 8003876:	e001      	b.n	800387c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	0d9b      	lsrs	r3, r3, #22
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11a      	bne.n	8003944 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f89e 	bl	8003a54 <RTC_Bcd2ToByte>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f895 	bl	8003a54 <RTC_Bcd2ToByte>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	789b      	ldrb	r3, [r3, #2]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f88c 	bl	8003a54 <RTC_Bcd2ToByte>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_RTC_WaitForSynchro+0x48>)
 8003962:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003964:	f7fd fba6 	bl	80010b4 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800396a:	e009      	b.n	8003980 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800396c:	f7fd fba2 	bl	80010b4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800397a:	d901      	bls.n	8003980 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e007      	b.n	8003990 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00017f5f 	.word	0x00017f5f

0800399c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d122      	bne.n	8003a00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ca:	f7fd fb73 	bl	80010b4 <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039d0:	e00c      	b.n	80039ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039d2:	f7fd fb6f 	bl	80010b4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e0:	d904      	bls.n	80039ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2204      	movs	r2, #4
 80039e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <RTC_EnterInitMode+0x64>
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d1e8      	bne.n	80039d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff8b 	bl	8003950 <HAL_RTC_WaitForSynchro>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2204      	movs	r2, #4
 8003a44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07b      	b.n	8003b9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab2:	d009      	beq.n	8003ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
 8003aba:	e005      	b.n	8003ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd f8d4 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	ea42 0103 	orr.w	r1, r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0104 	and.w	r1, r3, #4
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0210 	and.w	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10e      	bne.n	8003be4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    return;
 8003be2:	e0ce      	b.n	8003d82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_SPI_IRQHandler+0x5e>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
    return;
 8003c00:	e0bf      	b.n	8003d82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_SPI_IRQHandler+0x7e>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80b0 	beq.w	8003d82 <HAL_SPI_IRQHandler+0x1de>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80aa 	beq.w	8003d82 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d011      	beq.n	8003c68 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0204 	orr.w	r2, r3, #4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e00b      	b.n	8003c80 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]
        return;
 8003c7e:	e080      	b.n	8003d82 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f043 0208 	orr.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d04f      	beq.n	8003d80 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <HAL_SPI_IRQHandler+0x168>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d034      	beq.n	8003d76 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0203 	bic.w	r2, r2, #3
 8003d1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d011      	beq.n	8003d48 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_SPI_IRQHandler+0x1e4>)
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fb70 	bl	8001416 <HAL_DMA_Abort_IT>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <HAL_SPI_IRQHandler+0x1e4>)
 8003d56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd fb5a 	bl	8001416 <HAL_DMA_Abort_IT>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d74:	e003      	b.n	8003d7e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f808 	bl	8003d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d7c:	e000      	b.n	8003d80 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d7e:	bf00      	nop
    return;
 8003d80:	bf00      	nop
  }
}
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	08003da1 	.word	0x08003da1

08003d8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ffe6 	bl	8003d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e038      	b.n	8003e50 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7fc fc76 	bl	80006e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 ff46 	bl	8004c94 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	461a      	mov	r2, r3
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	f000 ffa8 	bl	8004d68 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6858      	ldr	r0, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	f000 ffd5 	bl	8004dd4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	6892      	ldr	r2, [r2, #8]
 8003e3e:	f041 0101 	orr.w	r1, r1, #1
 8003e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e042      	b.n	8003ef0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd f838 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	; 0x24
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fc85 	bl	80047ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0ba      	sub	sp, #232	; 0xe8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_UART_IRQHandler+0x66>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb69 	bl	800462e <UART_Receive_IT>
      return;
 8003f5c:	e25b      	b.n	8004416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80de 	beq.w	8004124 <HAL_UART_IRQHandler+0x22c>
 8003f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80d1 	beq.w	8004124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xae>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f043 0201 	orr.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_UART_IRQHandler+0xd2>
 8003fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_UART_IRQHandler+0xf6>
 8003fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f043 0204 	orr.w	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_UART_IRQHandler+0x126>
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f043 0208 	orr.w	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 81f2 	beq.w	800440c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_UART_IRQHandler+0x14e>
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 faf4 	bl	800462e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_UART_IRQHandler+0x17a>
 800406a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04f      	beq.n	8004112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9fc 	bl	8004470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d141      	bne.n	800410a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800409c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d9      	bne.n	8004086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d013      	beq.n	8004102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	4a7e      	ldr	r2, [pc, #504]	; (80042d8 <HAL_UART_IRQHandler+0x3e0>)
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd f995 	bl	8001416 <HAL_DMA_Abort_IT>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040fc:	4610      	mov	r0, r2
 80040fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	e00e      	b.n	8004120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f99e 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	e00a      	b.n	8004120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f99a 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e006      	b.n	8004120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f996 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800411e:	e175      	b.n	800440c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	bf00      	nop
    return;
 8004122:	e173      	b.n	800440c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 814f 	bne.w	80043cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8148 	beq.w	80043cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8141 	beq.w	80043cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	f040 80b6 	bne.w	80042dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800417c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8145 	beq.w	8004410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800418a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800418e:	429a      	cmp	r2, r3
 8004190:	f080 813e 	bcs.w	8004410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800419a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a6:	f000 8088 	beq.w	80042ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d9      	bne.n	80041aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3314      	adds	r3, #20
 8004216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800421a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800421e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e1      	bne.n	80041f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3314      	adds	r3, #20
 8004252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800425c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e3      	bne.n	8004232 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428a:	f023 0310 	bic.w	r3, r3, #16
 800428e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800429c:	65ba      	str	r2, [r7, #88]	; 0x58
 800429e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e3      	bne.n	8004278 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd f83e 	bl	8001336 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8c1 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042d6:	e09b      	b.n	8004410 <HAL_UART_IRQHandler+0x518>
 80042d8:	08004537 	.word	0x08004537
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 808e 	beq.w	8004414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8089 	beq.w	8004414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004326:	647a      	str	r2, [r7, #68]	; 0x44
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800432c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e3      	bne.n	8004302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	623b      	str	r3, [r7, #32]
   return(result);
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3314      	adds	r3, #20
 800435a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800435e:	633a      	str	r2, [r7, #48]	; 0x30
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e3      	bne.n	800433a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0310 	bic.w	r3, r3, #16
 8004396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043a4:	61fa      	str	r2, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69b9      	ldr	r1, [r7, #24]
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	617b      	str	r3, [r7, #20]
   return(result);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e3      	bne.n	8004380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f847 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ca:	e023      	b.n	8004414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_UART_IRQHandler+0x4f4>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8ba 	bl	800455e <UART_Transmit_IT>
    return;
 80043ea:	e014      	b.n	8004416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <HAL_UART_IRQHandler+0x51e>
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8fa 	bl	80045fe <UART_EndTransmit_IT>
    return;
 800440a:	e004      	b.n	8004416 <HAL_UART_IRQHandler+0x51e>
    return;
 800440c:	bf00      	nop
 800440e:	e002      	b.n	8004416 <HAL_UART_IRQHandler+0x51e>
      return;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_UART_IRQHandler+0x51e>
      return;
 8004414:	bf00      	nop
  }
}
 8004416:	37e8      	adds	r7, #232	; 0xe8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b095      	sub	sp, #84	; 0x54
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004498:	643a      	str	r2, [r7, #64]	; 0x40
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800449e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d119      	bne.n	800451c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0310 	bic.w	r3, r3, #16
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004508:	61ba      	str	r2, [r7, #24]
 800450a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	613b      	str	r3, [r7, #16]
   return(result);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800452a:	bf00      	nop
 800452c:	3754      	adds	r7, #84	; 0x54
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff77 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b21      	cmp	r3, #33	; 0x21
 8004570:	d13e      	bne.n	80045f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457a:	d114      	bne.n	80045a6 <UART_Transmit_IT+0x48>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d110      	bne.n	80045a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004598:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	621a      	str	r2, [r3, #32]
 80045a4:	e008      	b.n	80045b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	1c59      	adds	r1, r3, #1
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6211      	str	r1, [r2, #32]
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4619      	mov	r1, r3
 80045c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fefc 	bl	800441c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b08c      	sub	sp, #48	; 0x30
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b22      	cmp	r3, #34	; 0x22
 8004640:	f040 80ae 	bne.w	80047a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d117      	bne.n	800467e <UART_Receive_IT+0x50>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d113      	bne.n	800467e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	b29a      	uxth	r2, r3
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	1c9a      	adds	r2, r3, #2
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
 800467c:	e026      	b.n	80046cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d007      	beq.n	80046a2 <UART_Receive_IT+0x74>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <UART_Receive_IT+0x82>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e008      	b.n	80046c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4619      	mov	r1, r3
 80046da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d15d      	bne.n	800479c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0220 	bic.w	r2, r2, #32
 80046ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	2b01      	cmp	r3, #1
 8004724:	d135      	bne.n	8004792 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	613b      	str	r3, [r7, #16]
   return(result);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 0310 	bic.w	r3, r3, #16
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	623a      	str	r2, [r7, #32]
 800474e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	69f9      	ldr	r1, [r7, #28]
 8004752:	6a3a      	ldr	r2, [r7, #32]
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	61bb      	str	r3, [r7, #24]
   return(result);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b10      	cmp	r3, #16
 800476c:	d10a      	bne.n	8004784 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe64 	bl	8004458 <HAL_UARTEx_RxEventCallback>
 8004790:	e002      	b.n	8004798 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fe4c 	bl	8004430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e002      	b.n	80047a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3730      	adds	r7, #48	; 0x30
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b0c0      	sub	sp, #256	; 0x100
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	ea40 0301 	orr.w	r3, r0, r1
 80047d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004804:	f021 010c 	bic.w	r1, r1, #12
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004812:	430b      	orrs	r3, r1
 8004814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	6999      	ldr	r1, [r3, #24]
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	ea40 0301 	orr.w	r3, r0, r1
 8004832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8f      	ldr	r3, [pc, #572]	; (8004a78 <UART_SetConfig+0x2cc>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d005      	beq.n	800484c <UART_SetConfig+0xa0>
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8d      	ldr	r3, [pc, #564]	; (8004a7c <UART_SetConfig+0x2d0>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d104      	bne.n	8004856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fea8 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004854:	e003      	b.n	800485e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004856:	f7fe fe8f 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 800485a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004868:	f040 810c 	bne.w	8004a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800486c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800487a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	1891      	adds	r1, r2, r2
 8004884:	65b9      	str	r1, [r7, #88]	; 0x58
 8004886:	415b      	adcs	r3, r3
 8004888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800488e:	4621      	mov	r1, r4
 8004890:	eb12 0801 	adds.w	r8, r2, r1
 8004894:	4629      	mov	r1, r5
 8004896:	eb43 0901 	adc.w	r9, r3, r1
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	eb18 0303 	adds.w	r3, r8, r3
 80048b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048bc:	462b      	mov	r3, r5
 80048be:	eb49 0303 	adc.w	r3, r9, r3
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048da:	460b      	mov	r3, r1
 80048dc:	18db      	adds	r3, r3, r3
 80048de:	653b      	str	r3, [r7, #80]	; 0x50
 80048e0:	4613      	mov	r3, r2
 80048e2:	eb42 0303 	adc.w	r3, r2, r3
 80048e6:	657b      	str	r3, [r7, #84]	; 0x54
 80048e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f0:	f7fb fcbe 	bl	8000270 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b61      	ldr	r3, [pc, #388]	; (8004a80 <UART_SetConfig+0x2d4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800490c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	64b9      	str	r1, [r7, #72]	; 0x48
 800491c:	415b      	adcs	r3, r3
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004924:	4641      	mov	r1, r8
 8004926:	eb12 0a01 	adds.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb43 0b01 	adc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800493c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004944:	4692      	mov	sl, r2
 8004946:	469b      	mov	fp, r3
 8004948:	4643      	mov	r3, r8
 800494a:	eb1a 0303 	adds.w	r3, sl, r3
 800494e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004952:	464b      	mov	r3, r9
 8004954:	eb4b 0303 	adc.w	r3, fp, r3
 8004958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800496c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004970:	460b      	mov	r3, r1
 8004972:	18db      	adds	r3, r3, r3
 8004974:	643b      	str	r3, [r7, #64]	; 0x40
 8004976:	4613      	mov	r3, r2
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	647b      	str	r3, [r7, #68]	; 0x44
 800497e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004986:	f7fb fc73 	bl	8000270 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4611      	mov	r1, r2
 8004990:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <UART_SetConfig+0x2d4>)
 8004992:	fba3 2301 	umull	r2, r3, r3, r1
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2264      	movs	r2, #100	; 0x64
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	1acb      	subs	r3, r1, r3
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049a6:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <UART_SetConfig+0x2d4>)
 80049a8:	fba3 2302 	umull	r2, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b4:	441c      	add	r4, r3
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d0:	415b      	adcs	r3, r3
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6339      	str	r1, [r7, #48]	; 0x30
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	460a      	mov	r2, r1
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	18db      	adds	r3, r3, r3
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a32:	4613      	mov	r3, r2
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a42:	f7fb fc15 	bl	8000270 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <UART_SetConfig+0x2d4>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <UART_SetConfig+0x2d4>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4422      	add	r2, r4
 8004a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a74:	e106      	b.n	8004c84 <UART_SetConfig+0x4d8>
 8004a76:	bf00      	nop
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a96:	4642      	mov	r2, r8
 8004a98:	464b      	mov	r3, r9
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	6239      	str	r1, [r7, #32]
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	1854      	adds	r4, r2, r1
 8004aaa:	4649      	mov	r1, r9
 8004aac:	eb43 0501 	adc.w	r5, r3, r1
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004acc:	464b      	mov	r3, r9
 8004ace:	eb45 0303 	adc.w	r3, r5, r3
 8004ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004af2:	4629      	mov	r1, r5
 8004af4:	008b      	lsls	r3, r1, #2
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afc:	4621      	mov	r1, r4
 8004afe:	008a      	lsls	r2, r1, #2
 8004b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b04:	f7fb fbb4 	bl	8000270 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <UART_SetConfig+0x4e4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011c      	lsls	r4, r3, #4
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	61b9      	str	r1, [r7, #24]
 8004b30:	415b      	adcs	r3, r3
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6139      	str	r1, [r7, #16]
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b90:	4649      	mov	r1, r9
 8004b92:	008b      	lsls	r3, r1, #2
 8004b94:	4641      	mov	r1, r8
 8004b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	008a      	lsls	r2, r1, #2
 8004b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ba2:	f7fb fb65 	bl	8000270 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	4b38      	ldr	r3, [pc, #224]	; (8004c90 <UART_SetConfig+0x4e4>)
 8004bae:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2264      	movs	r2, #100	; 0x64
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	1acb      	subs	r3, r1, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	3332      	adds	r3, #50	; 0x32
 8004bc0:	4a33      	ldr	r2, [pc, #204]	; (8004c90 <UART_SetConfig+0x4e4>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd6:	677a      	str	r2, [r7, #116]	; 0x74
 8004bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	415b      	adcs	r3, r3
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bec:	4641      	mov	r1, r8
 8004bee:	1851      	adds	r1, r2, r1
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c04:	4659      	mov	r1, fp
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4651      	mov	r1, sl
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	464b      	mov	r3, r9
 8004c20:	460a      	mov	r2, r1
 8004c22:	eb42 0303 	adc.w	r3, r2, r3
 8004c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	663b      	str	r3, [r7, #96]	; 0x60
 8004c32:	667a      	str	r2, [r7, #100]	; 0x64
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c40:	4649      	mov	r1, r9
 8004c42:	008b      	lsls	r3, r1, #2
 8004c44:	4641      	mov	r1, r8
 8004c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	008a      	lsls	r2, r1, #2
 8004c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c52:	f7fb fb0d 	bl	8000270 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <UART_SetConfig+0x4e4>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	; 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	3332      	adds	r3, #50	; 0x32
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <UART_SetConfig+0x4e4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4422      	add	r2, r4
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c90:	51eb851f 	.word	0x51eb851f

08004c94 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f023 0101 	bic.w	r1, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d102      	bne.n	8004cc4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e001      	b.n	8004cc8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004cd4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004cda:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004ce0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004ce6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004cec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004cf2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004cf8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004cfe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004d04:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <FSMC_NORSRAM_Init+0xd0>)
 8004d24:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d2c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004d34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	43db      	mvns	r3, r3
 8004d44:	ea02 0103 	and.w	r1, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4319      	orrs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	0008fb7f 	.word	0x0008fb7f

08004d68 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	3b02      	subs	r3, #2
 8004dae:	061b      	lsls	r3, r3, #24
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	3201      	adds	r2, #1
 8004dbc:	4319      	orrs	r1, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de8:	d11d      	bne.n	8004e26 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	6811      	ldr	r1, [r2, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	6852      	ldr	r2, [r2, #4]
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	4311      	orrs	r1, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	0212      	lsls	r2, r2, #8
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	6992      	ldr	r2, [r2, #24]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	68d2      	ldr	r2, [r2, #12]
 8004e14:	0412      	lsls	r2, r2, #16
 8004e16:	430a      	orrs	r2, r1
 8004e18:	ea43 0102 	orr.w	r1, r3, r2
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e24:	e005      	b.n	8004e32 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	cff00000 	.word	0xcff00000

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d123      	bne.n	8004ea6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fae2 	bl	8006464 <USB_CoreReset>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	e01b      	b.n	8004ede <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 fad6 	bl	8006464 <USB_CoreReset>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
 8004ed0:	e005      	b.n	8004ede <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ede:	7fbb      	ldrb	r3, [r7, #30]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10b      	bne.n	8004efc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f043 0206 	orr.w	r2, r3, #6
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr

08004f0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d165      	bne.n	8004fec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a41      	ldr	r2, [pc, #260]	; (8005028 <USB_SetTurnaroundTime+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d906      	bls.n	8004f36 <USB_SetTurnaroundTime+0x2a>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f30:	230f      	movs	r3, #15
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e062      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d306      	bcc.n	8004f4c <USB_SetTurnaroundTime+0x40>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d202      	bcs.n	8004f4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f46:	230e      	movs	r3, #14
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e057      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a38      	ldr	r2, [pc, #224]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d306      	bcc.n	8004f62 <USB_SetTurnaroundTime+0x56>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d202      	bcs.n	8004f62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e04c      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d306      	bcc.n	8004f78 <USB_SetTurnaroundTime+0x6c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f72:	230c      	movs	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e041      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d906      	bls.n	8004f8e <USB_SetTurnaroundTime+0x82>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a2e      	ldr	r2, [pc, #184]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d802      	bhi.n	8004f8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f88:	230b      	movs	r3, #11
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e036      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d906      	bls.n	8004fa4 <USB_SetTurnaroundTime+0x98>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a29      	ldr	r2, [pc, #164]	; (8005040 <USB_SetTurnaroundTime+0x134>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d802      	bhi.n	8004fa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e02b      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <USB_SetTurnaroundTime+0x134>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0xae>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <USB_SetTurnaroundTime+0x138>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e020      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <USB_SetTurnaroundTime+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d306      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	; (8005048 <USB_SetTurnaroundTime+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d802      	bhi.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fca:	2308      	movs	r3, #8
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e015      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <USB_SetTurnaroundTime+0x13c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d906      	bls.n	8004fe6 <USB_SetTurnaroundTime+0xda>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <USB_SetTurnaroundTime+0x140>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d202      	bcs.n	8004fe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e00a      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e007      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ff2:	2309      	movs	r3, #9
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e001      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ff8:	2309      	movs	r3, #9
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	00d8acbf 	.word	0x00d8acbf
 800502c:	00e4e1c0 	.word	0x00e4e1c0
 8005030:	00f42400 	.word	0x00f42400
 8005034:	01067380 	.word	0x01067380
 8005038:	011a499f 	.word	0x011a499f
 800503c:	01312cff 	.word	0x01312cff
 8005040:	014ca43f 	.word	0x014ca43f
 8005044:	016e3600 	.word	0x016e3600
 8005048:	01a6ab1f 	.word	0x01a6ab1f
 800504c:	01e84800 	.word	0x01e84800

08005050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f043 0201 	orr.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d115      	bne.n	80050e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c2:	200a      	movs	r0, #10
 80050c4:	f7fc f802 	bl	80010cc <HAL_Delay>
      ms += 10U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	330a      	adds	r3, #10
 80050cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 f939 	bl	8006346 <USB_GetMode>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d01e      	beq.n	8005118 <USB_SetCurrentMode+0x84>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2bc7      	cmp	r3, #199	; 0xc7
 80050de:	d9f0      	bls.n	80050c2 <USB_SetCurrentMode+0x2e>
 80050e0:	e01a      	b.n	8005118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d115      	bne.n	8005114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050f4:	200a      	movs	r0, #10
 80050f6:	f7fb ffe9 	bl	80010cc <HAL_Delay>
      ms += 10U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	330a      	adds	r3, #10
 80050fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 f920 	bl	8006346 <USB_GetMode>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <USB_SetCurrentMode+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2bc7      	cmp	r3, #199	; 0xc7
 8005110:	d9f0      	bls.n	80050f4 <USB_SetCurrentMode+0x60>
 8005112:	e001      	b.n	8005118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e005      	b.n	8005124 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2bc8      	cmp	r3, #200	; 0xc8
 800511c:	d101      	bne.n	8005122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800512c:	b084      	sub	sp, #16
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800513a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	e009      	b.n	8005160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3340      	adds	r3, #64	; 0x40
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3301      	adds	r3, #1
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0e      	cmp	r3, #14
 8005164:	d9f2      	bls.n	800514c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800516a:	2b00      	cmp	r3, #0
 800516c:	d11c      	bne.n	80051a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
 80051a6:	e00b      	b.n	80051c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d10d      	bne.n	80051f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051dc:	2100      	movs	r1, #0
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f968 	bl	80054b4 <USB_SetDevSpeed>
 80051e4:	e008      	b.n	80051f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051e6:	2101      	movs	r1, #1
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f963 	bl	80054b4 <USB_SetDevSpeed>
 80051ee:	e003      	b.n	80051f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051f0:	2103      	movs	r1, #3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f95e 	bl	80054b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051f8:	2110      	movs	r1, #16
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8fa 	bl	80053f4 <USB_FlushTxFifo>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f924 	bl	8005458 <USB_FlushRxFifo>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e043      	b.n	80052cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d118      	bne.n	800528e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e013      	b.n	80052a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e008      	b.n	80052a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	461a      	mov	r2, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	461a      	mov	r2, r3
 80052c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052d0:	461a      	mov	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d3b5      	bcc.n	8005244 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	e043      	b.n	8005366 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f4:	d118      	bne.n	8005328 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e013      	b.n	800533a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e008      	b.n	800533a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	461a      	mov	r2, r3
 800535a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800535e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3301      	adds	r3, #1
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800536a:	461a      	mov	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4293      	cmp	r3, r2
 8005370:	d3b5      	bcc.n	80052de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005384:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005392:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f043 0210 	orr.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <USB_DevInit+0x2c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f043 0208 	orr.w	r2, r3, #8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d107      	bne.n	80053e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr
 80053f0:	803c3800 	.word	0x803c3800

080053f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800540e:	d901      	bls.n	8005414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e01b      	b.n	800544c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	daf2      	bge.n	8005402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	019b      	lsls	r3, r3, #6
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005438:	d901      	bls.n	800543e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e006      	b.n	800544c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b20      	cmp	r3, #32
 8005448:	d0f0      	beq.n	800542c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005470:	d901      	bls.n	8005476 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e018      	b.n	80054a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	daf2      	bge.n	8005464 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2210      	movs	r2, #16
 8005486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005494:	d901      	bls.n	800549a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e006      	b.n	80054a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d0f0      	beq.n	8005488 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d4:	4313      	orrs	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0306 	and.w	r3, r3, #6
 80054fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]
 800550a:	e00a      	b.n	8005522 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d002      	beq.n	8005518 <USB_GetDevSpeed+0x32>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b06      	cmp	r3, #6
 8005516:	d102      	bne.n	800551e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005518:	2302      	movs	r3, #2
 800551a:	75fb      	strb	r3, [r7, #23]
 800551c:	e001      	b.n	8005522 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800551e:	230f      	movs	r3, #15
 8005520:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d13a      	bne.n	80055c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556a:	4313      	orrs	r3, r2
 800556c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d155      	bne.n	8005630 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	791b      	ldrb	r3, [r3, #4]
 800559e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	059b      	lsls	r3, r3, #22
 80055a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055a8:	4313      	orrs	r3, r2
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e036      	b.n	8005630 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11a      	bne.n	8005630 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	791b      	ldrb	r3, [r3, #4]
 8005614:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005616:	430b      	orrs	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d161      	bne.n	8005720 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d11f      	bne.n	80056b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005692:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4013      	ands	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0159      	lsls	r1, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	440b      	add	r3, r1
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	4619      	mov	r1, r3
 8005718:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <USB_DeactivateEndpoint+0x1b0>)
 800571a:	4013      	ands	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
 800571e:	e060      	b.n	80057e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d11f      	bne.n	8005778 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005756:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005776:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	43db      	mvns	r3, r3
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005798:	4013      	ands	r3, r2
 800579a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	43db      	mvns	r3, r3
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057bc:	4013      	ands	r3, r2
 80057be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	440b      	add	r3, r1
 80057d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057da:	4619      	mov	r1, r3
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <USB_DeactivateEndpoint+0x1b4>)
 80057de:	4013      	ands	r3, r2
 80057e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	ec337800 	.word	0xec337800
 80057f4:	eff37800 	.word	0xeff37800

080057f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	f040 817a 	bne.w	8005b0e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d132      	bne.n	8005888 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	0cdb      	lsrs	r3, r3, #19
 8005882:	04db      	lsls	r3, r3, #19
 8005884:	6113      	str	r3, [r2, #16]
 8005886:	e092      	b.n	80059ae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	0cdb      	lsrs	r3, r3, #19
 80058a4:	04db      	lsls	r3, r3, #19
 80058a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11a      	bne.n	8005908 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d903      	bls.n	80058e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005904:	6113      	str	r3, [r2, #16]
 8005906:	e01b      	b.n	8005940 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6919      	ldr	r1, [r3, #16]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	440b      	add	r3, r1
 8005920:	1e59      	subs	r1, r3, #1
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	fbb1 f3f3 	udiv	r3, r1, r3
 800592a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800592c:	4ba2      	ldr	r3, [pc, #648]	; (8005bb8 <USB_EPStartXfer+0x3c0>)
 800592e:	400b      	ands	r3, r1
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	0148      	lsls	r0, r1, #5
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	4401      	add	r1, r0
 8005938:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	0148      	lsls	r0, r1, #5
 800595a:	69f9      	ldr	r1, [r7, #28]
 800595c:	4401      	add	r1, r0
 800595e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005962:	4313      	orrs	r3, r2
 8005964:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d11f      	bne.n	80059ae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800598c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d14b      	bne.n	8005a4c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d128      	bne.n	8005a2a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e00f      	b.n	8005a2a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e165      	b.n	8005d18 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	791b      	ldrb	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d015      	beq.n	8005aa0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 814d 	beq.w	8005d18 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a9e:	e13b      	b.n	8005d18 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d110      	bne.n	8005ad2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e00f      	b.n	8005af2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68d9      	ldr	r1, [r3, #12]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	b298      	uxth	r0, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	4603      	mov	r3, r0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f9b8 	bl	8005e7c <USB_WritePacket>
 8005b0c:	e104      	b.n	8005d18 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	0cdb      	lsrs	r3, r3, #19
 8005b2a:	04db      	lsls	r3, r3, #19
 8005b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b50:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d131      	bne.n	8005bbc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	0148      	lsls	r0, r1, #5
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb4:	6113      	str	r3, [r2, #16]
 8005bb6:	e061      	b.n	8005c7c <USB_EPStartXfer+0x484>
 8005bb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d123      	bne.n	8005c0c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bda:	69b9      	ldr	r1, [r7, #24]
 8005bdc:	0148      	lsls	r0, r1, #5
 8005bde:	69f9      	ldr	r1, [r7, #28]
 8005be0:	4401      	add	r1, r0
 8005be2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005be6:	4313      	orrs	r3, r2
 8005be8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c08:	6113      	str	r3, [r2, #16]
 8005c0a:	e037      	b.n	8005c7c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4413      	add	r3, r2
 8005c16:	1e5a      	subs	r2, r3, #1
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	8afa      	ldrh	r2, [r7, #22]
 8005c28:	fb03 f202 	mul.w	r2, r3, r2
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	04d9      	lsls	r1, r3, #19
 8005c42:	4b38      	ldr	r3, [pc, #224]	; (8005d24 <USB_EPStartXfer+0x52c>)
 8005c44:	400b      	ands	r3, r1
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	0148      	lsls	r0, r1, #5
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	4401      	add	r1, r0
 8005c4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	0148      	lsls	r0, r1, #5
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	4401      	add	r1, r0
 8005c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10d      	bne.n	8005c9e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	68d9      	ldr	r1, [r3, #12]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	460a      	mov	r2, r1
 8005c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	791b      	ldrb	r3, [r3, #4]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d128      	bne.n	8005cf8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e00f      	b.n	8005cf8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	1ff80000 	.word	0x1ff80000

08005d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d14a      	bne.n	8005ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5e:	f040 8086 	bne.w	8005e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d902      	bls.n	8005dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005dbe:	e056      	b.n	8005e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd8:	d0e7      	beq.n	8005daa <USB_EPStopXfer+0x82>
 8005dda:	e048      	b.n	8005e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df4:	d13b      	bne.n	8005e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d902      	bls.n	8005e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
          break;
 8005e52:	e00c      	b.n	8005e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d0e7      	beq.n	8005e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	71fb      	strb	r3, [r7, #7]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d123      	bne.n	8005eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ea2:	88bb      	ldrh	r3, [r7, #4]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e018      	b.n	8005ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	031a      	lsls	r2, r3, #12
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d3e2      	bcc.n	8005eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3724      	adds	r7, #36	; 0x24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b08b      	sub	sp, #44	; 0x2c
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	e014      	b.n	8005f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	3301      	adds	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	3301      	adds	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	3301      	adds	r3, #1
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	3301      	adds	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3e6      	bcc.n	8005f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f56:	8bfb      	ldrh	r3, [r7, #30]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	461a      	mov	r2, r3
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	701a      	strb	r2, [r3, #0]
      i++;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	3301      	adds	r3, #1
 8005f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f8e:	8bfb      	ldrh	r3, [r7, #30]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ea      	bne.n	8005f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	372c      	adds	r7, #44	; 0x2c
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d12c      	bne.n	800601e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db12      	blt.n	8005ffc <USB_EPSetStall+0x54>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e02b      	b.n	8006076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	db12      	blt.n	8006056 <USB_EPSetStall+0xae>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d128      	bne.n	80060f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d003      	beq.n	80060d0 <USB_EPClearStall+0x4c>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d138      	bne.n	8006142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	e027      	b.n	8006142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	791b      	ldrb	r3, [r3, #4]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d003      	beq.n	8006122 <USB_EPClearStall+0x9e>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d10f      	bne.n	8006142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618a:	4313      	orrs	r3, r2
 800618c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ca:	f023 0302 	bic.w	r3, r3, #2
 80061ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006238:	68fb      	ldr	r3, [r7, #12]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	0c1b      	lsrs	r3, r3, #16
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	b29b      	uxth	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062dc:	68bb      	ldr	r3, [r7, #8]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b087      	sub	sp, #28
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fa22 f303 	lsr.w	r3, r2, r3
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	b2db      	uxtb	r3, r3
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006338:	68bb      	ldr	r3, [r7, #8]
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0301 	and.w	r3, r3, #1
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006380:	f023 0307 	bic.w	r3, r3, #7
 8006384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	333c      	adds	r3, #60	; 0x3c
 80063be:	3304      	adds	r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4a26      	ldr	r2, [pc, #152]	; (8006460 <USB_EP0_OutStart+0xb8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d90a      	bls.n	80063e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063dc:	d101      	bne.n	80063e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e037      	b.n	8006452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f043 0318 	orr.w	r3, r3, #24
 8006414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800644e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	4f54300a 	.word	0x4f54300a

08006464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800647c:	d901      	bls.n	8006482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e01b      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	daf2      	bge.n	8006470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f043 0201 	orr.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064a6:	d901      	bls.n	80064ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d0f0      	beq.n	800649a <USB_CoreReset+0x36>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <_ZL7TP_Readv>:
volatile float X_MAGNITUDE = 0x433F;
volatile float Y_MAGNITUDE = 0x436E00F;

//Internal Touch pad command, do not call directly
static uint16_t TP_Read(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80064ce:	2310      	movs	r3, #16
 80064d0:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	80bb      	strh	r3, [r7, #4]

    while(i)
 80064d6:	e021      	b.n	800651c <_ZL7TP_Readv+0x54>
    {
        value <<= 1;
 80064d8:	88bb      	ldrh	r3, [r7, #4]
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80064de:	2201      	movs	r2, #1
 80064e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064e4:	4811      	ldr	r0, [pc, #68]	; (800652c <_ZL7TP_Readv+0x64>)
 80064e6:	f7fb f96d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80064ea:	2200      	movs	r2, #0
 80064ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064f0:	480e      	ldr	r0, [pc, #56]	; (800652c <_ZL7TP_Readv+0x64>)
 80064f2:	f7fb f967 	bl	80017c4 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN))
 80064f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064fa:	480c      	ldr	r0, [pc, #48]	; (800652c <_ZL7TP_Readv+0x64>)
 80064fc:	f7fb f94a 	bl	8001794 <HAL_GPIO_ReadPin>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <_ZL7TP_Readv+0x4e>
        {
            ++value;
 8006510:	88bb      	ldrh	r3, [r7, #4]
 8006512:	3301      	adds	r3, #1
 8006514:	80bb      	strh	r3, [r7, #4]
        }

        --i;
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	3b01      	subs	r3, #1
 800651a:	71fb      	strb	r3, [r7, #7]
    while(i)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1da      	bne.n	80064d8 <_ZL7TP_Readv+0x10>
    }

    return value;
 8006522:	88bb      	ldrh	r3, [r7, #4]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40020400 	.word	0x40020400

08006530 <_ZL8TP_Writeh>:

//Internal Touch pad command, do not call directly
static void TP_Write(uint8_t value)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800653a:	2308      	movs	r3, #8
 800653c:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800653e:	2200      	movs	r2, #0
 8006540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006544:	4813      	ldr	r0, [pc, #76]	; (8006594 <_ZL8TP_Writeh+0x64>)
 8006546:	f7fb f93d 	bl	80017c4 <HAL_GPIO_WritePin>
	
    while(i)
 800654a:	e01a      	b.n	8006582 <_ZL8TP_Writeh+0x52>
    {

		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET ); // prepare bit of data
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	09db      	lsrs	r3, r3, #7
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006558:	480e      	ldr	r0, [pc, #56]	; (8006594 <_ZL8TP_Writeh+0x64>)
 800655a:	f7fb f933 	bl	80017c4 <HAL_GPIO_WritePin>

        value <<= 1;
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET); 	//  CLK pulse
 8006564:	2201      	movs	r2, #1
 8006566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800656a:	480a      	ldr	r0, [pc, #40]	; (8006594 <_ZL8TP_Writeh+0x64>)
 800656c:	f7fb f92a 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8006570:	2200      	movs	r2, #0
 8006572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006576:	4807      	ldr	r0, [pc, #28]	; (8006594 <_ZL8TP_Writeh+0x64>)
 8006578:	f7fb f924 	bl	80017c4 <HAL_GPIO_WritePin>
        --i;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	3b01      	subs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
    while(i)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e1      	bne.n	800654c <_ZL8TP_Writeh+0x1c>
    }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40020400 	.word	0x40020400

08006598 <_Z19TP_Read_CoordinatesPt>:



//Read coordinates of touchscreen press. [0] = X, [1] = Y, [2] = RawX, [3] = RawY
uint8_t TP_Read_Coordinates(uint16_t Coordinates[])
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    uint32_t samples = N_OF_POSITION_SAMPLES;
 80065a0:	2380      	movs	r3, #128	; 0x80
 80065a2:	61fb      	str	r3, [r7, #28]
    uint16_t rawx, rawy = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	81fb      	strh	r3, [r7, #14]
    uint32_t calculating_x, calculating_y = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
											// Prepare T-pad controller
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);			// CS - High (inactively)
 80065b0:	2201      	movs	r2, #1
 80065b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065b6:	4852      	ldr	r0, [pc, #328]	; (8006700 <_Z19TP_Read_CoordinatesPt+0x168>)
 80065b8:	f7fb f904 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		// CLK   - High
 80065bc:	2201      	movs	r2, #1
 80065be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065c2:	484f      	ldr	r0, [pc, #316]	; (8006700 <_Z19TP_Read_CoordinatesPt+0x168>)
 80065c4:	f7fb f8fe 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		// MOSI  - High
 80065c8:	2201      	movs	r2, #1
 80065ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ce:	484c      	ldr	r0, [pc, #304]	; (8006700 <_Z19TP_Read_CoordinatesPt+0x168>)
 80065d0:	f7fb f8f8 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET); 		// CS - active
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065da:	4849      	ldr	r0, [pc, #292]	; (8006700 <_Z19TP_Read_CoordinatesPt+0x168>)
 80065dc:	f7fb f8f2 	bl	80017c4 <HAL_GPIO_WritePin>

	
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 80065e0:	e01b      	b.n	800661a <_Z19TP_Read_CoordinatesPt+0x82>
    {			
        TP_Write(CMD_RDY);
 80065e2:	20d0      	movs	r0, #208	; 0xd0
 80065e4:	f7ff ffa4 	bl	8006530 <_ZL8TP_Writeh>
		rawy = TP_Read();
 80065e8:	f7ff ff6e 	bl	80064c8 <_ZL7TP_Readv>
 80065ec:	4603      	mov	r3, r0
 80065ee:	81fb      	strh	r3, [r7, #14]
		calculating_y += rawy;
 80065f0:	89fb      	ldrh	r3, [r7, #14]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

        TP_Write(CMD_RDX);
 80065f8:	2090      	movs	r0, #144	; 0x90
 80065fa:	f7ff ff99 	bl	8006530 <_ZL8TP_Writeh>
		rawx = TP_Read();
 80065fe:	f7ff ff63 	bl	80064c8 <_ZL7TP_Readv>
 8006602:	4603      	mov	r3, r0
 8006604:	81bb      	strh	r3, [r7, #12]
		calculating_x += rawx;
 8006606:	89bb      	ldrh	r3, [r7, #12]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	4413      	add	r3, r2
 800660c:	61bb      	str	r3, [r7, #24]
        samples--;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3b01      	subs	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
	counted_samples++;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3301      	adds	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <_Z19TP_Read_CoordinatesPt+0x9a>
 8006620:	2120      	movs	r1, #32
 8006622:	4838      	ldr	r0, [pc, #224]	; (8006704 <_Z19TP_Read_CoordinatesPt+0x16c>)
 8006624:	f7fb f8b6 	bl	8001794 <HAL_GPIO_ReadPin>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <_Z19TP_Read_CoordinatesPt+0x9a>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <_Z19TP_Read_CoordinatesPt+0x9c>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1d4      	bne.n	80065e2 <_Z19TP_Read_CoordinatesPt+0x4a>
    }
		
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);   			//T-pad controller inactive
 8006638:	2201      	movs	r2, #1
 800663a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800663e:	4830      	ldr	r0, [pc, #192]	; (8006700 <_Z19TP_Read_CoordinatesPt+0x168>)
 8006640:	f7fb f8c0 	bl	80017c4 <HAL_GPIO_WritePin>
		
	if((counted_samples == N_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d108      	bne.n	800665c <_Z19TP_Read_CoordinatesPt+0xc4>
 800664a:	2120      	movs	r1, #32
 800664c:	482d      	ldr	r0, [pc, #180]	; (8006704 <_Z19TP_Read_CoordinatesPt+0x16c>)
 800664e:	f7fb f8a1 	bl	8001794 <HAL_GPIO_ReadPin>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <_Z19TP_Read_CoordinatesPt+0xc4>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <_Z19TP_Read_CoordinatesPt+0xc6>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d042      	beq.n	80066e8 <_Z19TP_Read_CoordinatesPt+0x150>
	{
	    calculating_x /= counted_samples;
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	fbb2 f3f3 	udiv	r3, r2, r3
 800666a:	61bb      	str	r3, [r7, #24]
	    calculating_y /= counted_samples;
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	617b      	str	r3, [r7, #20]
	    rawx = calculating_x;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	81bb      	strh	r3, [r7, #12]
	    Coordinates[2] = rawx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	89ba      	ldrh	r2, [r7, #12]
 8006680:	801a      	strh	r2, [r3, #0]
	    rawy = calculating_y;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	81fb      	strh	r3, [r7, #14]
	    Coordinates[3] = rawy;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3306      	adds	r3, #6
 800668a:	89fa      	ldrh	r2, [r7, #14]
 800668c:	801a      	strh	r2, [r3, #0]
		
	    Coordinates[0] = (rawx - X_OFFSET) / X_MAGNITUDE;
 800668e:	89bb      	ldrh	r3, [r7, #12]
 8006690:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <_Z19TP_Read_CoordinatesPt+0x170>)
 8006692:	8812      	ldrh	r2, [r2, #0]
 8006694:	b292      	uxth	r2, r2
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066a0:	4b1a      	ldr	r3, [pc, #104]	; (800670c <_Z19TP_Read_CoordinatesPt+0x174>)
 80066a2:	ed93 7a00 	vldr	s14, [r3]
 80066a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 3a90 	vmov	r3, s15
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	801a      	strh	r2, [r3, #0]
	    Coordinates[1] = (rawy - Y_OFFSET) / Y_MAGNITUDE;
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	4a15      	ldr	r2, [pc, #84]	; (8006710 <_Z19TP_Read_CoordinatesPt+0x178>)
 80066bc:	8812      	ldrh	r2, [r2, #0]
 80066be:	b292      	uxth	r2, r2
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066ca:	4b12      	ldr	r3, [pc, #72]	; (8006714 <_Z19TP_Read_CoordinatesPt+0x17c>)
 80066cc:	ed93 7a00 	vldr	s14, [r3]
 80066d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3302      	adds	r3, #2
 80066d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066dc:	ee17 2a90 	vmov	r2, s15
 80066e0:	b292      	uxth	r2, r2
 80066e2:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80066e4:	2301      	movs	r3, #1
 80066e6:	e007      	b.n	80066f8 <_Z19TP_Read_CoordinatesPt+0x160>
		}

			Coordinates[0] = 0;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3302      	adds	r3, #2
 80066f2:	2200      	movs	r2, #0
 80066f4:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80066f6:	2300      	movs	r3, #0

}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40020400 	.word	0x40020400
 8006704:	40020800 	.word	0x40020800
 8006708:	2000000a 	.word	0x2000000a
 800670c:	20000010 	.word	0x20000010
 8006710:	2000000c 	.word	0x2000000c
 8006714:	20000014 	.word	0x20000014

08006718 <_Z19TP_Touchpad_Pressedv>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed()
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 800671c:	2120      	movs	r1, #32
 800671e:	4808      	ldr	r0, [pc, #32]	; (8006740 <_Z19TP_Touchpad_Pressedv+0x28>)
 8006720:	f7fb f838 	bl	8001794 <HAL_GPIO_ReadPin>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <_Z19TP_Touchpad_Pressedv+0x20>
	{
		return TOUCHPAD_PRESSED;
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <_Z19TP_Touchpad_Pressedv+0x22>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8006738:	2300      	movs	r3, #0
	}
}
 800673a:	4618      	mov	r0, r3
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40020800 	.word	0x40020800

08006744 <_Z14TP_calibrationv>:

// Touch pad calibration. Lets move stilus from upper left corner of screen to down right corner few time. You have CALIBRATION_TIME millisecond)).
uint8_t TP_calibration()
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
  uint16_t rawCoord[4];
  uint16_t Xmin = 0xFFFF;
 800674a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800674e:	82fb      	strh	r3, [r7, #22]
  uint16_t Ymin = 0xFFFF;
 8006750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006754:	82bb      	strh	r3, [r7, #20]
  uint16_t Xmax = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	827b      	strh	r3, [r7, #18]
  uint16_t Ymax = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	823b      	strh	r3, [r7, #16]

  uint32_t end_time = HAL_GetTick() + CALIBRATION_TIME;
 800675e:	f7fa fca9 	bl	80010b4 <HAL_GetTick>
 8006762:	4603      	mov	r3, r0
 8006764:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006768:	3308      	adds	r3, #8
 800676a:	60fb      	str	r3, [r7, #12]
  while (end_time > HAL_GetTick())
 800676c:	e023      	b.n	80067b6 <_Z14TP_calibrationv+0x72>
    {
      if (TP_Read_Coordinates(rawCoord))
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff ff11 	bl	8006598 <_Z19TP_Read_CoordinatesPt>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d017      	beq.n	80067b6 <_Z14TP_calibrationv+0x72>
	{
	  if (rawCoord[2] < Xmin) { Xmin = rawCoord[2]; }
 8006786:	893b      	ldrh	r3, [r7, #8]
 8006788:	8afa      	ldrh	r2, [r7, #22]
 800678a:	429a      	cmp	r2, r3
 800678c:	d901      	bls.n	8006792 <_Z14TP_calibrationv+0x4e>
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	82fb      	strh	r3, [r7, #22]
	  if (rawCoord[2] > Xmax) { Xmax = rawCoord[2]; }
 8006792:	893b      	ldrh	r3, [r7, #8]
 8006794:	8a7a      	ldrh	r2, [r7, #18]
 8006796:	429a      	cmp	r2, r3
 8006798:	d201      	bcs.n	800679e <_Z14TP_calibrationv+0x5a>
 800679a:	893b      	ldrh	r3, [r7, #8]
 800679c:	827b      	strh	r3, [r7, #18]
	  if (rawCoord[3] < Ymin) { Ymin = rawCoord[3]; }
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	8aba      	ldrh	r2, [r7, #20]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d901      	bls.n	80067aa <_Z14TP_calibrationv+0x66>
 80067a6:	897b      	ldrh	r3, [r7, #10]
 80067a8:	82bb      	strh	r3, [r7, #20]
	  if (rawCoord[3] > Ymax) { Ymax = rawCoord[3]; }
 80067aa:	897b      	ldrh	r3, [r7, #10]
 80067ac:	8a3a      	ldrh	r2, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d201      	bcs.n	80067b6 <_Z14TP_calibrationv+0x72>
 80067b2:	897b      	ldrh	r3, [r7, #10]
 80067b4:	823b      	strh	r3, [r7, #16]
  while (end_time > HAL_GetTick())
 80067b6:	f7fa fc7d 	bl	80010b4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4293      	cmp	r3, r2
 80067c0:	bf8c      	ite	hi
 80067c2:	2301      	movhi	r3, #1
 80067c4:	2300      	movls	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1d0      	bne.n	800676e <_Z14TP_calibrationv+0x2a>
	}
    }
  if ((Xmin < Xmax) && (Ymin < Ymax))
 80067cc:	8afa      	ldrh	r2, [r7, #22]
 80067ce:	8a7b      	ldrh	r3, [r7, #18]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d22c      	bcs.n	800682e <_Z14TP_calibrationv+0xea>
 80067d4:	8aba      	ldrh	r2, [r7, #20]
 80067d6:	8a3b      	ldrh	r3, [r7, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d228      	bcs.n	800682e <_Z14TP_calibrationv+0xea>
  {
      X_OFFSET = Xmin;
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <_Z14TP_calibrationv+0xf4>)
 80067de:	8afb      	ldrh	r3, [r7, #22]
 80067e0:	8013      	strh	r3, [r2, #0]
      Y_OFFSET = Ymin;
 80067e2:	4a16      	ldr	r2, [pc, #88]	; (800683c <_Z14TP_calibrationv+0xf8>)
 80067e4:	8abb      	ldrh	r3, [r7, #20]
 80067e6:	8013      	strh	r3, [r2, #0]
      X_MAGNITUDE = (Xmax - Xmin) / X_SIZE;
 80067e8:	8a7a      	ldrh	r2, [r7, #18]
 80067ea:	8afb      	ldrh	r3, [r7, #22]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	4a14      	ldr	r2, [pc, #80]	; (8006840 <_Z14TP_calibrationv+0xfc>)
 80067f0:	fb82 1203 	smull	r1, r2, r2, r3
 80067f4:	11d2      	asrs	r2, r2, #7
 80067f6:	17db      	asrs	r3, r3, #31
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <_Z14TP_calibrationv+0x100>)
 8006804:	edc3 7a00 	vstr	s15, [r3]
      Y_MAGNITUDE = (Ymax- Ymin) /  Y_SIZE;
 8006808:	8a3a      	ldrh	r2, [r7, #16]
 800680a:	8abb      	ldrh	r3, [r7, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <_Z14TP_calibrationv+0x104>)
 8006810:	fb82 1203 	smull	r1, r2, r2, r3
 8006814:	441a      	add	r2, r3
 8006816:	11d2      	asrs	r2, r2, #7
 8006818:	17db      	asrs	r3, r3, #31
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006824:	4b09      	ldr	r3, [pc, #36]	; (800684c <_Z14TP_calibrationv+0x108>)
 8006826:	edc3 7a00 	vstr	s15, [r3]

      return CALIBRATION_OK;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <_Z14TP_calibrationv+0xec>
  }
  return CALIBRATION_FAILS;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	2000000a 	.word	0x2000000a
 800683c:	2000000c 	.word	0x2000000c
 8006840:	66666667 	.word	0x66666667
 8006844:	20000010 	.word	0x20000010
 8006848:	88888889 	.word	0x88888889
 800684c:	20000014 	.word	0x20000014

08006850 <_Z7lcdInitv>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8006856:	2300      	movs	r3, #0
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2301      	movs	r3, #1
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2200      	movs	r2, #0
 8006862:	2101      	movs	r1, #1
 8006864:	2000      	movs	r0, #0
 8006866:	f000 fc69 	bl	800713c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	4bae      	ldr	r3, [pc, #696]	; (8006b28 <_Z7lcdInitv+0x2d8>)
 8006870:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8006872:	2300      	movs	r3, #0
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	2301      	movs	r3, #1
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	2300      	movs	r3, #0
 800687c:	2201      	movs	r2, #1
 800687e:	2100      	movs	r1, #0
 8006880:	2000      	movs	r0, #0
 8006882:	f000 fc5b 	bl	800713c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	4ba8      	ldr	r3, [pc, #672]	; (8006b2c <_Z7lcdInitv+0x2dc>)
 800688c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800688e:	2300      	movs	r3, #0
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	2301      	movs	r3, #1
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2300      	movs	r3, #0
 8006898:	2200      	movs	r2, #0
 800689a:	2100      	movs	r1, #0
 800689c:	2001      	movs	r0, #1
 800689e:	f000 fc4d 	bl	800713c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	4ba2      	ldr	r3, [pc, #648]	; (8006b30 <_Z7lcdInitv+0x2e0>)
 80068a8:	701a      	strb	r2, [r3, #0]
		                                    MemoryAccessControlNormalOrder,	// rowColumnExchange
		                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
		                                    MemoryAccessControlColorOrderBGR,	// colorOrder
		                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80068aa:	2300      	movs	r3, #0
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	2301      	movs	r3, #1
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	2201      	movs	r2, #1
 80068b6:	2101      	movs	r1, #1
 80068b8:	2001      	movs	r0, #1
 80068ba:	f000 fc3f 	bl	800713c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b9c      	ldr	r3, [pc, #624]	; (8006b34 <_Z7lcdInitv+0x2e4>)
 80068c4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80068c6:	f000 fc0f 	bl	80070e8 <_ZL8lcdResetv>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80068ca:	2028      	movs	r0, #40	; 0x28
 80068cc:	f000 fc16 	bl	80070fc <_ZL15lcdWriteCommandh>

  lcdWriteCommand(0xCF);
 80068d0:	20cf      	movs	r0, #207	; 0xcf
 80068d2:	f000 fc13 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80068d6:	2000      	movs	r0, #0
 80068d8:	f000 fc20 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x83);
 80068dc:	2083      	movs	r0, #131	; 0x83
 80068de:	f000 fc1d 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x30);
 80068e2:	2030      	movs	r0, #48	; 0x30
 80068e4:	f000 fc1a 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xED);
 80068e8:	20ed      	movs	r0, #237	; 0xed
 80068ea:	f000 fc07 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x64);
 80068ee:	2064      	movs	r0, #100	; 0x64
 80068f0:	f000 fc14 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x03);
 80068f4:	2003      	movs	r0, #3
 80068f6:	f000 fc11 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x12);
 80068fa:	2012      	movs	r0, #18
 80068fc:	f000 fc0e 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x81);
 8006900:	2081      	movs	r0, #129	; 0x81
 8006902:	f000 fc0b 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xE8);
 8006906:	20e8      	movs	r0, #232	; 0xe8
 8006908:	f000 fbf8 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x85);
 800690c:	2085      	movs	r0, #133	; 0x85
 800690e:	f000 fc05 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006912:	2000      	movs	r0, #0
 8006914:	f000 fc02 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 8006918:	2078      	movs	r0, #120	; 0x78
 800691a:	f000 fbff 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xCB);
 800691e:	20cb      	movs	r0, #203	; 0xcb
 8006920:	f000 fbec 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x39);
 8006924:	2039      	movs	r0, #57	; 0x39
 8006926:	f000 fbf9 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x2C);
 800692a:	202c      	movs	r0, #44	; 0x2c
 800692c:	f000 fbf6 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006930:	2000      	movs	r0, #0
 8006932:	f000 fbf3 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x34);
 8006936:	2034      	movs	r0, #52	; 0x34
 8006938:	f000 fbf0 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 800693c:	2002      	movs	r0, #2
 800693e:	f000 fbed 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF7);
 8006942:	20f7      	movs	r0, #247	; 0xf7
 8006944:	f000 fbda 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x20);
 8006948:	2020      	movs	r0, #32
 800694a:	f000 fbe7 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xEA);
 800694e:	20ea      	movs	r0, #234	; 0xea
 8006950:	f000 fbd4 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006954:	2000      	movs	r0, #0
 8006956:	f000 fbe1 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 800695a:	2000      	movs	r0, #0
 800695c:	f000 fbde 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8006960:	20c0      	movs	r0, #192	; 0xc0
 8006962:	f000 fbcb 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x26);
 8006966:	2026      	movs	r0, #38	; 0x26
 8006968:	f000 fbd8 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800696c:	20c1      	movs	r0, #193	; 0xc1
 800696e:	f000 fbc5 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x11);
 8006972:	2011      	movs	r0, #17
 8006974:	f000 fbd2 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8006978:	20c5      	movs	r0, #197	; 0xc5
 800697a:	f000 fbbf 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x35);
 800697e:	2035      	movs	r0, #53	; 0x35
 8006980:	f000 fbcc 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3E);
 8006984:	203e      	movs	r0, #62	; 0x3e
 8006986:	f000 fbc9 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800698a:	20c7      	movs	r0, #199	; 0xc7
 800698c:	f000 fbb6 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0xBE);
 8006990:	20be      	movs	r0, #190	; 0xbe
 8006992:	f000 fbc3 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8006996:	2036      	movs	r0, #54	; 0x36
 8006998:	f000 fbb0 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(lcdPortraitConfig);
 800699c:	4b62      	ldr	r3, [pc, #392]	; (8006b28 <_Z7lcdInitv+0x2d8>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fbba 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80069a8:	203a      	movs	r0, #58	; 0x3a
 80069aa:	f000 fba7 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x55);
 80069ae:	2055      	movs	r0, #85	; 0x55
 80069b0:	f000 fbb4 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80069b4:	20b1      	movs	r0, #177	; 0xb1
 80069b6:	f000 fba1 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80069ba:	2000      	movs	r0, #0
 80069bc:	f000 fbae 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 80069c0:	2018      	movs	r0, #24
 80069c2:	f000 fbab 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF2);
 80069c6:	20f2      	movs	r0, #242	; 0xf2
 80069c8:	f000 fb98 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x08);
 80069cc:	2008      	movs	r0, #8
 80069ce:	f000 fba5 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_GAMMASET);
 80069d2:	2026      	movs	r0, #38	; 0x26
 80069d4:	f000 fb92 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x01);
 80069d8:	2001      	movs	r0, #1
 80069da:	f000 fb9f 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80069de:	20e0      	movs	r0, #224	; 0xe0
 80069e0:	f000 fb8c 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x1F);
 80069e4:	201f      	movs	r0, #31
 80069e6:	f000 fb99 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x1A);
 80069ea:	201a      	movs	r0, #26
 80069ec:	f000 fb96 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 80069f0:	2018      	movs	r0, #24
 80069f2:	f000 fb93 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 80069f6:	200a      	movs	r0, #10
 80069f8:	f000 fb90 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0F);
 80069fc:	200f      	movs	r0, #15
 80069fe:	f000 fb8d 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x06);
 8006a02:	2006      	movs	r0, #6
 8006a04:	f000 fb8a 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x45);
 8006a08:	2045      	movs	r0, #69	; 0x45
 8006a0a:	f000 fb87 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x87);
 8006a0e:	2087      	movs	r0, #135	; 0x87
 8006a10:	f000 fb84 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x32);
 8006a14:	2032      	movs	r0, #50	; 0x32
 8006a16:	f000 fb81 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8006a1a:	200a      	movs	r0, #10
 8006a1c:	f000 fb7e 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8006a20:	2007      	movs	r0, #7
 8006a22:	f000 fb7b 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8006a26:	2002      	movs	r0, #2
 8006a28:	f000 fb78 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8006a2c:	2007      	movs	r0, #7
 8006a2e:	f000 fb75 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006a32:	2005      	movs	r0, #5
 8006a34:	f000 fb72 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006a38:	2000      	movs	r0, #0
 8006a3a:	f000 fb6f 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8006a3e:	20e1      	movs	r0, #225	; 0xe1
 8006a40:	f000 fb5c 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006a44:	2000      	movs	r0, #0
 8006a46:	f000 fb69 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x25);
 8006a4a:	2025      	movs	r0, #37	; 0x25
 8006a4c:	f000 fb66 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8006a50:	2027      	movs	r0, #39	; 0x27
 8006a52:	f000 fb63 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006a56:	2005      	movs	r0, #5
 8006a58:	f000 fb60 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x10);
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f000 fb5d 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x09);
 8006a62:	2009      	movs	r0, #9
 8006a64:	f000 fb5a 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8006a68:	203a      	movs	r0, #58	; 0x3a
 8006a6a:	f000 fb57 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 8006a6e:	2078      	movs	r0, #120	; 0x78
 8006a70:	f000 fb54 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x4D);
 8006a74:	204d      	movs	r0, #77	; 0x4d
 8006a76:	f000 fb51 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006a7a:	2005      	movs	r0, #5
 8006a7c:	f000 fb4e 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8006a80:	2018      	movs	r0, #24
 8006a82:	f000 fb4b 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0D);
 8006a86:	200d      	movs	r0, #13
 8006a88:	f000 fb48 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x38);
 8006a8c:	2038      	movs	r0, #56	; 0x38
 8006a8e:	f000 fb45 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8006a92:	203a      	movs	r0, #58	; 0x3a
 8006a94:	f000 fb42 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x1F);
 8006a98:	201f      	movs	r0, #31
 8006a9a:	f000 fb3f 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8006a9e:	202a      	movs	r0, #42	; 0x2a
 8006aa0:	f000 fb2c 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f000 fb39 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f000 fb36 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f000 fb33 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0xEF);
 8006ab6:	20ef      	movs	r0, #239	; 0xef
 8006ab8:	f000 fb30 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8006abc:	202b      	movs	r0, #43	; 0x2b
 8006abe:	f000 fb1d 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f000 fb2a 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f000 fb27 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x01);
 8006ace:	2001      	movs	r0, #1
 8006ad0:	f000 fb24 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3F);
 8006ad4:	203f      	movs	r0, #63	; 0x3f
 8006ad6:	f000 fb21 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8006ada:	20b7      	movs	r0, #183	; 0xb7
 8006adc:	f000 fb0e 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x07);
 8006ae0:	2007      	movs	r0, #7
 8006ae2:	f000 fb1b 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8006ae6:	20b6      	movs	r0, #182	; 0xb6
 8006ae8:	f000 fb08 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(0x0A);
 8006aec:	200a      	movs	r0, #10
 8006aee:	f000 fb15 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x82);
 8006af2:	2082      	movs	r0, #130	; 0x82
 8006af4:	f000 fb12 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8006af8:	2027      	movs	r0, #39	; 0x27
 8006afa:	f000 fb0f 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006afe:	2000      	movs	r0, #0
 8006b00:	f000 fb0c 	bl	800711c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8006b04:	2011      	movs	r0, #17
 8006b06:	f000 faf9 	bl	80070fc <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8006b0a:	2064      	movs	r0, #100	; 0x64
 8006b0c:	f7fa fade 	bl	80010cc <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8006b10:	2029      	movs	r0, #41	; 0x29
 8006b12:	f000 faf3 	bl	80070fc <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8006b16:	2064      	movs	r0, #100	; 0x64
 8006b18:	f7fa fad8 	bl	80010cc <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8006b1c:	202c      	movs	r0, #44	; 0x2c
 8006b1e:	f000 faed 	bl	80070fc <_ZL15lcdWriteCommandh>
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200002e4 	.word	0x200002e4
 8006b2c:	200002e5 	.word	0x200002e5
 8006b30:	200002e6 	.word	0x200002e6
 8006b34:	200002e7 	.word	0x200002e7

08006b38 <_Z10lcdFillRGBt>:
}

// Fill screen a color

void lcdFillRGB(uint16_t color)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <_Z10lcdFillRGBt+0x5c>)
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <_Z10lcdFillRGBt+0x5c>)
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2100      	movs	r1, #0
 8006b54:	2000      	movs	r0, #0
 8006b56:	f000 fa3f 	bl	8006fd8 <_Z12lcdSetWindowtttt>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <_Z10lcdFillRGBt+0x5c>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <_Z10lcdFillRGBt+0x5c>)
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8006b6a:	e003      	b.n	8006b74 <_Z10lcdFillRGBt+0x3c>
  {
    lcdWriteData(color);
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fad4 	bl	800711c <_ZL12lcdWriteDatat>
  while(dimensions--)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	60fa      	str	r2, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f1      	bne.n	8006b6c <_Z10lcdFillRGBt+0x34>
  }
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000018 	.word	0x20000018

08006b98 <_Z11lcdDrawCharsshtt>:
 * \param size		Character Size
 *
 * \return void
 */
uint16_t lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b08b      	sub	sp, #44	; 0x2c
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	80fb      	strh	r3, [r7, #6]
 8006baa:	4603      	mov	r3, r0
 8006bac:	80bb      	strh	r3, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	803b      	strh	r3, [r7, #0]
  uint16_t incrX = 0; 								// width of char symbol
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	83fb      	strh	r3, [r7, #30]
  if ((x + lcdFont.pFont->Width >= lcdProperties.width) || 			// Clip right
 8006bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bbe:	4a65      	ldr	r2, [pc, #404]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006bc0:	6892      	ldr	r2, [r2, #8]
 8006bc2:	8892      	ldrh	r2, [r2, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a64      	ldr	r2, [pc, #400]	; (8006d58 <_Z11lcdDrawCharsshtt+0x1c0>)
 8006bc8:	8812      	ldrh	r2, [r2, #0]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	da11      	bge.n	8006bf2 <_Z11lcdDrawCharsshtt+0x5a>
	    (y + lcdFont.pFont->Height >= lcdProperties.height) || 		// Clip bottom
 8006bce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006bd2:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	88d2      	ldrh	r2, [r2, #6]
 8006bd8:	4413      	add	r3, r2
 8006bda:	4a5f      	ldr	r2, [pc, #380]	; (8006d58 <_Z11lcdDrawCharsshtt+0x1c0>)
 8006bdc:	8852      	ldrh	r2, [r2, #2]
  if ((x + lcdFont.pFont->Width >= lcdProperties.width) || 			// Clip right
 8006bde:	4293      	cmp	r3, r2
 8006be0:	da07      	bge.n	8006bf2 <_Z11lcdDrawCharsshtt+0x5a>
	    (y + lcdFont.pFont->Height >= lcdProperties.height) || 		// Clip bottom
 8006be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db03      	blt.n	8006bf2 <_Z11lcdDrawCharsshtt+0x5a>
	    (x  < 0) || 							// Clip left
 8006bea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da01      	bge.n	8006bf6 <_Z11lcdDrawCharsshtt+0x5e>
	    (y < 0))  								// Clip top
	{
	    return incrX;
 8006bf2:	8bfb      	ldrh	r3, [r7, #30]
 8006bf4:	e0aa      	b.n	8006d4c <_Z11lcdDrawCharsshtt+0x1b4>
	}
//--------------------------------------------- output procedure for monospace char------------------------------------------------
	if (lcdFont.pFont->Monospace)
 8006bf6:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	7a1b      	ldrb	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80a2 	beq.w	8006d46 <_Z11lcdDrawCharsshtt+0x1ae>
	{
	    incrX = lcdFont.pFont->Width;
 8006c02:	4b54      	ldr	r3, [pc, #336]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	889b      	ldrh	r3, [r3, #4]
 8006c08:	83fb      	strh	r3, [r7, #30]
	    uint8_t byte_count = 1 + lcdFont.pFont->Width / 8;
 8006c0a:	4b52      	ldr	r3, [pc, #328]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	889b      	ldrh	r3, [r3, #4]
 8006c10:	08db      	lsrs	r3, r3, #3
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	777b      	strb	r3, [r7, #29]
	    uint8_t xP = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c26:	e085      	b.n	8006d34 <_Z11lcdDrawCharsshtt+0x19c>
	      {
		  uint16_t bit_count = lcdFont.pFont->Width;
 8006c28:	4b4a      	ldr	r3, [pc, #296]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	889b      	ldrh	r3, [r3, #4]
 8006c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		  uint8_t line;
		  for(uint8_t k = 0; k < byte_count; k++)
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c36:	e070      	b.n	8006d1a <_Z11lcdDrawCharsshtt+0x182>
		    {
			uint16_t lcd_data[8] = {bg};
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	609a      	str	r2, [r3, #8]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c48:	81bb      	strh	r3, [r7, #12]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * byte_count) + (i * byte_count) + k];
 8006c4a:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	3a20      	subs	r2, #32
 8006c54:	493f      	ldr	r1, [pc, #252]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006c56:	6889      	ldr	r1, [r1, #8]
 8006c58:	88c9      	ldrh	r1, [r1, #6]
 8006c5a:	fb01 f202 	mul.w	r2, r1, r2
 8006c5e:	7f79      	ldrb	r1, [r7, #29]
 8006c60:	fb02 f101 	mul.w	r1, r2, r1
 8006c64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c68:	7f78      	ldrb	r0, [r7, #29]
 8006c6a:	fb00 f202 	mul.w	r2, r0, r2
 8006c6e:	4411      	add	r1, r2
 8006c70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c74:	440a      	add	r2, r1
 8006c76:	4413      	add	r3, r2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t type_pixels = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for(uint8_t j = 0; j < 8; j++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3020 	strb.w	r3, [r7, #32]
 8006c8a:	e022      	b.n	8006cd2 <_Z11lcdDrawCharsshtt+0x13a>
			{
			    if (bit_count)
 8006c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d024      	beq.n	8006cdc <_Z11lcdDrawCharsshtt+0x144>
			      {
				//if((line & 0x80) == 0x80)
				if((line & 0x01) == 0x01)
 8006c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <_Z11lcdDrawCharsshtt+0x116>
				{
					lcd_data[j] = color;
 8006c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	3328      	adds	r3, #40	; 0x28
 8006ca6:	443b      	add	r3, r7
 8006ca8:	883a      	ldrh	r2, [r7, #0]
 8006caa:	f823 2c1c 	strh.w	r2, [r3, #-28]
				}
				//line <<= 1;
				line >>= 1;
 8006cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				-- bit_count;
 8006cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
				++ type_pixels;
 8006cbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for(uint8_t j = 0; j < 8; j++)
 8006cc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f887 3020 	strb.w	r3, [r7, #32]
 8006cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	d9d8      	bls.n	8006c8c <_Z11lcdDrawCharsshtt+0xf4>
 8006cda:	e000      	b.n	8006cde <_Z11lcdDrawCharsshtt+0x146>
			      } else break;
 8006cdc:	bf00      	nop
			}
			lcdDrawPixels(x + xP, y + i, lcd_data, type_pixels);
 8006cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	b298      	uxth	r0, r3
 8006cea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	88bb      	ldrh	r3, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	b299      	uxth	r1, r3
 8006cf6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006cfa:	f107 020c 	add.w	r2, r7, #12
 8006cfe:	f000 f9c7 	bl	8007090 <_ZL13lcdDrawPixelsttPtm>
			xP += type_pixels;
 8006d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  for(uint8_t k = 0; k < byte_count; k++)
 8006d10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d14:	3301      	adds	r3, #1
 8006d16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d1a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d1e:	7f7b      	ldrb	r3, [r7, #29]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d389      	bcc.n	8006c38 <_Z11lcdDrawCharsshtt+0xa0>
		    }
		xP = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d38:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <_Z11lcdDrawCharsshtt+0x1bc>)
 8006d3a:	6892      	ldr	r2, [r2, #8]
 8006d3c:	88d2      	ldrh	r2, [r2, #6]
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f6ff af72 	blt.w	8006c28 <_Z11lcdDrawCharsshtt+0x90>
 8006d44:	e001      	b.n	8006d4a <_Z11lcdDrawCharsshtt+0x1b2>
	      }
	    //--------------------------------------------- output procedure for not monospace char------------------------------------------------
	} else
	  {

	      return incrX;
 8006d46:	8bfb      	ldrh	r3, [r7, #30]
 8006d48:	e000      	b.n	8006d4c <_Z11lcdDrawCharsshtt+0x1b4>
	  }
	return incrX;
 8006d4a:	8bfb      	ldrh	r3, [r7, #30]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	372c      	adds	r7, #44	; 0x2c
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd90      	pop	{r4, r7, pc}
 8006d54:	20000020 	.word	0x20000020
 8006d58:	20000018 	.word	0x20000018

08006d5c <_Z9lcdPrintfPKcz>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char* fmt, ...)
{
 8006d5c:	b40f      	push	{r0, r1, r2, r3}
 8006d5e:	b590      	push	{r4, r7, lr}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af02      	add	r7, sp, #8
	static  char buf[256];

	char *p;
	va_list lst;

	va_start(lst, fmt);
 8006d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d68:	607b      	str	r3, [r7, #4]
	vsprintf(buf, fmt, lst);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6a39      	ldr	r1, [r7, #32]
 8006d6e:	483f      	ldr	r0, [pc, #252]	; (8006e6c <_Z9lcdPrintfPKcz+0x110>)
 8006d70:	f002 feb8 	bl	8009ae4 <vsiprintf>
	va_end(lst);

	p = buf;
 8006d74:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <_Z9lcdPrintfPKcz+0x110>)
 8006d76:	60fb      	str	r3, [r7, #12]
	while (*p)
 8006d78:	e06c      	b.n	8006e54 <_Z9lcdPrintfPKcz+0xf8>
	{
		if (*p == '\n')
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b0a      	cmp	r3, #10
 8006d80:	d10e      	bne.n	8006da0 <_Z9lcdPrintfPKcz+0x44>
		{
			cursorXY.y += lcdFont.pFont->Height + 1;
 8006d82:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006d84:	885a      	ldrh	r2, [r3, #2]
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	88db      	ldrh	r3, [r3, #6]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3301      	adds	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006d96:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8006d98:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e04d      	b.n	8006e3c <_Z9lcdPrintfPKcz+0xe0>
		}
		else if (*p == '\r')
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b0d      	cmp	r3, #13
 8006da6:	d049      	beq.n	8006e3c <_Z9lcdPrintfPKcz+0xe0>
		{
			// skip em
		}
		else if (*p == '\t')
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b09      	cmp	r3, #9
 8006dae:	d10b      	bne.n	8006dc8 <_Z9lcdPrintfPKcz+0x6c>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8006db0:	4b2f      	ldr	r3, [pc, #188]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	889b      	ldrh	r3, [r3, #4]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e039      	b.n	8006e3c <_Z9lcdPrintfPKcz+0xe0>
		}
		else
		{
			uint16_t stepX = lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8006dc8:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b218      	sxth	r0, r3
 8006dce:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006dd0:	885b      	ldrh	r3, [r3, #2]
 8006dd2:	b219      	sxth	r1, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	b29c      	uxth	r4, r3
 8006dde:	4b25      	ldr	r3, [pc, #148]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4623      	mov	r3, r4
 8006de8:	f7ff fed6 	bl	8006b98 <_Z11lcdDrawCharsshtt>
 8006dec:	4603      	mov	r3, r0
 8006dee:	817b      	strh	r3, [r7, #10]
			cursorXY.x += (++ stepX);										// move cursor to width of symbol +  1
 8006df0:	897b      	ldrh	r3, [r7, #10]
 8006df2:	3301      	adds	r3, #1
 8006df4:	817b      	strh	r3, [r7, #10]
 8006df6:	897a      	ldrh	r2, [r7, #10]
 8006df8:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e02:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006e06:	7b1b      	ldrb	r3, [r3, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d017      	beq.n	8006e3c <_Z9lcdPrintfPKcz+0xe0>
 8006e0c:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <_Z9lcdPrintfPKcz+0x11c>)
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	889b      	ldrh	r3, [r3, #4]
 8006e1e:	1acb      	subs	r3, r1, r3
 8006e20:	429a      	cmp	r2, r3
 8006e22:	dd0b      	ble.n	8006e3c <_Z9lcdPrintfPKcz+0xe0>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e26:	885a      	ldrh	r2, [r3, #2]
 8006e28:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <_Z9lcdPrintfPKcz+0x118>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	88db      	ldrh	r3, [r3, #6]
 8006e2e:	4413      	add	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e34:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]

		if (cursorXY.y >= lcdProperties.height)
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e44:	885a      	ldrh	r2, [r3, #2]
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <_Z9lcdPrintfPKcz+0x11c>)
 8006e48:	885b      	ldrh	r3, [r3, #2]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <_Z9lcdPrintfPKcz+0xf8>
		{
			cursorXY.y = 0;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <_Z9lcdPrintfPKcz+0x114>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	805a      	strh	r2, [r3, #2]
	while (*p)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d18e      	bne.n	8006d7a <_Z9lcdPrintfPKcz+0x1e>
		}
	}

}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	200002e8 	.word	0x200002e8
 8006e70:	200002e0 	.word	0x200002e0
 8006e74:	20000020 	.word	0x20000020
 8006e78:	20000018 	.word	0x20000018

08006e7c <_Z14lcdSetTextFontP6_tFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8006e84:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <_Z14lcdSetTextFontP6_tFont+0x1c>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6093      	str	r3, [r2, #8]
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000020 	.word	0x20000020

08006e9c <_Z15lcdSetTextColortt>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	460a      	mov	r2, r1
 8006ea6:	80fb      	strh	r3, [r7, #6]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8006eac:	88fb      	ldrh	r3, [r7, #6]
 8006eae:	4a05      	ldr	r2, [pc, #20]	; (8006ec4 <_Z15lcdSetTextColortt+0x28>)
 8006eb0:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8006eb2:	88bb      	ldrh	r3, [r7, #4]
 8006eb4:	4a03      	ldr	r2, [pc, #12]	; (8006ec4 <_Z15lcdSetTextColortt+0x28>)
 8006eb6:	6053      	str	r3, [r2, #4]
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	20000020 	.word	0x20000020

08006ec8 <_Z17lcdSetOrientation21lcdOrientationTypeDef>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8006ed2:	4a2f      	ldr	r2, [pc, #188]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8006ed8:	2036      	movs	r0, #54	; 0x36
 8006eda:	f000 f90f 	bl	80070fc <_ZL15lcdWriteCommandh>

	switch (lcdProperties.orientation)
 8006ede:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006ee0:	791b      	ldrb	r3, [r3, #4]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d842      	bhi.n	8006f6c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa4>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <_Z17lcdSetOrientation21lcdOrientationTypeDef+0x24>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f51 	.word	0x08006f51
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xcc>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 f90a 	bl	800711c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8006f08:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f0a:	22f0      	movs	r2, #240	; 0xf0
 8006f0c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8006f0e:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006f14:	805a      	strh	r2, [r3, #2]
			break;
 8006f16:	e02a      	b.n	8006f6e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8006f18:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd0>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f8fc 	bl	800711c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f26:	22f0      	movs	r2, #240	; 0xf0
 8006f28:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006f30:	805a      	strh	r2, [r3, #2]
			break;
 8006f32:	e01c      	b.n	8006f6e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd4>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f8ee 	bl	800711c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006f46:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8006f48:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f4a:	22f0      	movs	r2, #240	; 0xf0
 8006f4c:	805a      	strh	r2, [r3, #2]
			break;
 8006f4e:	e00e      	b.n	8006f6e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8006f50:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd8>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f8e0 	bl	800711c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006f62:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f66:	22f0      	movs	r2, #240	; 0xf0
 8006f68:	805a      	strh	r2, [r3, #2]
			break;
 8006f6a:	e000      	b.n	8006f6e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		default:
			break;
 8006f6c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2100      	movs	r1, #0
 8006f80:	2000      	movs	r0, #0
 8006f82:	f000 f829 	bl	8006fd8 <_Z12lcdSetWindowtttt>
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000018 	.word	0x20000018
 8006f94:	200002e4 	.word	0x200002e4
 8006f98:	200002e6 	.word	0x200002e6
 8006f9c:	200002e5 	.word	0x200002e5
 8006fa0:	200002e7 	.word	0x200002e7

08006fa4 <_Z12lcdSetCursortt>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	460a      	mov	r2, r1
 8006fae:	80fb      	strh	r3, [r7, #6]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8006fb4:	4a07      	ldr	r2, [pc, #28]	; (8006fd4 <_Z12lcdSetCursortt+0x30>)
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8006fba:	4a06      	ldr	r2, [pc, #24]	; (8006fd4 <_Z12lcdSetCursortt+0x30>)
 8006fbc:	88bb      	ldrh	r3, [r7, #4]
 8006fbe:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	88b9      	ldrh	r1, [r7, #4]
 8006fc6:	88f8      	ldrh	r0, [r7, #6]
 8006fc8:	f000 f806 	bl	8006fd8 <_Z12lcdSetWindowtttt>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	200002e0 	.word	0x200002e0

08006fd8 <_Z12lcdSetWindowtttt>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	80fb      	strh	r3, [r7, #6]
 8006fea:	4603      	mov	r3, r0
 8006fec:	80bb      	strh	r3, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	807b      	strh	r3, [r7, #2]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8006ff6:	202a      	movs	r0, #42	; 0x2a
 8006ff8:	f000 f880 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(x0 >> 8) ;
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f88a 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(x0 );
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f886 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(x1 >> 8);
 8007010:	887b      	ldrh	r3, [r7, #2]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	b29b      	uxth	r3, r3
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f880 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(x1);
 800701c:	887b      	ldrh	r3, [r7, #2]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f87c 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8007024:	202b      	movs	r0, #43	; 0x2b
 8007026:	f000 f869 	bl	80070fc <_ZL15lcdWriteCommandh>
  lcdWriteData(y0 >> 8);
 800702a:	88bb      	ldrh	r3, [r7, #4]
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	b29b      	uxth	r3, r3
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f873 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(y0);
 8007036:	88bb      	ldrh	r3, [r7, #4]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 f86f 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(y1 >> 8);
 800703e:	883b      	ldrh	r3, [r7, #0]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	b29b      	uxth	r3, r3
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f869 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteData(y1);
 800704a:	883b      	ldrh	r3, [r7, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f865 	bl	800711c <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8007052:	202c      	movs	r0, #44	; 0x2c
 8007054:	f000 f852 	bl	80070fc <_ZL15lcdWriteCommandh>
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bd90      	pop	{r4, r7, pc}

08007060 <_Z12lcdGetHeightv>:
{
  return lcdProperties.width;
}

uint16_t lcdGetHeight(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <_Z12lcdGetHeightv+0x14>)
 8007066:	885b      	ldrh	r3, [r3, #2]
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000018 	.word	0x20000018

08007078 <_Z14lcdGetTextFontv>:
{
  return lcdProperties.orientation;
}

sFONT* lcdGetTextFont(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <_Z14lcdGetTextFontv+0x14>)
 800707e:	689b      	ldr	r3, [r3, #8]
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000020 	.word	0x20000020

08007090 <_ZL13lcdDrawPixelsttPtm>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60ba      	str	r2, [r7, #8]
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	4603      	mov	r3, r0
 800709c:	81fb      	strh	r3, [r7, #14]
 800709e:	460b      	mov	r3, r1
 80070a0:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80070a6:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <_ZL13lcdDrawPixelsttPtm+0x54>)
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <_ZL13lcdDrawPixelsttPtm+0x54>)
 80070b0:	885b      	ldrh	r3, [r3, #2]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	89b9      	ldrh	r1, [r7, #12]
 80070b8:	89f8      	ldrh	r0, [r7, #14]
 80070ba:	f7ff ff8d 	bl	8006fd8 <_Z12lcdSetWindowtttt>

  do
  {
    lcdWriteData(data[i++]);
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1c59      	adds	r1, r3, #1
 80070c4:	6179      	str	r1, [r7, #20]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 f825 	bl	800711c <_ZL12lcdWriteDatat>
  }
  while (i < dataLength);
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3f1      	bcc.n	80070be <_ZL13lcdDrawPixelsttPtm+0x2e>

}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000018 	.word	0x20000018

080070e8 <_ZL8lcdResetv>:

static void lcdReset(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80070ec:	2001      	movs	r0, #1
 80070ee:	f000 f805 	bl	80070fc <_ZL15lcdWriteCommandh>
	HAL_Delay(5);
 80070f2:	2005      	movs	r0, #5
 80070f4:	f7f9 ffea 	bl	80010cc <HAL_Delay>
}
 80070f8:	bf00      	nop
 80070fa:	bd80      	pop	{r7, pc}

080070fc <_ZL15lcdWriteCommandh>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8007106:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800710a:	79fa      	ldrb	r2, [r7, #7]
 800710c:	b292      	uxth	r2, r2
 800710e:	801a      	strh	r2, [r3, #0]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <_ZL12lcdWriteDatat>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8007126:	4a04      	ldr	r2, [pc, #16]	; (8007138 <_ZL12lcdWriteDatat+0x1c>)
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	8013      	strh	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	60080000 	.word	0x60080000

0800713c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 800713c:	b490      	push	{r4, r7}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4623      	mov	r3, r4
 800714c:	71fb      	strb	r3, [r7, #7]
 800714e:	4603      	mov	r3, r0
 8007150:	71bb      	strb	r3, [r7, #6]
 8007152:	460b      	mov	r3, r1
 8007154:	717b      	strb	r3, [r7, #5]
 8007156:	4613      	mov	r3, r2
 8007158:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) 	value 	|= ILI9341_MADCTL_MH;
 800715e:	7f3b      	ldrb	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x30>
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	f043 0304 	orr.w	r3, r3, #4
 800716a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) 		value 	|= ILI9341_MADCTL_BGR;
 800716c:	7e3b      	ldrb	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x3e>
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	f043 0308 	orr.w	r3, r3, #8
 8007178:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) 	value 	|= ILI9341_MADCTL_ML;
 800717a:	793b      	ldrb	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x4c>
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	f043 0310 	orr.w	r3, r3, #16
 8007186:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) 	value 	|= ILI9341_MADCTL_MV;
 8007188:	797b      	ldrb	r3, [r7, #5]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x5a>
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	f043 0320 	orr.w	r3, r3, #32
 8007194:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) 	value 	|= ILI9341_MADCTL_MX;
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x68>
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a2:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) 		value 	|= ILI9341_MADCTL_MY;
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x76>
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071b0:	73fb      	strb	r3, [r7, #15]
  return value;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc90      	pop	{r4, r7}
 80071bc:	4770      	bx	lr
	...

080071c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071d0:	f002 fc2e 	bl	8009a30 <USBD_static_malloc>
 80071d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32b0      	adds	r2, #176	; 0xb0
 80071e6:	2100      	movs	r1, #0
 80071e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0d4      	b.n	800739a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80071f4:	2100      	movs	r1, #0
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f002 fc7e 	bl	8009af8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32b0      	adds	r2, #176	; 0xb0
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32b0      	adds	r2, #176	; 0xb0
 8007216:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7c1b      	ldrb	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d138      	bne.n	800729a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007228:	4b5e      	ldr	r3, [pc, #376]	; (80073a4 <USBD_CDC_Init+0x1e4>)
 800722a:	7819      	ldrb	r1, [r3, #0]
 800722c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007230:	2202      	movs	r2, #2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 fad9 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007238:	4b5a      	ldr	r3, [pc, #360]	; (80073a4 <USBD_CDC_Init+0x1e4>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	2201      	movs	r2, #1
 8007250:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007252:	4b55      	ldr	r3, [pc, #340]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800725a:	2202      	movs	r2, #2
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 fac4 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007262:	4b51      	ldr	r3, [pc, #324]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 020f 	and.w	r2, r3, #15
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800727a:	2201      	movs	r2, #1
 800727c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800727e:	4b4b      	ldr	r3, [pc, #300]	; (80073ac <USBD_CDC_Init+0x1ec>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 020f 	and.w	r2, r3, #15
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	3326      	adds	r3, #38	; 0x26
 8007294:	2210      	movs	r2, #16
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e035      	b.n	8007306 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800729a:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <USBD_CDC_Init+0x1e4>)
 800729c:	7819      	ldrb	r1, [r3, #0]
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	2202      	movs	r2, #2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 faa1 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <USBD_CDC_Init+0x1e4>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3324      	adds	r3, #36	; 0x24
 80072be:	2201      	movs	r2, #1
 80072c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072c2:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 80072c4:	7819      	ldrb	r1, [r3, #0]
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	2202      	movs	r2, #2
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f002 fa8d 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072d0:	4b35      	ldr	r3, [pc, #212]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072e8:	2201      	movs	r2, #1
 80072ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072ec:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <USBD_CDC_Init+0x1ec>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 020f 	and.w	r2, r3, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3326      	adds	r3, #38	; 0x26
 8007302:	2210      	movs	r2, #16
 8007304:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007306:	4b29      	ldr	r3, [pc, #164]	; (80073ac <USBD_CDC_Init+0x1ec>)
 8007308:	7819      	ldrb	r1, [r3, #0]
 800730a:	2308      	movs	r3, #8
 800730c:	2203      	movs	r2, #3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 fa6b 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <USBD_CDC_Init+0x1ec>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3324      	adds	r3, #36	; 0x24
 800732a:	2201      	movs	r2, #1
 800732c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	33b0      	adds	r3, #176	; 0xb0
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007364:	2302      	movs	r3, #2
 8007366:	e018      	b.n	800739a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7c1b      	ldrb	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007370:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 8007372:	7819      	ldrb	r1, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800737a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f002 fb22 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007384:	e008      	b.n	8007398 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <USBD_CDC_Init+0x1e8>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f002 fb18 	bl	80099c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200000db 	.word	0x200000db
 80073a8:	200000dc 	.word	0x200000dc
 80073ac:	200000dd 	.word	0x200000dd

080073b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073bc:	4b3a      	ldr	r3, [pc, #232]	; (80074a8 <USBD_CDC_DeInit+0xf8>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 fa37 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073c8:	4b37      	ldr	r3, [pc, #220]	; (80074a8 <USBD_CDC_DeInit+0xf8>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	3324      	adds	r3, #36	; 0x24
 80073de:	2200      	movs	r2, #0
 80073e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073e2:	4b32      	ldr	r3, [pc, #200]	; (80074ac <USBD_CDC_DeInit+0xfc>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f002 fa24 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073ee:	4b2f      	ldr	r3, [pc, #188]	; (80074ac <USBD_CDC_DeInit+0xfc>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007406:	2200      	movs	r2, #0
 8007408:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800740a:	4b29      	ldr	r3, [pc, #164]	; (80074b0 <USBD_CDC_DeInit+0x100>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fa10 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007416:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <USBD_CDC_DeInit+0x100>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	2200      	movs	r2, #0
 800742e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007430:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <USBD_CDC_DeInit+0x100>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	3326      	adds	r3, #38	; 0x26
 8007446:	2200      	movs	r2, #0
 8007448:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	32b0      	adds	r2, #176	; 0xb0
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01f      	beq.n	800749c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	33b0      	adds	r3, #176	; 0xb0
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32b0      	adds	r2, #176	; 0xb0
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	4618      	mov	r0, r3
 8007480:	f002 fae4 	bl	8009a4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	32b0      	adds	r2, #176	; 0xb0
 800748e:	2100      	movs	r1, #0
 8007490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200000db 	.word	0x200000db
 80074ac:	200000dc 	.word	0x200000dc
 80074b0:	200000dd 	.word	0x200000dd

080074b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	32b0      	adds	r2, #176	; 0xb0
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e0bf      	b.n	8007664 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d050      	beq.n	8007592 <USBD_CDC_Setup+0xde>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	f040 80af 	bne.w	8007654 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d03a      	beq.n	8007574 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	da1b      	bge.n	8007540 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	33b0      	adds	r3, #176	; 0xb0
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800751e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	88d2      	ldrh	r2, [r2, #6]
 8007524:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b07      	cmp	r3, #7
 800752c:	bf28      	it	cs
 800752e:	2307      	movcs	r3, #7
 8007530:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	89fa      	ldrh	r2, [r7, #14]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fd49 	bl	8008fd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800753e:	e090      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	785a      	ldrb	r2, [r3, #1]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b3f      	cmp	r3, #63	; 0x3f
 8007550:	d803      	bhi.n	800755a <USBD_CDC_Setup+0xa6>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	e000      	b.n	800755c <USBD_CDC_Setup+0xa8>
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007562:	6939      	ldr	r1, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800756a:	461a      	mov	r2, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fd5b 	bl	8009028 <USBD_CtlPrepareRx>
      break;
 8007572:	e076      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	33b0      	adds	r3, #176	; 0xb0
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	7850      	ldrb	r0, [r2, #1]
 800758a:	2200      	movs	r2, #0
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	4798      	blx	r3
      break;
 8007590:	e067      	b.n	8007662 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b0b      	cmp	r3, #11
 8007598:	d851      	bhi.n	800763e <USBD_CDC_Setup+0x18a>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <USBD_CDC_Setup+0xec>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075d1 	.word	0x080075d1
 80075a4:	0800764d 	.word	0x0800764d
 80075a8:	0800763f 	.word	0x0800763f
 80075ac:	0800763f 	.word	0x0800763f
 80075b0:	0800763f 	.word	0x0800763f
 80075b4:	0800763f 	.word	0x0800763f
 80075b8:	0800763f 	.word	0x0800763f
 80075bc:	0800763f 	.word	0x0800763f
 80075c0:	0800763f 	.word	0x0800763f
 80075c4:	0800763f 	.word	0x0800763f
 80075c8:	080075fb 	.word	0x080075fb
 80075cc:	08007625 	.word	0x08007625
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d107      	bne.n	80075ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075dc:	f107 030a 	add.w	r3, r7, #10
 80075e0:	2202      	movs	r2, #2
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fcf3 	bl	8008fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ea:	e032      	b.n	8007652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fc7d 	bl	8008eee <USBD_CtlError>
            ret = USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	75fb      	strb	r3, [r7, #23]
          break;
 80075f8:	e02b      	b.n	8007652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d107      	bne.n	8007616 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007606:	f107 030d 	add.w	r3, r7, #13
 800760a:	2201      	movs	r2, #1
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fcde 	bl	8008fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007614:	e01d      	b.n	8007652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 fc68 	bl	8008eee <USBD_CtlError>
            ret = USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	75fb      	strb	r3, [r7, #23]
          break;
 8007622:	e016      	b.n	8007652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b03      	cmp	r3, #3
 800762e:	d00f      	beq.n	8007650 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fc5b 	bl	8008eee <USBD_CtlError>
            ret = USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800763c:	e008      	b.n	8007650 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fc54 	bl	8008eee <USBD_CtlError>
          ret = USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	75fb      	strb	r3, [r7, #23]
          break;
 800764a:	e002      	b.n	8007652 <USBD_CDC_Setup+0x19e>
          break;
 800764c:	bf00      	nop
 800764e:	e008      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
          break;
 8007650:	bf00      	nop
      }
      break;
 8007652:	e006      	b.n	8007662 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fc49 	bl	8008eee <USBD_CtlError>
      ret = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	bf00      	nop
  }

  return (uint8_t)ret;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800767e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32b0      	adds	r2, #176	; 0xb0
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	e065      	b.n	8007762 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	32b0      	adds	r2, #176	; 0xb0
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	3318      	adds	r3, #24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02f      	beq.n	8007720 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	3318      	adds	r3, #24
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 010f 	and.w	r1, r3, #15
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	460b      	mov	r3, r1
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4403      	add	r3, r0
 80076e8:	331c      	adds	r3, #28
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d112      	bne.n	8007720 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	f003 020f 	and.w	r2, r3, #15
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	3318      	adds	r3, #24
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007712:	78f9      	ldrb	r1, [r7, #3]
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f002 f934 	bl	8009986 <USBD_LL_Transmit>
 800771e:	e01f      	b.n	8007760 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	33b0      	adds	r3, #176	; 0xb0
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d010      	beq.n	8007760 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	33b0      	adds	r3, #176	; 0xb0
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32b0      	adds	r2, #176	; 0xb0
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	32b0      	adds	r2, #176	; 0xb0
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e01a      	b.n	80077d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 f932 	bl	8009a0a <USBD_LL_GetRxDataSize>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	33b0      	adds	r3, #176	; 0xb0
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077cc:	4611      	mov	r1, r2
 80077ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32b0      	adds	r2, #176	; 0xb0
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e025      	b.n	8007848 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	33b0      	adds	r3, #176	; 0xb0
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01a      	beq.n	8007846 <USBD_CDC_EP0_RxReady+0x6c>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007816:	2bff      	cmp	r3, #255	; 0xff
 8007818:	d015      	beq.n	8007846 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	33b0      	adds	r3, #176	; 0xb0
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007832:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800783a:	b292      	uxth	r2, r2
 800783c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	22ff      	movs	r2, #255	; 0xff
 8007842:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007858:	2182      	movs	r1, #130	; 0x82
 800785a:	4818      	ldr	r0, [pc, #96]	; (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800785c:	f000 fd0f 	bl	800827e <USBD_GetEpDesc>
 8007860:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007862:	2101      	movs	r1, #1
 8007864:	4815      	ldr	r0, [pc, #84]	; (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007866:	f000 fd0a 	bl	800827e <USBD_GetEpDesc>
 800786a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800786c:	2181      	movs	r1, #129	; 0x81
 800786e:	4813      	ldr	r0, [pc, #76]	; (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007870:	f000 fd05 	bl	800827e <USBD_GetEpDesc>
 8007874:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2210      	movs	r2, #16
 8007880:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2200      	movs	r2, #0
 800788c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007890:	711a      	strb	r2, [r3, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a4:	711a      	strb	r2, [r3, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2243      	movs	r2, #67	; 0x43
 80078ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078b0:	4b02      	ldr	r3, [pc, #8]	; (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000098 	.word	0x20000098

080078c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078c8:	2182      	movs	r1, #130	; 0x82
 80078ca:	4818      	ldr	r0, [pc, #96]	; (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078cc:	f000 fcd7 	bl	800827e <USBD_GetEpDesc>
 80078d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078d2:	2101      	movs	r1, #1
 80078d4:	4815      	ldr	r0, [pc, #84]	; (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078d6:	f000 fcd2 	bl	800827e <USBD_GetEpDesc>
 80078da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078dc:	2181      	movs	r1, #129	; 0x81
 80078de:	4813      	ldr	r0, [pc, #76]	; (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078e0:	f000 fccd 	bl	800827e <USBD_GetEpDesc>
 80078e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2210      	movs	r2, #16
 80078f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	711a      	strb	r2, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f042 0202 	orr.w	r2, r2, #2
 8007904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	711a      	strb	r2, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f042 0202 	orr.w	r2, r2, #2
 8007918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2243      	movs	r2, #67	; 0x43
 800791e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000098 	.word	0x20000098

08007930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007938:	2182      	movs	r1, #130	; 0x82
 800793a:	4818      	ldr	r0, [pc, #96]	; (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800793c:	f000 fc9f 	bl	800827e <USBD_GetEpDesc>
 8007940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007942:	2101      	movs	r1, #1
 8007944:	4815      	ldr	r0, [pc, #84]	; (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007946:	f000 fc9a 	bl	800827e <USBD_GetEpDesc>
 800794a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800794c:	2181      	movs	r1, #129	; 0x81
 800794e:	4813      	ldr	r0, [pc, #76]	; (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007950:	f000 fc95 	bl	800827e <USBD_GetEpDesc>
 8007954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2210      	movs	r2, #16
 8007960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2200      	movs	r2, #0
 800796c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007970:	711a      	strb	r2, [r3, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d006      	beq.n	800798a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007984:	711a      	strb	r2, [r3, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2243      	movs	r2, #67	; 0x43
 800798e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000098 	.word	0x20000098

080079a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220a      	movs	r2, #10
 80079ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079ae:	4b03      	ldr	r3, [pc, #12]	; (80079bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000054 	.word	0x20000054

080079c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e009      	b.n	80079e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	33b0      	adds	r3, #176	; 0xb0
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	32b0      	adds	r2, #176	; 0xb0
 8007a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e008      	b.n	8007a2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	32b0      	adds	r2, #176	; 0xb0
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e004      	b.n	8007a66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
	...

08007a74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	; 0xb0
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	; 0xb0
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e018      	b.n	8007ad4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 ff85 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007abe:	e008      	b.n	8007ad2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ff7b 	bl	80099c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200000dc 	.word	0x200000dc

08007ae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e01f      	b.n	8007b38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 fdf5 	bl	800971c <USBD_LL_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e025      	b.n	8007ba4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	; 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32ae      	adds	r2, #174	; 0xae
 8007b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f107 020e 	add.w	r2, r7, #14
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fdfd 	bl	80097b4 <USBD_LL_Start>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f90e 	bl	8008e7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d01a      	beq.n	8007cb8 <USBD_LL_SetupStage+0x72>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d822      	bhi.n	8007ccc <USBD_LL_SetupStage+0x86>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USBD_LL_SetupStage+0x4a>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00a      	beq.n	8007ca4 <USBD_LL_SetupStage+0x5e>
 8007c8e:	e01d      	b.n	8007ccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb65 	bl	8008368 <USBD_StdDevReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e020      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbcd 	bl	800844c <USBD_StdItfReq>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb6:	e016      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fc2f 	bl	8008524 <USBD_StdEPReq>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cca:	e00c      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fdca 	bl	8009874 <USBD_LL_StallEP>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	bf00      	nop
  }

  return ret;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d16e      	bne.n	8007de6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f040 8098 	bne.w	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d913      	bls.n	8007d50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf28      	it	cs
 8007d42:	4613      	movcs	r3, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 f98a 	bl	8009062 <USBD_CtlContinueRx>
 8007d4e:	e07d      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d014      	beq.n	8007d88 <USBD_LL_DataOutStage+0x98>
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d81d      	bhi.n	8007d9e <USBD_LL_DataOutStage+0xae>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <USBD_LL_DataOutStage+0x7c>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d003      	beq.n	8007d72 <USBD_LL_DataOutStage+0x82>
 8007d6a:	e018      	b.n	8007d9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8007d70:	e018      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fa64 	bl	800824a <USBD_CoreFindIF>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75bb      	strb	r3, [r7, #22]
            break;
 8007d86:	e00d      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fa66 	bl	8008264 <USBD_CoreFindEP>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d9c:	e002      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75bb      	strb	r3, [r7, #22]
            break;
 8007da2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d119      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d113      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007db6:	7dba      	ldrb	r2, [r7, #22]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	32ae      	adds	r2, #174	; 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dc6:	7dba      	ldrb	r2, [r7, #22]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	; 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 f950 	bl	8009084 <USBD_CtlSendStatus>
 8007de4:	e032      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa37 	bl	8008264 <USBD_CoreFindEP>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	2bff      	cmp	r3, #255	; 0xff
 8007dfe:	d025      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
 8007e00:	7dbb      	ldrb	r3, [r7, #22]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d122      	bne.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d117      	bne.n	8007e42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e12:	7dba      	ldrb	r2, [r7, #22]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	32ae      	adds	r2, #174	; 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00f      	beq.n	8007e42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e22:	7dba      	ldrb	r2, [r7, #22]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	32ae      	adds	r2, #174	; 0xae
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	7afa      	ldrb	r2, [r7, #11]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	4798      	blx	r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	e000      	b.n	8007e4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d16f      	bne.n	8007f4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d15a      	bne.n	8007f30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d914      	bls.n	8007eb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 f8b2 	bl	8009006 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fd8d 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007eae:	e03f      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d11c      	bne.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d316      	bcc.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d20f      	bcs.n	8007ef6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f001 f893 	bl	8009006 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2200      	movs	r2, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 fd6a 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007ef4:	e01c      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d10f      	bne.n	8007f22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f22:	2180      	movs	r1, #128	; 0x80
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fca5 	bl	8009874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 f8bd 	bl	80090aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03a      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fe42 	bl	8007bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f48:	e032      	b.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f985 	bl	8008264 <USBD_CoreFindEP>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2bff      	cmp	r3, #255	; 0xff
 8007f62:	d025      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d11c      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f76:	7dfa      	ldrb	r2, [r7, #23]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	32ae      	adds	r2, #174	; 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d014      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f86:	7dfa      	ldrb	r2, [r7, #23]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	7afa      	ldrb	r2, [r7, #11]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	e000      	b.n	8007fb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d014      	beq.n	8008020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6852      	ldr	r2, [r2, #4]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	4611      	mov	r1, r2
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fbdf 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fbd1 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2240      	movs	r2, #64	; 0x40
 8008052:	621a      	str	r2, [r3, #32]

  return ret;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b04      	cmp	r3, #4
 8008090:	d006      	beq.n	80080a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	b2da      	uxtb	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2204      	movs	r2, #4
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d106      	bne.n	80080d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d110      	bne.n	800811c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32ae      	adds	r2, #174	; 0xae
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e01c      	b.n	8008182 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d115      	bne.n	8008180 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	; 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	; 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4611      	mov	r1, r2
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	32ae      	adds	r2, #174	; 0xae
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e01c      	b.n	80081e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d115      	bne.n	80081e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32ae      	adds	r2, #174	; 0xae
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32ae      	adds	r2, #174	; 0xae
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	4611      	mov	r1, r2
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6852      	ldr	r2, [r2, #4]
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	4611      	mov	r1, r2
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800823c:	2303      	movs	r3, #3
 800823e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d920      	bls.n	80082e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082ae:	e013      	b.n	80082d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082b0:	f107 030a 	add.w	r3, r7, #10
 80082b4:	4619      	mov	r1, r3
 80082b6:	6978      	ldr	r0, [r7, #20]
 80082b8:	f000 f81b 	bl	80082f2 <USBD_GetNextDesc>
 80082bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d108      	bne.n	80082d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	789b      	ldrb	r3, [r3, #2]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d008      	beq.n	80082e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	897b      	ldrh	r3, [r7, #10]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d8e5      	bhi.n	80082b0 <USBD_GetEpDesc+0x32>
 80082e4:	e000      	b.n	80082e8 <USBD_GetEpDesc+0x6a>
          break;
 80082e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082e8:	693b      	ldr	r3, [r7, #16]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	881a      	ldrh	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	4413      	add	r3, r2
 800830c:	b29a      	uxth	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	3301      	adds	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800834a:	8a3b      	ldrh	r3, [r7, #16]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b21a      	sxth	r2, r3
 8008350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008354:	4313      	orrs	r3, r2
 8008356:	b21b      	sxth	r3, r3
 8008358:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800835a:	89fb      	ldrh	r3, [r7, #14]
}
 800835c:	4618      	mov	r0, r3
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d005      	beq.n	800838e <USBD_StdDevReq+0x26>
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d857      	bhi.n	8008436 <USBD_StdDevReq+0xce>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <USBD_StdDevReq+0x42>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d153      	bne.n	8008436 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	32ae      	adds	r2, #174	; 0xae
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	e04a      	b.n	8008440 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	d83b      	bhi.n	800842a <USBD_StdDevReq+0xc2>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_StdDevReq+0x50>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008421 	.word	0x08008421
 80083c0:	0800842b 	.word	0x0800842b
 80083c4:	08008417 	.word	0x08008417
 80083c8:	0800842b 	.word	0x0800842b
 80083cc:	080083eb 	.word	0x080083eb
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	0800842b 	.word	0x0800842b
 80083d8:	08008403 	.word	0x08008403
 80083dc:	080083f5 	.word	0x080083f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa3c 	bl	8008860 <USBD_GetDescriptor>
          break;
 80083e8:	e024      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fba1 	bl	8008b34 <USBD_SetAddress>
          break;
 80083f2:	e01f      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fbe0 	bl	8008bbc <USBD_SetConfig>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
          break;
 8008400:	e018      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc83 	bl	8008d10 <USBD_GetConfig>
          break;
 800840a:	e013      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fcb4 	bl	8008d7c <USBD_GetStatus>
          break;
 8008414:	e00e      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fce3 	bl	8008de4 <USBD_SetFeature>
          break;
 800841e:	e009      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fd07 	bl	8008e36 <USBD_ClrFeature>
          break;
 8008428:	e004      	b.n	8008434 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fd5e 	bl	8008eee <USBD_CtlError>
          break;
 8008432:	bf00      	nop
      }
      break;
 8008434:	e004      	b.n	8008440 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fd58 	bl	8008eee <USBD_CtlError>
      break;
 800843e:	bf00      	nop
  }

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop

0800844c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d005      	beq.n	8008472 <USBD_StdItfReq+0x26>
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d852      	bhi.n	8008510 <USBD_StdItfReq+0xc4>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <USBD_StdItfReq+0x26>
 800846e:	2b20      	cmp	r3, #32
 8008470:	d14e      	bne.n	8008510 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008478:	b2db      	uxtb	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	2b02      	cmp	r3, #2
 800847e:	d840      	bhi.n	8008502 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	889b      	ldrh	r3, [r3, #4]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d836      	bhi.n	80084f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	889b      	ldrh	r3, [r3, #4]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fed9 	bl	800824a <USBD_CoreFindIF>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2bff      	cmp	r3, #255	; 0xff
 80084a0:	d01d      	beq.n	80084de <USBD_StdItfReq+0x92>
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11a      	bne.n	80084de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084a8:	7bba      	ldrb	r2, [r7, #14]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32ae      	adds	r2, #174	; 0xae
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084b8:	7bba      	ldrb	r2, [r7, #14]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084c0:	7bba      	ldrb	r2, [r7, #14]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	32ae      	adds	r2, #174	; 0xae
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d6:	e004      	b.n	80084e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084dc:	e001      	b.n	80084e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d110      	bne.n	800850c <USBD_StdItfReq+0xc0>
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fdc7 	bl	8009084 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f6:	e009      	b.n	800850c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fcf7 	bl	8008eee <USBD_CtlError>
          break;
 8008500:	e004      	b.n	800850c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fcf2 	bl	8008eee <USBD_CtlError>
          break;
 800850a:	e000      	b.n	800850e <USBD_StdItfReq+0xc2>
          break;
 800850c:	bf00      	nop
      }
      break;
 800850e:	e004      	b.n	800851a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fceb 	bl	8008eee <USBD_CtlError>
      break;
 8008518:	bf00      	nop
  }

  return ret;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d007      	beq.n	8008554 <USBD_StdEPReq+0x30>
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	f200 817f 	bhi.w	8008848 <USBD_StdEPReq+0x324>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02a      	beq.n	80085a4 <USBD_StdEPReq+0x80>
 800854e:	2b20      	cmp	r3, #32
 8008550:	f040 817a 	bne.w	8008848 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fe83 	bl	8008264 <USBD_CoreFindEP>
 800855e:	4603      	mov	r3, r0
 8008560:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	f000 8174 	beq.w	8008852 <USBD_StdEPReq+0x32e>
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 8170 	bne.w	8008852 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008572:	7b7a      	ldrb	r2, [r7, #13]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800857a:	7b7a      	ldrb	r2, [r7, #13]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	32ae      	adds	r2, #174	; 0xae
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8163 	beq.w	8008852 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800858c:	7b7a      	ldrb	r2, [r7, #13]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	; 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085a2:	e156      	b.n	8008852 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d008      	beq.n	80085be <USBD_StdEPReq+0x9a>
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	f300 8145 	bgt.w	800883c <USBD_StdEPReq+0x318>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 809b 	beq.w	80086ee <USBD_StdEPReq+0x1ca>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d03c      	beq.n	8008636 <USBD_StdEPReq+0x112>
 80085bc:	e13e      	b.n	800883c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d002      	beq.n	80085d0 <USBD_StdEPReq+0xac>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d016      	beq.n	80085fc <USBD_StdEPReq+0xd8>
 80085ce:	e02c      	b.n	800862a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <USBD_StdEPReq+0xce>
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d00a      	beq.n	80085f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f947 	bl	8009874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e6:	2180      	movs	r1, #128	; 0x80
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f943 	bl	8009874 <USBD_LL_StallEP>
 80085ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f0:	e020      	b.n	8008634 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc7a 	bl	8008eee <USBD_CtlError>
              break;
 80085fa:	e01b      	b.n	8008634 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10e      	bne.n	8008622 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <USBD_StdEPReq+0xfe>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d008      	beq.n	8008622 <USBD_StdEPReq+0xfe>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	88db      	ldrh	r3, [r3, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f929 	bl	8009874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fd2e 	bl	8009084 <USBD_CtlSendStatus>

              break;
 8008628:	e004      	b.n	8008634 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc5e 	bl	8008eee <USBD_CtlError>
              break;
 8008632:	bf00      	nop
          }
          break;
 8008634:	e107      	b.n	8008846 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d002      	beq.n	8008648 <USBD_StdEPReq+0x124>
 8008642:	2b03      	cmp	r3, #3
 8008644:	d016      	beq.n	8008674 <USBD_StdEPReq+0x150>
 8008646:	e04b      	b.n	80086e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <USBD_StdEPReq+0x146>
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b80      	cmp	r3, #128	; 0x80
 8008652:	d00a      	beq.n	800866a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f90b 	bl	8009874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f907 	bl	8009874 <USBD_LL_StallEP>
 8008666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008668:	e040      	b.n	80086ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc3e 	bl	8008eee <USBD_CtlError>
              break;
 8008672:	e03b      	b.n	80086ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d136      	bne.n	80086ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 f911 	bl	80098b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fcf7 	bl	8009084 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fde2 	bl	8008264 <USBD_CoreFindEP>
 80086a0:	4603      	mov	r3, r0
 80086a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a4:	7b7b      	ldrb	r3, [r7, #13]
 80086a6:	2bff      	cmp	r3, #255	; 0xff
 80086a8:	d01f      	beq.n	80086ea <USBD_StdEPReq+0x1c6>
 80086aa:	7b7b      	ldrb	r3, [r7, #13]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11c      	bne.n	80086ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086b0:	7b7a      	ldrb	r2, [r7, #13]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086b8:	7b7a      	ldrb	r2, [r7, #13]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	32ae      	adds	r2, #174	; 0xae
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086de:	e004      	b.n	80086ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fc03 	bl	8008eee <USBD_CtlError>
              break;
 80086e8:	e000      	b.n	80086ec <USBD_StdEPReq+0x1c8>
              break;
 80086ea:	bf00      	nop
          }
          break;
 80086ec:	e0ab      	b.n	8008846 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d002      	beq.n	8008700 <USBD_StdEPReq+0x1dc>
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d032      	beq.n	8008764 <USBD_StdEPReq+0x240>
 80086fe:	e097      	b.n	8008830 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <USBD_StdEPReq+0x1f2>
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d004      	beq.n	8008716 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fbed 	bl	8008eee <USBD_CtlError>
                break;
 8008714:	e091      	b.n	800883a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	da0b      	bge.n	8008736 <USBD_StdEPReq+0x212>
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	3310      	adds	r3, #16
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	3304      	adds	r3, #4
 8008734:	e00b      	b.n	800874e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	3304      	adds	r3, #4
 800874e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2202      	movs	r2, #2
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc37 	bl	8008fd0 <USBD_CtlSendData>
              break;
 8008762:	e06a      	b.n	800883a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da11      	bge.n	8008790 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3324      	adds	r3, #36	; 0x24
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d117      	bne.n	80087b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fbb0 	bl	8008eee <USBD_CtlError>
                  break;
 800878e:	e054      	b.n	800883a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb9d 	bl	8008eee <USBD_CtlError>
                  break;
 80087b4:	e041      	b.n	800883a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da0b      	bge.n	80087d6 <USBD_StdEPReq+0x2b2>
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	3310      	adds	r3, #16
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	3304      	adds	r3, #4
 80087d4:	e00b      	b.n	80087ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4413      	add	r3, r2
 80087ec:	3304      	adds	r3, #4
 80087ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <USBD_StdEPReq+0x2d8>
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d103      	bne.n	8008804 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e00e      	b.n	8008822 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f871 	bl	80098f0 <USBD_LL_IsStallEP>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e002      	b.n	8008822 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2202      	movs	r2, #2
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fbd1 	bl	8008fd0 <USBD_CtlSendData>
              break;
 800882e:	e004      	b.n	800883a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fb5b 	bl	8008eee <USBD_CtlError>
              break;
 8008838:	bf00      	nop
          }
          break;
 800883a:	e004      	b.n	8008846 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fb55 	bl	8008eee <USBD_CtlError>
          break;
 8008844:	bf00      	nop
      }
      break;
 8008846:	e005      	b.n	8008854 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fb4f 	bl	8008eee <USBD_CtlError>
      break;
 8008850:	e000      	b.n	8008854 <USBD_StdEPReq+0x330>
      break;
 8008852:	bf00      	nop
  }

  return ret;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	2b06      	cmp	r3, #6
 8008882:	f200 8128 	bhi.w	8008ad6 <USBD_GetDescriptor+0x276>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_GetDescriptor+0x2c>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088c1 	.word	0x080088c1
 8008894:	08008901 	.word	0x08008901
 8008898:	08008ad7 	.word	0x08008ad7
 800889c:	08008ad7 	.word	0x08008ad7
 80088a0:	08008a77 	.word	0x08008a77
 80088a4:	08008aa3 	.word	0x08008aa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
      break;
 80088be:	e112      	b.n	8008ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7c1b      	ldrb	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10d      	bne.n	80088e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d0:	f107 0208 	add.w	r2, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	2202      	movs	r2, #2
 80088e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088e2:	e100      	b.n	8008ae6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f107 0208 	add.w	r2, r7, #8
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	2202      	movs	r2, #2
 80088fc:	701a      	strb	r2, [r3, #0]
      break;
 80088fe:	e0f2      	b.n	8008ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	885b      	ldrh	r3, [r3, #2]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b05      	cmp	r3, #5
 8008908:	f200 80ac 	bhi.w	8008a64 <USBD_GetDescriptor+0x204>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USBD_GetDescriptor+0xb4>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008961 	.word	0x08008961
 800891c:	08008995 	.word	0x08008995
 8008920:	080089c9 	.word	0x080089c9
 8008924:	080089fd 	.word	0x080089fd
 8008928:	08008a31 	.word	0x08008a31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	f107 0108 	add.w	r1, r7, #8
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894e:	e091      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 facb 	bl	8008eee <USBD_CtlError>
            err++;
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	3301      	adds	r3, #1
 800895c:	72fb      	strb	r3, [r7, #11]
          break;
 800895e:	e089      	b.n	8008a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	7c12      	ldrb	r2, [r2, #16]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008982:	e077      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fab1 	bl	8008eee <USBD_CtlError>
            err++;
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	3301      	adds	r3, #1
 8008990:	72fb      	strb	r3, [r7, #11]
          break;
 8008992:	e06f      	b.n	8008a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	7c12      	ldrb	r2, [r2, #16]
 80089ac:	f107 0108 	add.w	r1, r7, #8
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b6:	e05d      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa97 	bl	8008eee <USBD_CtlError>
            err++;
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	3301      	adds	r3, #1
 80089c4:	72fb      	strb	r3, [r7, #11]
          break;
 80089c6:	e055      	b.n	8008a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	7c12      	ldrb	r2, [r2, #16]
 80089e0:	f107 0108 	add.w	r1, r7, #8
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ea:	e043      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa7d 	bl	8008eee <USBD_CtlError>
            err++;
 80089f4:	7afb      	ldrb	r3, [r7, #11]
 80089f6:	3301      	adds	r3, #1
 80089f8:	72fb      	strb	r3, [r7, #11]
          break;
 80089fa:	e03b      	b.n	8008a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	7c12      	ldrb	r2, [r2, #16]
 8008a14:	f107 0108 	add.w	r1, r7, #8
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1e:	e029      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa63 	bl	8008eee <USBD_CtlError>
            err++;
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2e:	e021      	b.n	8008a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
 8008a48:	f107 0108 	add.w	r1, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a52:	e00f      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa49 	bl	8008eee <USBD_CtlError>
            err++;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	72fb      	strb	r3, [r7, #11]
          break;
 8008a62:	e007      	b.n	8008a74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa41 	bl	8008eee <USBD_CtlError>
          err++;
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a72:	bf00      	nop
      }
      break;
 8008a74:	e037      	b.n	8008ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7c1b      	ldrb	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a86:	f107 0208 	add.w	r2, r7, #8
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4798      	blx	r3
 8008a8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a90:	e029      	b.n	8008ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa2a 	bl	8008eee <USBD_CtlError>
        err++;
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa0:	e021      	b.n	8008ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7c1b      	ldrb	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10d      	bne.n	8008ac6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	f107 0208 	add.w	r2, r7, #8
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4798      	blx	r3
 8008aba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac4:	e00f      	b.n	8008ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fa10 	bl	8008eee <USBD_CtlError>
        err++;
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad4:	e007      	b.n	8008ae6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa08 	bl	8008eee <USBD_CtlError>
      err++;
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae4:	bf00      	nop
  }

  if (err != 0U)
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d11e      	bne.n	8008b2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	88db      	ldrh	r3, [r3, #6]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d016      	beq.n	8008b22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008af4:	893b      	ldrh	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00e      	beq.n	8008b18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88da      	ldrh	r2, [r3, #6]
 8008afe:	893b      	ldrh	r3, [r7, #8]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bf28      	it	cs
 8008b04:	4613      	movcs	r3, r2
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b0a:	893b      	ldrh	r3, [r7, #8]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa5d 	bl	8008fd0 <USBD_CtlSendData>
 8008b16:	e009      	b.n	8008b2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9e7 	bl	8008eee <USBD_CtlError>
 8008b20:	e004      	b.n	8008b2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 faae 	bl	8009084 <USBD_CtlSendStatus>
 8008b28:	e000      	b.n	8008b2c <USBD_GetDescriptor+0x2cc>
    return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	889b      	ldrh	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d131      	bne.n	8008baa <USBD_SetAddress+0x76>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d12d      	bne.n	8008baa <USBD_SetAddress+0x76>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	2b7f      	cmp	r3, #127	; 0x7f
 8008b54:	d829      	bhi.n	8008baa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d104      	bne.n	8008b78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9bc 	bl	8008eee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b76:	e01d      	b.n	8008bb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	7bfa      	ldrb	r2, [r7, #15]
 8008b7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fedf 	bl	8009948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa7a 	bl	8009084 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d004      	beq.n	8008ba0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9e:	e009      	b.n	8008bb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba8:	e004      	b.n	8008bb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f99e 	bl	8008eee <USBD_CtlError>
  }
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	885b      	ldrh	r3, [r3, #2]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	4b4e      	ldr	r3, [pc, #312]	; (8008d0c <USBD_SetConfig+0x150>)
 8008bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bd4:	4b4d      	ldr	r3, [pc, #308]	; (8008d0c <USBD_SetConfig+0x150>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d905      	bls.n	8008be8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f985 	bl	8008eee <USBD_CtlError>
    return USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e08c      	b.n	8008d02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d002      	beq.n	8008bfa <USBD_SetConfig+0x3e>
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d029      	beq.n	8008c4c <USBD_SetConfig+0x90>
 8008bf8:	e075      	b.n	8008ce6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bfa:	4b44      	ldr	r3, [pc, #272]	; (8008d0c <USBD_SetConfig+0x150>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d020      	beq.n	8008c44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c02:	4b42      	ldr	r3, [pc, #264]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c0c:	4b3f      	ldr	r3, [pc, #252]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe ffe1 	bl	8007bda <USBD_SetClassConfig>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f962 	bl	8008eee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c32:	e065      	b.n	8008d00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa25 	bl	8009084 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c42:	e05d      	b.n	8008d00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa1d 	bl	8009084 <USBD_CtlSendStatus>
      break;
 8008c4a:	e059      	b.n	8008d00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c4c:	4b2f      	ldr	r3, [pc, #188]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d112      	bne.n	8008c7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c5c:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c66:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fe ffd0 	bl	8007c12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa06 	bl	8009084 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c78:	e042      	b.n	8008d00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d02a      	beq.n	8008cde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe ffbe 	bl	8007c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c96:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <USBD_SetConfig+0x150>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <USBD_SetConfig+0x150>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fe ff97 	bl	8007bda <USBD_SetClassConfig>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00f      	beq.n	8008cd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f918 	bl	8008eee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fe ffa3 	bl	8007c12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cd4:	e014      	b.n	8008d00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9d4 	bl	8009084 <USBD_CtlSendStatus>
      break;
 8008cdc:	e010      	b.n	8008d00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9d0 	bl	8009084 <USBD_CtlSendStatus>
      break;
 8008ce4:	e00c      	b.n	8008d00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f900 	bl	8008eee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cee:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <USBD_SetConfig+0x150>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe ff8c 	bl	8007c12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfe:	bf00      	nop
  }

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	200003e8 	.word	0x200003e8

08008d10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	88db      	ldrh	r3, [r3, #6]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d004      	beq.n	8008d2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f8e2 	bl	8008eee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d2a:	e023      	b.n	8008d74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	dc02      	bgt.n	8008d3e <USBD_GetConfig+0x2e>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dc03      	bgt.n	8008d44 <USBD_GetConfig+0x34>
 8008d3c:	e015      	b.n	8008d6a <USBD_GetConfig+0x5a>
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d00b      	beq.n	8008d5a <USBD_GetConfig+0x4a>
 8008d42:	e012      	b.n	8008d6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f93c 	bl	8008fd0 <USBD_CtlSendData>
        break;
 8008d58:	e00c      	b.n	8008d74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f934 	bl	8008fd0 <USBD_CtlSendData>
        break;
 8008d68:	e004      	b.n	8008d74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8be 	bl	8008eee <USBD_CtlError>
        break;
 8008d72:	bf00      	nop
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d81e      	bhi.n	8008dd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	88db      	ldrh	r3, [r3, #6]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d004      	beq.n	8008da6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f8a5 	bl	8008eee <USBD_CtlError>
        break;
 8008da4:	e01a      	b.n	8008ddc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f043 0202 	orr.w	r2, r3, #2
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	330c      	adds	r3, #12
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f900 	bl	8008fd0 <USBD_CtlSendData>
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f88a 	bl	8008eee <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d107      	bne.n	8008e06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f940 	bl	8009084 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e04:	e013      	b.n	8008e2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d10b      	bne.n	8008e26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	889b      	ldrh	r3, [r3, #4]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f930 	bl	8009084 <USBD_CtlSendStatus>
}
 8008e24:	e003      	b.n	8008e2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f860 	bl	8008eee <USBD_CtlError>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d80b      	bhi.n	8008e66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	885b      	ldrh	r3, [r3, #2]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d10c      	bne.n	8008e70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f910 	bl	8009084 <USBD_CtlSendStatus>
      }
      break;
 8008e64:	e004      	b.n	8008e70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f840 	bl	8008eee <USBD_CtlError>
      break;
 8008e6e:	e000      	b.n	8008e72 <USBD_ClrFeature+0x3c>
      break;
 8008e70:	bf00      	nop
  }
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff fa41 	bl	800832c <SWAPBYTE>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	461a      	mov	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff fa34 	bl	800832c <SWAPBYTE>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fa27 	bl	800832c <SWAPBYTE>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	80da      	strh	r2, [r3, #6]
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef8:	2180      	movs	r1, #128	; 0x80
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fcba 	bl	8009874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fcb6 	bl	8009874 <USBD_LL_StallEP>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d036      	beq.n	8008f94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f2a:	6938      	ldr	r0, [r7, #16]
 8008f2c:	f000 f836 	bl	8008f9c <USBD_GetLen>
 8008f30:	4603      	mov	r3, r0
 8008f32:	3301      	adds	r3, #1
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4413      	add	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	2203      	movs	r2, #3
 8008f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f60:	e013      	b.n	8008f8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	4413      	add	r3, r2
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3301      	adds	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]
    idx++;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	3301      	adds	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	4413      	add	r3, r2
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	3301      	adds	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e7      	bne.n	8008f62 <USBD_GetString+0x52>
 8008f92:	e000      	b.n	8008f96 <USBD_GetString+0x86>
    return;
 8008f94:	bf00      	nop
  }
}
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fac:	e005      	b.n	8008fba <USBD_GetLen+0x1e>
  {
    len++;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f5      	bne.n	8008fae <USBD_GetLen+0x12>
  }

  return len;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fcc5 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fcb4 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2203      	movs	r2, #3
 8009038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	2100      	movs	r1, #0
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fcb8 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	2100      	movs	r1, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fca7 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2204      	movs	r2, #4
 8009090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009094:	2300      	movs	r3, #0
 8009096:	2200      	movs	r2, #0
 8009098:	2100      	movs	r1, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fc73 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2205      	movs	r2, #5
 80090b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ba:	2300      	movs	r3, #0
 80090bc:	2200      	movs	r2, #0
 80090be:	2100      	movs	r1, #0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fc81 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090d4:	2200      	movs	r2, #0
 80090d6:	4912      	ldr	r1, [pc, #72]	; (8009120 <MX_USB_DEVICE_Init+0x50>)
 80090d8:	4812      	ldr	r0, [pc, #72]	; (8009124 <MX_USB_DEVICE_Init+0x54>)
 80090da:	f7fe fd01 	bl	8007ae0 <USBD_Init>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090e4:	f7f7 fd48 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090e8:	490f      	ldr	r1, [pc, #60]	; (8009128 <MX_USB_DEVICE_Init+0x58>)
 80090ea:	480e      	ldr	r0, [pc, #56]	; (8009124 <MX_USB_DEVICE_Init+0x54>)
 80090ec:	f7fe fd28 	bl	8007b40 <USBD_RegisterClass>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090f6:	f7f7 fd3f 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090fa:	490c      	ldr	r1, [pc, #48]	; (800912c <MX_USB_DEVICE_Init+0x5c>)
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <MX_USB_DEVICE_Init+0x54>)
 80090fe:	f7fe fc5f 	bl	80079c0 <USBD_CDC_RegisterInterface>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009108:	f7f7 fd36 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800910c:	4805      	ldr	r0, [pc, #20]	; (8009124 <MX_USB_DEVICE_Init+0x54>)
 800910e:	f7fe fd4d 	bl	8007bac <USBD_Start>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009118:	f7f7 fd2e 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800911c:	bf00      	nop
 800911e:	bd80      	pop	{r7, pc}
 8009120:	200000f4 	.word	0x200000f4
 8009124:	200003ec 	.word	0x200003ec
 8009128:	20000060 	.word	0x20000060
 800912c:	200000e0 	.word	0x200000e0

08009130 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009134:	2200      	movs	r2, #0
 8009136:	4905      	ldr	r1, [pc, #20]	; (800914c <CDC_Init_FS+0x1c>)
 8009138:	4805      	ldr	r0, [pc, #20]	; (8009150 <CDC_Init_FS+0x20>)
 800913a:	f7fe fc5b 	bl	80079f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800913e:	4905      	ldr	r1, [pc, #20]	; (8009154 <CDC_Init_FS+0x24>)
 8009140:	4803      	ldr	r0, [pc, #12]	; (8009150 <CDC_Init_FS+0x20>)
 8009142:	f7fe fc79 	bl	8007a38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009146:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20000ec8 	.word	0x20000ec8
 8009150:	200003ec 	.word	0x200003ec
 8009154:	200006c8 	.word	0x200006c8

08009158 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800915c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800915e:	4618      	mov	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
 8009174:	4613      	mov	r3, r2
 8009176:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	2b23      	cmp	r3, #35	; 0x23
 800917c:	d84a      	bhi.n	8009214 <CDC_Control_FS+0xac>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <CDC_Control_FS+0x1c>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	08009215 	.word	0x08009215
 8009188:	08009215 	.word	0x08009215
 800918c:	08009215 	.word	0x08009215
 8009190:	08009215 	.word	0x08009215
 8009194:	08009215 	.word	0x08009215
 8009198:	08009215 	.word	0x08009215
 800919c:	08009215 	.word	0x08009215
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009215 	.word	0x08009215
 80091a8:	08009215 	.word	0x08009215
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009215 	.word	0x08009215
 80091b4:	08009215 	.word	0x08009215
 80091b8:	08009215 	.word	0x08009215
 80091bc:	08009215 	.word	0x08009215
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009215 	.word	0x08009215
 80091c8:	08009215 	.word	0x08009215
 80091cc:	08009215 	.word	0x08009215
 80091d0:	08009215 	.word	0x08009215
 80091d4:	08009215 	.word	0x08009215
 80091d8:	08009215 	.word	0x08009215
 80091dc:	08009215 	.word	0x08009215
 80091e0:	08009215 	.word	0x08009215
 80091e4:	08009215 	.word	0x08009215
 80091e8:	08009215 	.word	0x08009215
 80091ec:	08009215 	.word	0x08009215
 80091f0:	08009215 	.word	0x08009215
 80091f4:	08009215 	.word	0x08009215
 80091f8:	08009215 	.word	0x08009215
 80091fc:	08009215 	.word	0x08009215
 8009200:	08009215 	.word	0x08009215
 8009204:	08009215 	.word	0x08009215
 8009208:	08009215 	.word	0x08009215
 800920c:	08009215 	.word	0x08009215
 8009210:	08009215 	.word	0x08009215
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009214:	bf00      	nop
  }

  return (USBD_OK);
 8009216:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4805      	ldr	r0, [pc, #20]	; (8009248 <CDC_Receive_FS+0x24>)
 8009232:	f7fe fc01 	bl	8007a38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009236:	4804      	ldr	r0, [pc, #16]	; (8009248 <CDC_Receive_FS+0x24>)
 8009238:	f7fe fc1c 	bl	8007a74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800923c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	200003ec 	.word	0x200003ec

0800924c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800925e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2212      	movs	r2, #18
 8009280:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009282:	4b03      	ldr	r3, [pc, #12]	; (8009290 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	20000110 	.word	0x20000110

08009294 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2204      	movs	r2, #4
 80092a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092a6:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000124 	.word	0x20000124

080092b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4907      	ldr	r1, [pc, #28]	; (80092ec <USBD_FS_ProductStrDescriptor+0x34>)
 80092ce:	4808      	ldr	r0, [pc, #32]	; (80092f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092d0:	f7ff fe1e 	bl	8008f10 <USBD_GetString>
 80092d4:	e004      	b.n	80092e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4904      	ldr	r1, [pc, #16]	; (80092ec <USBD_FS_ProductStrDescriptor+0x34>)
 80092da:	4805      	ldr	r0, [pc, #20]	; (80092f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092dc:	f7ff fe18 	bl	8008f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200016c8 	.word	0x200016c8
 80092f0:	0800a550 	.word	0x0800a550

080092f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	4904      	ldr	r1, [pc, #16]	; (8009314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009304:	4804      	ldr	r0, [pc, #16]	; (8009318 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009306:	f7ff fe03 	bl	8008f10 <USBD_GetString>
  return USBD_StrDesc;
 800930a:	4b02      	ldr	r3, [pc, #8]	; (8009314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	200016c8 	.word	0x200016c8
 8009318:	0800a568 	.word	0x0800a568

0800931c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	221a      	movs	r2, #26
 800932c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800932e:	f000 f843 	bl	80093b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009332:	4b02      	ldr	r3, [pc, #8]	; (800933c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000128 	.word	0x20000128

08009340 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4907      	ldr	r1, [pc, #28]	; (8009374 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009356:	4808      	ldr	r0, [pc, #32]	; (8009378 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009358:	f7ff fdda 	bl	8008f10 <USBD_GetString>
 800935c:	e004      	b.n	8009368 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4904      	ldr	r1, [pc, #16]	; (8009374 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009362:	4805      	ldr	r0, [pc, #20]	; (8009378 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009364:	f7ff fdd4 	bl	8008f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200016c8 	.word	0x200016c8
 8009378:	0800a57c 	.word	0x0800a57c

0800937c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	4907      	ldr	r1, [pc, #28]	; (80093b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009392:	4808      	ldr	r0, [pc, #32]	; (80093b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009394:	f7ff fdbc 	bl	8008f10 <USBD_GetString>
 8009398:	e004      	b.n	80093a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4904      	ldr	r1, [pc, #16]	; (80093b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800939e:	4805      	ldr	r0, [pc, #20]	; (80093b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093a0:	f7ff fdb6 	bl	8008f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200016c8 	.word	0x200016c8
 80093b4:	0800a588 	.word	0x0800a588

080093b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <Get_SerialNum+0x44>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c4:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <Get_SerialNum+0x48>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ca:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <Get_SerialNum+0x4c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d009      	beq.n	80093f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093de:	2208      	movs	r2, #8
 80093e0:	4909      	ldr	r1, [pc, #36]	; (8009408 <Get_SerialNum+0x50>)
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f814 	bl	8009410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093e8:	2204      	movs	r2, #4
 80093ea:	4908      	ldr	r1, [pc, #32]	; (800940c <Get_SerialNum+0x54>)
 80093ec:	68b8      	ldr	r0, [r7, #8]
 80093ee:	f000 f80f 	bl	8009410 <IntToUnicode>
  }
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	1fff7a10 	.word	0x1fff7a10
 8009400:	1fff7a14 	.word	0x1fff7a14
 8009404:	1fff7a18 	.word	0x1fff7a18
 8009408:	2000012a 	.word	0x2000012a
 800940c:	2000013a 	.word	0x2000013a

08009410 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]
 8009426:	e027      	b.n	8009478 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	0f1b      	lsrs	r3, r3, #28
 800942c:	2b09      	cmp	r3, #9
 800942e:	d80b      	bhi.n	8009448 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	0f1b      	lsrs	r3, r3, #28
 8009434:	b2da      	uxtb	r2, r3
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	4619      	mov	r1, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	440b      	add	r3, r1
 8009440:	3230      	adds	r2, #48	; 0x30
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e00a      	b.n	800945e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	0f1b      	lsrs	r3, r3, #28
 800944c:	b2da      	uxtb	r2, r3
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	4619      	mov	r1, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	440b      	add	r3, r1
 8009458:	3237      	adds	r2, #55	; 0x37
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	3301      	adds	r3, #1
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4413      	add	r3, r2
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	3301      	adds	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
 8009478:	7dfa      	ldrb	r2, [r7, #23]
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	429a      	cmp	r2, r3
 800947e:	d3d3      	bcc.n	8009428 <IntToUnicode+0x18>
  }
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	609a      	str	r2, [r3, #8]
 80094a4:	60da      	str	r2, [r3, #12]
 80094a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b0:	d13a      	bne.n	8009528 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b2:	2300      	movs	r3, #0
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	4b1e      	ldr	r3, [pc, #120]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	4a1d      	ldr	r2, [pc, #116]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 80094bc:	f043 0301 	orr.w	r3, r3, #1
 80094c0:	6313      	str	r3, [r2, #48]	; 0x30
 80094c2:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	613b      	str	r3, [r7, #16]
 80094cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d4:	2302      	movs	r3, #2
 80094d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094dc:	2303      	movs	r3, #3
 80094de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094e0:	230a      	movs	r3, #10
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	4619      	mov	r1, r3
 80094ea:	4812      	ldr	r0, [pc, #72]	; (8009534 <HAL_PCD_MspInit+0xa4>)
 80094ec:	f7f7 ffb6 	bl	800145c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094f0:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	4a0e      	ldr	r2, [pc, #56]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 80094f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fa:	6353      	str	r3, [r2, #52]	; 0x34
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 8009506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800950a:	6453      	str	r3, [r2, #68]	; 0x44
 800950c:	4b08      	ldr	r3, [pc, #32]	; (8009530 <HAL_PCD_MspInit+0xa0>)
 800950e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	2043      	movs	r0, #67	; 0x43
 800951e:	f7f7 fed4 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009522:	2043      	movs	r0, #67	; 0x43
 8009524:	f7f7 feed 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009528:	bf00      	nop
 800952a:	3728      	adds	r7, #40	; 0x28
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40023800 	.word	0x40023800
 8009534:	40020000 	.word	0x40020000

08009538 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7fe fb79 	bl	8007c46 <USBD_LL_SetupStage>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800956e:	78fa      	ldrb	r2, [r7, #3]
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	4619      	mov	r1, r3
 8009586:	f7fe fbb3 	bl	8007cf0 <USBD_LL_DataOutStage>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	3320      	adds	r3, #32
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	4619      	mov	r1, r3
 80095ba:	f7fe fc4c 	bl	8007e56 <USBD_LL_DataInStage>
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fd86 	bl	80080e6 <USBD_LL_SOF>
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095ea:	2301      	movs	r3, #1
 80095ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	79db      	ldrb	r3, [r3, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
 80095fa:	e008      	b.n	800960e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	79db      	ldrb	r3, [r3, #7]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d102      	bne.n	800960a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
 8009608:	e001      	b.n	800960e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800960a:	f7f7 fab5 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009614:	7bfa      	ldrb	r2, [r7, #15]
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fd20 	bl	800805e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe fcc8 	bl	8007fba <USBD_LL_Reset>
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fd1b 	bl	800807e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7adb      	ldrb	r3, [r3, #11]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <HAL_PCD_SuspendCallback+0x48>)
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	4a03      	ldr	r2, [pc, #12]	; (800967c <HAL_PCD_SuspendCallback+0x48>)
 800966e:	f043 0306 	orr.w	r3, r3, #6
 8009672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fd11 	bl	80080b6 <USBD_LL_Resume>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fd69 	bl	800818a <USBD_LL_IsoOUTIncomplete>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fd25 	bl	8008126 <USBD_LL_IsoINIncomplete>
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fd7b 	bl	80081ee <USBD_LL_DevConnected>
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fd78 	bl	8008204 <USBD_LL_DevDisconnected>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d13c      	bne.n	80097a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800972c:	4a20      	ldr	r2, [pc, #128]	; (80097b0 <USBD_LL_Init+0x94>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <USBD_LL_Init+0x94>)
 8009738:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800973c:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <USBD_LL_Init+0x94>)
 800973e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <USBD_LL_Init+0x94>)
 8009746:	2204      	movs	r2, #4
 8009748:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800974a:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <USBD_LL_Init+0x94>)
 800974c:	2202      	movs	r2, #2
 800974e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <USBD_LL_Init+0x94>)
 8009752:	2200      	movs	r2, #0
 8009754:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009756:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <USBD_LL_Init+0x94>)
 8009758:	2202      	movs	r2, #2
 800975a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800975c:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <USBD_LL_Init+0x94>)
 800975e:	2200      	movs	r2, #0
 8009760:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009762:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <USBD_LL_Init+0x94>)
 8009764:	2200      	movs	r2, #0
 8009766:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <USBD_LL_Init+0x94>)
 800976a:	2200      	movs	r2, #0
 800976c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800976e:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <USBD_LL_Init+0x94>)
 8009770:	2200      	movs	r2, #0
 8009772:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009774:	4b0e      	ldr	r3, [pc, #56]	; (80097b0 <USBD_LL_Init+0x94>)
 8009776:	2200      	movs	r2, #0
 8009778:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800977a:	480d      	ldr	r0, [pc, #52]	; (80097b0 <USBD_LL_Init+0x94>)
 800977c:	f7f8 f83b 	bl	80017f6 <HAL_PCD_Init>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009786:	f7f7 f9f7 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	4808      	ldr	r0, [pc, #32]	; (80097b0 <USBD_LL_Init+0x94>)
 800978e:	f7f9 fa66 	bl	8002c5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009792:	2240      	movs	r2, #64	; 0x40
 8009794:	2100      	movs	r1, #0
 8009796:	4806      	ldr	r0, [pc, #24]	; (80097b0 <USBD_LL_Init+0x94>)
 8009798:	f7f9 fa1a 	bl	8002bd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800979c:	2280      	movs	r2, #128	; 0x80
 800979e:	2101      	movs	r1, #1
 80097a0:	4803      	ldr	r0, [pc, #12]	; (80097b0 <USBD_LL_Init+0x94>)
 80097a2:	f7f9 fa15 	bl	8002bd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	200018c8 	.word	0x200018c8

080097b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f8 f922 	bl	8001a14 <HAL_PCD_Start>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f942 	bl	8009a60 <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70bb      	strb	r3, [r7, #2]
 8009800:	4613      	mov	r3, r2
 8009802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009812:	78bb      	ldrb	r3, [r7, #2]
 8009814:	883a      	ldrh	r2, [r7, #0]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	f7f8 fdf6 	bl	8002408 <HAL_PCD_EP_Open>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f91c 	bl	8009a60 <USBD_Get_USB_Status>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7f8 fe3f 	bl	80024d8 <HAL_PCD_EP_Close>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8fd 	bl	8009a60 <USBD_Get_USB_Status>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986a:	7bbb      	ldrb	r3, [r7, #14]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988e:	78fa      	ldrb	r2, [r7, #3]
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7f8 fef7 	bl	8002686 <HAL_PCD_EP_SetStall>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f8de 	bl	8009a60 <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 ff3b 	bl	800274c <HAL_PCD_EP_ClrStall>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f8bf 	bl	8009a60 <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0b      	bge.n	8009924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	4613      	mov	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	3316      	adds	r3, #22
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	e00b      	b.n	800993c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	4613      	mov	r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	f203 2356 	addw	r3, r3, #598	; 0x256
 800993a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7f8 fd2a 	bl	80023c0 <HAL_PCD_SetAddress>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f874 	bl	8009a60 <USBD_Get_USB_Status>
 8009978:	4603      	mov	r3, r0
 800997a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997c:	7bbb      	ldrb	r3, [r7, #14]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	460b      	mov	r3, r1
 8009994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099a4:	7af9      	ldrb	r1, [r7, #11]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	f7f8 fe32 	bl	8002612 <HAL_PCD_EP_Transmit>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f853 	bl	8009a60 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099be:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	460b      	mov	r3, r1
 80099d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099e6:	7af9      	ldrb	r1, [r7, #11]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f7f8 fdbe 	bl	800256c <HAL_PCD_EP_Receive>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f832 	bl	8009a60 <USBD_Get_USB_Status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7f8 fdde 	bl	80025e2 <HAL_PCD_EP_GetRxCount>
 8009a26:	4603      	mov	r3, r0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a38:	4b03      	ldr	r3, [pc, #12]	; (8009a48 <USBD_static_malloc+0x18>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	20001dac 	.word	0x20001dac

08009a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d817      	bhi.n	8009aa4 <USBD_Get_USB_Status+0x44>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBD_Get_USB_Status+0x1c>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009a93 	.word	0x08009a93
 8009a84:	08009a99 	.word	0x08009a99
 8009a88:	08009a9f 	.word	0x08009a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	e00b      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
    break;
 8009a96:	e008      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9c:	e005      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa2:	e002      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa8:	bf00      	nop
  }
  return usb_status;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <_vsiprintf_r>:
 8009ab8:	b500      	push	{lr}
 8009aba:	b09b      	sub	sp, #108	; 0x6c
 8009abc:	9100      	str	r1, [sp, #0]
 8009abe:	9104      	str	r1, [sp, #16]
 8009ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ac4:	9105      	str	r1, [sp, #20]
 8009ac6:	9102      	str	r1, [sp, #8]
 8009ac8:	4905      	ldr	r1, [pc, #20]	; (8009ae0 <_vsiprintf_r+0x28>)
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	4669      	mov	r1, sp
 8009ace:	f000 f999 	bl	8009e04 <_svfiprintf_r>
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	b01b      	add	sp, #108	; 0x6c
 8009ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ade:	bf00      	nop
 8009ae0:	ffff0208 	.word	0xffff0208

08009ae4 <vsiprintf>:
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	4601      	mov	r1, r0
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <vsiprintf+0x10>)
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f7ff bfe3 	b.w	8009ab8 <_vsiprintf_r>
 8009af2:	bf00      	nop
 8009af4:	20000190 	.word	0x20000190

08009af8 <memset>:
 8009af8:	4402      	add	r2, r0
 8009afa:	4603      	mov	r3, r0
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d100      	bne.n	8009b02 <memset+0xa>
 8009b00:	4770      	bx	lr
 8009b02:	f803 1b01 	strb.w	r1, [r3], #1
 8009b06:	e7f9      	b.n	8009afc <memset+0x4>

08009b08 <__errno>:
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <__errno+0x8>)
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	20000190 	.word	0x20000190

08009b14 <__libc_init_array>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4d0d      	ldr	r5, [pc, #52]	; (8009b4c <__libc_init_array+0x38>)
 8009b18:	4c0d      	ldr	r4, [pc, #52]	; (8009b50 <__libc_init_array+0x3c>)
 8009b1a:	1b64      	subs	r4, r4, r5
 8009b1c:	10a4      	asrs	r4, r4, #2
 8009b1e:	2600      	movs	r6, #0
 8009b20:	42a6      	cmp	r6, r4
 8009b22:	d109      	bne.n	8009b38 <__libc_init_array+0x24>
 8009b24:	4d0b      	ldr	r5, [pc, #44]	; (8009b54 <__libc_init_array+0x40>)
 8009b26:	4c0c      	ldr	r4, [pc, #48]	; (8009b58 <__libc_init_array+0x44>)
 8009b28:	f000 fc6a 	bl	800a400 <_init>
 8009b2c:	1b64      	subs	r4, r4, r5
 8009b2e:	10a4      	asrs	r4, r4, #2
 8009b30:	2600      	movs	r6, #0
 8009b32:	42a6      	cmp	r6, r4
 8009b34:	d105      	bne.n	8009b42 <__libc_init_array+0x2e>
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3c:	4798      	blx	r3
 8009b3e:	3601      	adds	r6, #1
 8009b40:	e7ee      	b.n	8009b20 <__libc_init_array+0xc>
 8009b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b46:	4798      	blx	r3
 8009b48:	3601      	adds	r6, #1
 8009b4a:	e7f2      	b.n	8009b32 <__libc_init_array+0x1e>
 8009b4c:	0801062c 	.word	0x0801062c
 8009b50:	0801062c 	.word	0x0801062c
 8009b54:	0801062c 	.word	0x0801062c
 8009b58:	08010630 	.word	0x08010630

08009b5c <__retarget_lock_acquire_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <__retarget_lock_release_recursive>:
 8009b5e:	4770      	bx	lr

08009b60 <_free_r>:
 8009b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b62:	2900      	cmp	r1, #0
 8009b64:	d044      	beq.n	8009bf0 <_free_r+0x90>
 8009b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b6a:	9001      	str	r0, [sp, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b72:	bfb8      	it	lt
 8009b74:	18e4      	addlt	r4, r4, r3
 8009b76:	f000 f8df 	bl	8009d38 <__malloc_lock>
 8009b7a:	4a1e      	ldr	r2, [pc, #120]	; (8009bf4 <_free_r+0x94>)
 8009b7c:	9801      	ldr	r0, [sp, #4]
 8009b7e:	6813      	ldr	r3, [r2, #0]
 8009b80:	b933      	cbnz	r3, 8009b90 <_free_r+0x30>
 8009b82:	6063      	str	r3, [r4, #4]
 8009b84:	6014      	str	r4, [r2, #0]
 8009b86:	b003      	add	sp, #12
 8009b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b8c:	f000 b8da 	b.w	8009d44 <__malloc_unlock>
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d908      	bls.n	8009ba6 <_free_r+0x46>
 8009b94:	6825      	ldr	r5, [r4, #0]
 8009b96:	1961      	adds	r1, r4, r5
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	bf01      	itttt	eq
 8009b9c:	6819      	ldreq	r1, [r3, #0]
 8009b9e:	685b      	ldreq	r3, [r3, #4]
 8009ba0:	1949      	addeq	r1, r1, r5
 8009ba2:	6021      	streq	r1, [r4, #0]
 8009ba4:	e7ed      	b.n	8009b82 <_free_r+0x22>
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	b10b      	cbz	r3, 8009bb0 <_free_r+0x50>
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	d9fa      	bls.n	8009ba6 <_free_r+0x46>
 8009bb0:	6811      	ldr	r1, [r2, #0]
 8009bb2:	1855      	adds	r5, r2, r1
 8009bb4:	42a5      	cmp	r5, r4
 8009bb6:	d10b      	bne.n	8009bd0 <_free_r+0x70>
 8009bb8:	6824      	ldr	r4, [r4, #0]
 8009bba:	4421      	add	r1, r4
 8009bbc:	1854      	adds	r4, r2, r1
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	6011      	str	r1, [r2, #0]
 8009bc2:	d1e0      	bne.n	8009b86 <_free_r+0x26>
 8009bc4:	681c      	ldr	r4, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	6053      	str	r3, [r2, #4]
 8009bca:	440c      	add	r4, r1
 8009bcc:	6014      	str	r4, [r2, #0]
 8009bce:	e7da      	b.n	8009b86 <_free_r+0x26>
 8009bd0:	d902      	bls.n	8009bd8 <_free_r+0x78>
 8009bd2:	230c      	movs	r3, #12
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	e7d6      	b.n	8009b86 <_free_r+0x26>
 8009bd8:	6825      	ldr	r5, [r4, #0]
 8009bda:	1961      	adds	r1, r4, r5
 8009bdc:	428b      	cmp	r3, r1
 8009bde:	bf04      	itt	eq
 8009be0:	6819      	ldreq	r1, [r3, #0]
 8009be2:	685b      	ldreq	r3, [r3, #4]
 8009be4:	6063      	str	r3, [r4, #4]
 8009be6:	bf04      	itt	eq
 8009be8:	1949      	addeq	r1, r1, r5
 8009bea:	6021      	streq	r1, [r4, #0]
 8009bec:	6054      	str	r4, [r2, #4]
 8009bee:	e7ca      	b.n	8009b86 <_free_r+0x26>
 8009bf0:	b003      	add	sp, #12
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	2000210c 	.word	0x2000210c

08009bf8 <sbrk_aligned>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	4e0e      	ldr	r6, [pc, #56]	; (8009c34 <sbrk_aligned+0x3c>)
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	6831      	ldr	r1, [r6, #0]
 8009c00:	4605      	mov	r5, r0
 8009c02:	b911      	cbnz	r1, 8009c0a <sbrk_aligned+0x12>
 8009c04:	f000 fba6 	bl	800a354 <_sbrk_r>
 8009c08:	6030      	str	r0, [r6, #0]
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 fba1 	bl	800a354 <_sbrk_r>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d00a      	beq.n	8009c2c <sbrk_aligned+0x34>
 8009c16:	1cc4      	adds	r4, r0, #3
 8009c18:	f024 0403 	bic.w	r4, r4, #3
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	d007      	beq.n	8009c30 <sbrk_aligned+0x38>
 8009c20:	1a21      	subs	r1, r4, r0
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 fb96 	bl	800a354 <_sbrk_r>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d101      	bne.n	8009c30 <sbrk_aligned+0x38>
 8009c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c30:	4620      	mov	r0, r4
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	20002110 	.word	0x20002110

08009c38 <_malloc_r>:
 8009c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	1ccd      	adds	r5, r1, #3
 8009c3e:	f025 0503 	bic.w	r5, r5, #3
 8009c42:	3508      	adds	r5, #8
 8009c44:	2d0c      	cmp	r5, #12
 8009c46:	bf38      	it	cc
 8009c48:	250c      	movcc	r5, #12
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	db01      	blt.n	8009c54 <_malloc_r+0x1c>
 8009c50:	42a9      	cmp	r1, r5
 8009c52:	d905      	bls.n	8009c60 <_malloc_r+0x28>
 8009c54:	230c      	movs	r3, #12
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	2600      	movs	r6, #0
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d34 <_malloc_r+0xfc>
 8009c64:	f000 f868 	bl	8009d38 <__malloc_lock>
 8009c68:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6c:	461c      	mov	r4, r3
 8009c6e:	bb5c      	cbnz	r4, 8009cc8 <_malloc_r+0x90>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff ffc0 	bl	8009bf8 <sbrk_aligned>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	d155      	bne.n	8009d2a <_malloc_r+0xf2>
 8009c7e:	f8d8 4000 	ldr.w	r4, [r8]
 8009c82:	4626      	mov	r6, r4
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	d145      	bne.n	8009d14 <_malloc_r+0xdc>
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d048      	beq.n	8009d1e <_malloc_r+0xe6>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4638      	mov	r0, r7
 8009c92:	eb04 0903 	add.w	r9, r4, r3
 8009c96:	f000 fb5d 	bl	800a354 <_sbrk_r>
 8009c9a:	4581      	cmp	r9, r0
 8009c9c:	d13f      	bne.n	8009d1e <_malloc_r+0xe6>
 8009c9e:	6821      	ldr	r1, [r4, #0]
 8009ca0:	1a6d      	subs	r5, r5, r1
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff ffa7 	bl	8009bf8 <sbrk_aligned>
 8009caa:	3001      	adds	r0, #1
 8009cac:	d037      	beq.n	8009d1e <_malloc_r+0xe6>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	442b      	add	r3, r5
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d038      	beq.n	8009d2e <_malloc_r+0xf6>
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	42a2      	cmp	r2, r4
 8009cc0:	d12b      	bne.n	8009d1a <_malloc_r+0xe2>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	e00f      	b.n	8009ce8 <_malloc_r+0xb0>
 8009cc8:	6822      	ldr	r2, [r4, #0]
 8009cca:	1b52      	subs	r2, r2, r5
 8009ccc:	d41f      	bmi.n	8009d0e <_malloc_r+0xd6>
 8009cce:	2a0b      	cmp	r2, #11
 8009cd0:	d917      	bls.n	8009d02 <_malloc_r+0xca>
 8009cd2:	1961      	adds	r1, r4, r5
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	6025      	str	r5, [r4, #0]
 8009cd8:	bf18      	it	ne
 8009cda:	6059      	strne	r1, [r3, #4]
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	bf08      	it	eq
 8009ce0:	f8c8 1000 	streq.w	r1, [r8]
 8009ce4:	5162      	str	r2, [r4, r5]
 8009ce6:	604b      	str	r3, [r1, #4]
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f104 060b 	add.w	r6, r4, #11
 8009cee:	f000 f829 	bl	8009d44 <__malloc_unlock>
 8009cf2:	f026 0607 	bic.w	r6, r6, #7
 8009cf6:	1d23      	adds	r3, r4, #4
 8009cf8:	1af2      	subs	r2, r6, r3
 8009cfa:	d0ae      	beq.n	8009c5a <_malloc_r+0x22>
 8009cfc:	1b9b      	subs	r3, r3, r6
 8009cfe:	50a3      	str	r3, [r4, r2]
 8009d00:	e7ab      	b.n	8009c5a <_malloc_r+0x22>
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	6862      	ldr	r2, [r4, #4]
 8009d06:	d1dd      	bne.n	8009cc4 <_malloc_r+0x8c>
 8009d08:	f8c8 2000 	str.w	r2, [r8]
 8009d0c:	e7ec      	b.n	8009ce8 <_malloc_r+0xb0>
 8009d0e:	4623      	mov	r3, r4
 8009d10:	6864      	ldr	r4, [r4, #4]
 8009d12:	e7ac      	b.n	8009c6e <_malloc_r+0x36>
 8009d14:	4634      	mov	r4, r6
 8009d16:	6876      	ldr	r6, [r6, #4]
 8009d18:	e7b4      	b.n	8009c84 <_malloc_r+0x4c>
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	e7cc      	b.n	8009cb8 <_malloc_r+0x80>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	4638      	mov	r0, r7
 8009d24:	f000 f80e 	bl	8009d44 <__malloc_unlock>
 8009d28:	e797      	b.n	8009c5a <_malloc_r+0x22>
 8009d2a:	6025      	str	r5, [r4, #0]
 8009d2c:	e7dc      	b.n	8009ce8 <_malloc_r+0xb0>
 8009d2e:	605b      	str	r3, [r3, #4]
 8009d30:	deff      	udf	#255	; 0xff
 8009d32:	bf00      	nop
 8009d34:	2000210c 	.word	0x2000210c

08009d38 <__malloc_lock>:
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__malloc_lock+0x8>)
 8009d3a:	f7ff bf0f 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009d3e:	bf00      	nop
 8009d40:	20002108 	.word	0x20002108

08009d44 <__malloc_unlock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_unlock+0x8>)
 8009d46:	f7ff bf0a 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	20002108 	.word	0x20002108

08009d50 <__ssputs_r>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	688e      	ldr	r6, [r1, #8]
 8009d56:	461f      	mov	r7, r3
 8009d58:	42be      	cmp	r6, r7
 8009d5a:	680b      	ldr	r3, [r1, #0]
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	4690      	mov	r8, r2
 8009d62:	d82c      	bhi.n	8009dbe <__ssputs_r+0x6e>
 8009d64:	898a      	ldrh	r2, [r1, #12]
 8009d66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d6a:	d026      	beq.n	8009dba <__ssputs_r+0x6a>
 8009d6c:	6965      	ldr	r5, [r4, #20]
 8009d6e:	6909      	ldr	r1, [r1, #16]
 8009d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d74:	eba3 0901 	sub.w	r9, r3, r1
 8009d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d7c:	1c7b      	adds	r3, r7, #1
 8009d7e:	444b      	add	r3, r9
 8009d80:	106d      	asrs	r5, r5, #1
 8009d82:	429d      	cmp	r5, r3
 8009d84:	bf38      	it	cc
 8009d86:	461d      	movcc	r5, r3
 8009d88:	0553      	lsls	r3, r2, #21
 8009d8a:	d527      	bpl.n	8009ddc <__ssputs_r+0x8c>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7ff ff53 	bl	8009c38 <_malloc_r>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b360      	cbz	r0, 8009df0 <__ssputs_r+0xa0>
 8009d96:	6921      	ldr	r1, [r4, #16]
 8009d98:	464a      	mov	r2, r9
 8009d9a:	f000 faeb 	bl	800a374 <memcpy>
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	6126      	str	r6, [r4, #16]
 8009dac:	6165      	str	r5, [r4, #20]
 8009dae:	444e      	add	r6, r9
 8009db0:	eba5 0509 	sub.w	r5, r5, r9
 8009db4:	6026      	str	r6, [r4, #0]
 8009db6:	60a5      	str	r5, [r4, #8]
 8009db8:	463e      	mov	r6, r7
 8009dba:	42be      	cmp	r6, r7
 8009dbc:	d900      	bls.n	8009dc0 <__ssputs_r+0x70>
 8009dbe:	463e      	mov	r6, r7
 8009dc0:	6820      	ldr	r0, [r4, #0]
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	f000 faab 	bl	800a320 <memmove>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	1b9b      	subs	r3, r3, r6
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	4433      	add	r3, r6
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ddc:	462a      	mov	r2, r5
 8009dde:	f000 fad7 	bl	800a390 <_realloc_r>
 8009de2:	4606      	mov	r6, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1e0      	bne.n	8009daa <__ssputs_r+0x5a>
 8009de8:	6921      	ldr	r1, [r4, #16]
 8009dea:	4650      	mov	r0, sl
 8009dec:	f7ff feb8 	bl	8009b60 <_free_r>
 8009df0:	230c      	movs	r3, #12
 8009df2:	f8ca 3000 	str.w	r3, [sl]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	e7e9      	b.n	8009dd8 <__ssputs_r+0x88>

08009e04 <_svfiprintf_r>:
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	4698      	mov	r8, r3
 8009e0a:	898b      	ldrh	r3, [r1, #12]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	b09d      	sub	sp, #116	; 0x74
 8009e10:	4607      	mov	r7, r0
 8009e12:	460d      	mov	r5, r1
 8009e14:	4614      	mov	r4, r2
 8009e16:	d50e      	bpl.n	8009e36 <_svfiprintf_r+0x32>
 8009e18:	690b      	ldr	r3, [r1, #16]
 8009e1a:	b963      	cbnz	r3, 8009e36 <_svfiprintf_r+0x32>
 8009e1c:	2140      	movs	r1, #64	; 0x40
 8009e1e:	f7ff ff0b 	bl	8009c38 <_malloc_r>
 8009e22:	6028      	str	r0, [r5, #0]
 8009e24:	6128      	str	r0, [r5, #16]
 8009e26:	b920      	cbnz	r0, 8009e32 <_svfiprintf_r+0x2e>
 8009e28:	230c      	movs	r3, #12
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	e0d0      	b.n	8009fd4 <_svfiprintf_r+0x1d0>
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	616b      	str	r3, [r5, #20]
 8009e36:	2300      	movs	r3, #0
 8009e38:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3a:	2320      	movs	r3, #32
 8009e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e44:	2330      	movs	r3, #48	; 0x30
 8009e46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fec <_svfiprintf_r+0x1e8>
 8009e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e4e:	f04f 0901 	mov.w	r9, #1
 8009e52:	4623      	mov	r3, r4
 8009e54:	469a      	mov	sl, r3
 8009e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5a:	b10a      	cbz	r2, 8009e60 <_svfiprintf_r+0x5c>
 8009e5c:	2a25      	cmp	r2, #37	; 0x25
 8009e5e:	d1f9      	bne.n	8009e54 <_svfiprintf_r+0x50>
 8009e60:	ebba 0b04 	subs.w	fp, sl, r4
 8009e64:	d00b      	beq.n	8009e7e <_svfiprintf_r+0x7a>
 8009e66:	465b      	mov	r3, fp
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ff6f 	bl	8009d50 <__ssputs_r>
 8009e72:	3001      	adds	r0, #1
 8009e74:	f000 80a9 	beq.w	8009fca <_svfiprintf_r+0x1c6>
 8009e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e7a:	445a      	add	r2, fp
 8009e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80a1 	beq.w	8009fca <_svfiprintf_r+0x1c6>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e92:	f10a 0a01 	add.w	sl, sl, #1
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	9307      	str	r3, [sp, #28]
 8009e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8009ea0:	4654      	mov	r4, sl
 8009ea2:	2205      	movs	r2, #5
 8009ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea8:	4850      	ldr	r0, [pc, #320]	; (8009fec <_svfiprintf_r+0x1e8>)
 8009eaa:	f7f6 f991 	bl	80001d0 <memchr>
 8009eae:	9a04      	ldr	r2, [sp, #16]
 8009eb0:	b9d8      	cbnz	r0, 8009eea <_svfiprintf_r+0xe6>
 8009eb2:	06d0      	lsls	r0, r2, #27
 8009eb4:	bf44      	itt	mi
 8009eb6:	2320      	movmi	r3, #32
 8009eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ebc:	0711      	lsls	r1, r2, #28
 8009ebe:	bf44      	itt	mi
 8009ec0:	232b      	movmi	r3, #43	; 0x2b
 8009ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eca:	2b2a      	cmp	r3, #42	; 0x2a
 8009ecc:	d015      	beq.n	8009efa <_svfiprintf_r+0xf6>
 8009ece:	9a07      	ldr	r2, [sp, #28]
 8009ed0:	4654      	mov	r4, sl
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	f04f 0c0a 	mov.w	ip, #10
 8009ed8:	4621      	mov	r1, r4
 8009eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ede:	3b30      	subs	r3, #48	; 0x30
 8009ee0:	2b09      	cmp	r3, #9
 8009ee2:	d94d      	bls.n	8009f80 <_svfiprintf_r+0x17c>
 8009ee4:	b1b0      	cbz	r0, 8009f14 <_svfiprintf_r+0x110>
 8009ee6:	9207      	str	r2, [sp, #28]
 8009ee8:	e014      	b.n	8009f14 <_svfiprintf_r+0x110>
 8009eea:	eba0 0308 	sub.w	r3, r0, r8
 8009eee:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	46a2      	mov	sl, r4
 8009ef8:	e7d2      	b.n	8009ea0 <_svfiprintf_r+0x9c>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	1d19      	adds	r1, r3, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	9103      	str	r1, [sp, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bfbb      	ittet	lt
 8009f06:	425b      	neglt	r3, r3
 8009f08:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0c:	9307      	strge	r3, [sp, #28]
 8009f0e:	9307      	strlt	r3, [sp, #28]
 8009f10:	bfb8      	it	lt
 8009f12:	9204      	strlt	r2, [sp, #16]
 8009f14:	7823      	ldrb	r3, [r4, #0]
 8009f16:	2b2e      	cmp	r3, #46	; 0x2e
 8009f18:	d10c      	bne.n	8009f34 <_svfiprintf_r+0x130>
 8009f1a:	7863      	ldrb	r3, [r4, #1]
 8009f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1e:	d134      	bne.n	8009f8a <_svfiprintf_r+0x186>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	1d1a      	adds	r2, r3, #4
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	9203      	str	r2, [sp, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bfb8      	it	lt
 8009f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f30:	3402      	adds	r4, #2
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ffc <_svfiprintf_r+0x1f8>
 8009f38:	7821      	ldrb	r1, [r4, #0]
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	f7f6 f947 	bl	80001d0 <memchr>
 8009f42:	b138      	cbz	r0, 8009f54 <_svfiprintf_r+0x150>
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	eba0 000a 	sub.w	r0, r0, sl
 8009f4a:	2240      	movs	r2, #64	; 0x40
 8009f4c:	4082      	lsls	r2, r0
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	3401      	adds	r4, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	4825      	ldr	r0, [pc, #148]	; (8009ff0 <_svfiprintf_r+0x1ec>)
 8009f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f5e:	2206      	movs	r2, #6
 8009f60:	f7f6 f936 	bl	80001d0 <memchr>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d038      	beq.n	8009fda <_svfiprintf_r+0x1d6>
 8009f68:	4b22      	ldr	r3, [pc, #136]	; (8009ff4 <_svfiprintf_r+0x1f0>)
 8009f6a:	bb1b      	cbnz	r3, 8009fb4 <_svfiprintf_r+0x1b0>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	3307      	adds	r3, #7
 8009f70:	f023 0307 	bic.w	r3, r3, #7
 8009f74:	3308      	adds	r3, #8
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7a:	4433      	add	r3, r6
 8009f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7e:	e768      	b.n	8009e52 <_svfiprintf_r+0x4e>
 8009f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f84:	460c      	mov	r4, r1
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7a6      	b.n	8009ed8 <_svfiprintf_r+0xd4>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f04f 0c0a 	mov.w	ip, #10
 8009f96:	4620      	mov	r0, r4
 8009f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9c:	3a30      	subs	r2, #48	; 0x30
 8009f9e:	2a09      	cmp	r2, #9
 8009fa0:	d903      	bls.n	8009faa <_svfiprintf_r+0x1a6>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0c6      	beq.n	8009f34 <_svfiprintf_r+0x130>
 8009fa6:	9105      	str	r1, [sp, #20]
 8009fa8:	e7c4      	b.n	8009f34 <_svfiprintf_r+0x130>
 8009faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fae:	4604      	mov	r4, r0
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f0      	b.n	8009f96 <_svfiprintf_r+0x192>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <_svfiprintf_r+0x1f4>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f3af 8000 	nop.w
 8009fc4:	1c42      	adds	r2, r0, #1
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	d1d6      	bne.n	8009f78 <_svfiprintf_r+0x174>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	065b      	lsls	r3, r3, #25
 8009fce:	f53f af2d 	bmi.w	8009e2c <_svfiprintf_r+0x28>
 8009fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fd4:	b01d      	add	sp, #116	; 0x74
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	ab03      	add	r3, sp, #12
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <_svfiprintf_r+0x1f4>)
 8009fe2:	a904      	add	r1, sp, #16
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f000 f879 	bl	800a0dc <_printf_i>
 8009fea:	e7eb      	b.n	8009fc4 <_svfiprintf_r+0x1c0>
 8009fec:	080105f0 	.word	0x080105f0
 8009ff0:	080105fa 	.word	0x080105fa
 8009ff4:	00000000 	.word	0x00000000
 8009ff8:	08009d51 	.word	0x08009d51
 8009ffc:	080105f6 	.word	0x080105f6

0800a000 <_printf_common>:
 800a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a004:	4616      	mov	r6, r2
 800a006:	4699      	mov	r9, r3
 800a008:	688a      	ldr	r2, [r1, #8]
 800a00a:	690b      	ldr	r3, [r1, #16]
 800a00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a010:	4293      	cmp	r3, r2
 800a012:	bfb8      	it	lt
 800a014:	4613      	movlt	r3, r2
 800a016:	6033      	str	r3, [r6, #0]
 800a018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a01c:	4607      	mov	r7, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	b10a      	cbz	r2, 800a026 <_printf_common+0x26>
 800a022:	3301      	adds	r3, #1
 800a024:	6033      	str	r3, [r6, #0]
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	0699      	lsls	r1, r3, #26
 800a02a:	bf42      	ittt	mi
 800a02c:	6833      	ldrmi	r3, [r6, #0]
 800a02e:	3302      	addmi	r3, #2
 800a030:	6033      	strmi	r3, [r6, #0]
 800a032:	6825      	ldr	r5, [r4, #0]
 800a034:	f015 0506 	ands.w	r5, r5, #6
 800a038:	d106      	bne.n	800a048 <_printf_common+0x48>
 800a03a:	f104 0a19 	add.w	sl, r4, #25
 800a03e:	68e3      	ldr	r3, [r4, #12]
 800a040:	6832      	ldr	r2, [r6, #0]
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	42ab      	cmp	r3, r5
 800a046:	dc26      	bgt.n	800a096 <_printf_common+0x96>
 800a048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a04c:	1e13      	subs	r3, r2, #0
 800a04e:	6822      	ldr	r2, [r4, #0]
 800a050:	bf18      	it	ne
 800a052:	2301      	movne	r3, #1
 800a054:	0692      	lsls	r2, r2, #26
 800a056:	d42b      	bmi.n	800a0b0 <_printf_common+0xb0>
 800a058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a05c:	4649      	mov	r1, r9
 800a05e:	4638      	mov	r0, r7
 800a060:	47c0      	blx	r8
 800a062:	3001      	adds	r0, #1
 800a064:	d01e      	beq.n	800a0a4 <_printf_common+0xa4>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	6922      	ldr	r2, [r4, #16]
 800a06a:	f003 0306 	and.w	r3, r3, #6
 800a06e:	2b04      	cmp	r3, #4
 800a070:	bf02      	ittt	eq
 800a072:	68e5      	ldreq	r5, [r4, #12]
 800a074:	6833      	ldreq	r3, [r6, #0]
 800a076:	1aed      	subeq	r5, r5, r3
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	bf0c      	ite	eq
 800a07c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a080:	2500      	movne	r5, #0
 800a082:	4293      	cmp	r3, r2
 800a084:	bfc4      	itt	gt
 800a086:	1a9b      	subgt	r3, r3, r2
 800a088:	18ed      	addgt	r5, r5, r3
 800a08a:	2600      	movs	r6, #0
 800a08c:	341a      	adds	r4, #26
 800a08e:	42b5      	cmp	r5, r6
 800a090:	d11a      	bne.n	800a0c8 <_printf_common+0xc8>
 800a092:	2000      	movs	r0, #0
 800a094:	e008      	b.n	800a0a8 <_printf_common+0xa8>
 800a096:	2301      	movs	r3, #1
 800a098:	4652      	mov	r2, sl
 800a09a:	4649      	mov	r1, r9
 800a09c:	4638      	mov	r0, r7
 800a09e:	47c0      	blx	r8
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d103      	bne.n	800a0ac <_printf_common+0xac>
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	e7c6      	b.n	800a03e <_printf_common+0x3e>
 800a0b0:	18e1      	adds	r1, r4, r3
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	2030      	movs	r0, #48	; 0x30
 800a0b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ba:	4422      	add	r2, r4
 800a0bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0c4:	3302      	adds	r3, #2
 800a0c6:	e7c7      	b.n	800a058 <_printf_common+0x58>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	47c0      	blx	r8
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d0e6      	beq.n	800a0a4 <_printf_common+0xa4>
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	e7d9      	b.n	800a08e <_printf_common+0x8e>
	...

0800a0dc <_printf_i>:
 800a0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e0:	7e0f      	ldrb	r7, [r1, #24]
 800a0e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0e4:	2f78      	cmp	r7, #120	; 0x78
 800a0e6:	4691      	mov	r9, r2
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	469a      	mov	sl, r3
 800a0ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0f2:	d807      	bhi.n	800a104 <_printf_i+0x28>
 800a0f4:	2f62      	cmp	r7, #98	; 0x62
 800a0f6:	d80a      	bhi.n	800a10e <_printf_i+0x32>
 800a0f8:	2f00      	cmp	r7, #0
 800a0fa:	f000 80d4 	beq.w	800a2a6 <_printf_i+0x1ca>
 800a0fe:	2f58      	cmp	r7, #88	; 0x58
 800a100:	f000 80c0 	beq.w	800a284 <_printf_i+0x1a8>
 800a104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a10c:	e03a      	b.n	800a184 <_printf_i+0xa8>
 800a10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a112:	2b15      	cmp	r3, #21
 800a114:	d8f6      	bhi.n	800a104 <_printf_i+0x28>
 800a116:	a101      	add	r1, pc, #4	; (adr r1, 800a11c <_printf_i+0x40>)
 800a118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a11c:	0800a175 	.word	0x0800a175
 800a120:	0800a189 	.word	0x0800a189
 800a124:	0800a105 	.word	0x0800a105
 800a128:	0800a105 	.word	0x0800a105
 800a12c:	0800a105 	.word	0x0800a105
 800a130:	0800a105 	.word	0x0800a105
 800a134:	0800a189 	.word	0x0800a189
 800a138:	0800a105 	.word	0x0800a105
 800a13c:	0800a105 	.word	0x0800a105
 800a140:	0800a105 	.word	0x0800a105
 800a144:	0800a105 	.word	0x0800a105
 800a148:	0800a28d 	.word	0x0800a28d
 800a14c:	0800a1b5 	.word	0x0800a1b5
 800a150:	0800a247 	.word	0x0800a247
 800a154:	0800a105 	.word	0x0800a105
 800a158:	0800a105 	.word	0x0800a105
 800a15c:	0800a2af 	.word	0x0800a2af
 800a160:	0800a105 	.word	0x0800a105
 800a164:	0800a1b5 	.word	0x0800a1b5
 800a168:	0800a105 	.word	0x0800a105
 800a16c:	0800a105 	.word	0x0800a105
 800a170:	0800a24f 	.word	0x0800a24f
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	602a      	str	r2, [r5, #0]
 800a17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a184:	2301      	movs	r3, #1
 800a186:	e09f      	b.n	800a2c8 <_printf_i+0x1ec>
 800a188:	6820      	ldr	r0, [r4, #0]
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	0607      	lsls	r7, r0, #24
 800a18e:	f103 0104 	add.w	r1, r3, #4
 800a192:	6029      	str	r1, [r5, #0]
 800a194:	d501      	bpl.n	800a19a <_printf_i+0xbe>
 800a196:	681e      	ldr	r6, [r3, #0]
 800a198:	e003      	b.n	800a1a2 <_printf_i+0xc6>
 800a19a:	0646      	lsls	r6, r0, #25
 800a19c:	d5fb      	bpl.n	800a196 <_printf_i+0xba>
 800a19e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	da03      	bge.n	800a1ae <_printf_i+0xd2>
 800a1a6:	232d      	movs	r3, #45	; 0x2d
 800a1a8:	4276      	negs	r6, r6
 800a1aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ae:	485a      	ldr	r0, [pc, #360]	; (800a318 <_printf_i+0x23c>)
 800a1b0:	230a      	movs	r3, #10
 800a1b2:	e012      	b.n	800a1da <_printf_i+0xfe>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	6820      	ldr	r0, [r4, #0]
 800a1b8:	1d19      	adds	r1, r3, #4
 800a1ba:	6029      	str	r1, [r5, #0]
 800a1bc:	0605      	lsls	r5, r0, #24
 800a1be:	d501      	bpl.n	800a1c4 <_printf_i+0xe8>
 800a1c0:	681e      	ldr	r6, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <_printf_i+0xee>
 800a1c4:	0641      	lsls	r1, r0, #25
 800a1c6:	d5fb      	bpl.n	800a1c0 <_printf_i+0xe4>
 800a1c8:	881e      	ldrh	r6, [r3, #0]
 800a1ca:	4853      	ldr	r0, [pc, #332]	; (800a318 <_printf_i+0x23c>)
 800a1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2308      	moveq	r3, #8
 800a1d2:	230a      	movne	r3, #10
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1da:	6865      	ldr	r5, [r4, #4]
 800a1dc:	60a5      	str	r5, [r4, #8]
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	bfa2      	ittt	ge
 800a1e2:	6821      	ldrge	r1, [r4, #0]
 800a1e4:	f021 0104 	bicge.w	r1, r1, #4
 800a1e8:	6021      	strge	r1, [r4, #0]
 800a1ea:	b90e      	cbnz	r6, 800a1f0 <_printf_i+0x114>
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	d04b      	beq.n	800a288 <_printf_i+0x1ac>
 800a1f0:	4615      	mov	r5, r2
 800a1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1fa:	5dc7      	ldrb	r7, [r0, r7]
 800a1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a200:	4637      	mov	r7, r6
 800a202:	42bb      	cmp	r3, r7
 800a204:	460e      	mov	r6, r1
 800a206:	d9f4      	bls.n	800a1f2 <_printf_i+0x116>
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d10b      	bne.n	800a224 <_printf_i+0x148>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	07de      	lsls	r6, r3, #31
 800a210:	d508      	bpl.n	800a224 <_printf_i+0x148>
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	6861      	ldr	r1, [r4, #4]
 800a216:	4299      	cmp	r1, r3
 800a218:	bfde      	ittt	le
 800a21a:	2330      	movle	r3, #48	; 0x30
 800a21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a220:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a224:	1b52      	subs	r2, r2, r5
 800a226:	6122      	str	r2, [r4, #16]
 800a228:	f8cd a000 	str.w	sl, [sp]
 800a22c:	464b      	mov	r3, r9
 800a22e:	aa03      	add	r2, sp, #12
 800a230:	4621      	mov	r1, r4
 800a232:	4640      	mov	r0, r8
 800a234:	f7ff fee4 	bl	800a000 <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	d14a      	bne.n	800a2d2 <_printf_i+0x1f6>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	b004      	add	sp, #16
 800a242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	f043 0320 	orr.w	r3, r3, #32
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	4833      	ldr	r0, [pc, #204]	; (800a31c <_printf_i+0x240>)
 800a250:	2778      	movs	r7, #120	; 0x78
 800a252:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	6829      	ldr	r1, [r5, #0]
 800a25a:	061f      	lsls	r7, r3, #24
 800a25c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a260:	d402      	bmi.n	800a268 <_printf_i+0x18c>
 800a262:	065f      	lsls	r7, r3, #25
 800a264:	bf48      	it	mi
 800a266:	b2b6      	uxthmi	r6, r6
 800a268:	07df      	lsls	r7, r3, #31
 800a26a:	bf48      	it	mi
 800a26c:	f043 0320 	orrmi.w	r3, r3, #32
 800a270:	6029      	str	r1, [r5, #0]
 800a272:	bf48      	it	mi
 800a274:	6023      	strmi	r3, [r4, #0]
 800a276:	b91e      	cbnz	r6, 800a280 <_printf_i+0x1a4>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	f023 0320 	bic.w	r3, r3, #32
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	2310      	movs	r3, #16
 800a282:	e7a7      	b.n	800a1d4 <_printf_i+0xf8>
 800a284:	4824      	ldr	r0, [pc, #144]	; (800a318 <_printf_i+0x23c>)
 800a286:	e7e4      	b.n	800a252 <_printf_i+0x176>
 800a288:	4615      	mov	r5, r2
 800a28a:	e7bd      	b.n	800a208 <_printf_i+0x12c>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	6826      	ldr	r6, [r4, #0]
 800a290:	6961      	ldr	r1, [r4, #20]
 800a292:	1d18      	adds	r0, r3, #4
 800a294:	6028      	str	r0, [r5, #0]
 800a296:	0635      	lsls	r5, r6, #24
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	d501      	bpl.n	800a2a0 <_printf_i+0x1c4>
 800a29c:	6019      	str	r1, [r3, #0]
 800a29e:	e002      	b.n	800a2a6 <_printf_i+0x1ca>
 800a2a0:	0670      	lsls	r0, r6, #25
 800a2a2:	d5fb      	bpl.n	800a29c <_printf_i+0x1c0>
 800a2a4:	8019      	strh	r1, [r3, #0]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	4615      	mov	r5, r2
 800a2ac:	e7bc      	b.n	800a228 <_printf_i+0x14c>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	1d1a      	adds	r2, r3, #4
 800a2b2:	602a      	str	r2, [r5, #0]
 800a2b4:	681d      	ldr	r5, [r3, #0]
 800a2b6:	6862      	ldr	r2, [r4, #4]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f7f5 ff88 	bl	80001d0 <memchr>
 800a2c0:	b108      	cbz	r0, 800a2c6 <_printf_i+0x1ea>
 800a2c2:	1b40      	subs	r0, r0, r5
 800a2c4:	6060      	str	r0, [r4, #4]
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d0:	e7aa      	b.n	800a228 <_printf_i+0x14c>
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	47d0      	blx	sl
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d0ad      	beq.n	800a23c <_printf_i+0x160>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	079b      	lsls	r3, r3, #30
 800a2e4:	d413      	bmi.n	800a30e <_printf_i+0x232>
 800a2e6:	68e0      	ldr	r0, [r4, #12]
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	4298      	cmp	r0, r3
 800a2ec:	bfb8      	it	lt
 800a2ee:	4618      	movlt	r0, r3
 800a2f0:	e7a6      	b.n	800a240 <_printf_i+0x164>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	47d0      	blx	sl
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d09d      	beq.n	800a23c <_printf_i+0x160>
 800a300:	3501      	adds	r5, #1
 800a302:	68e3      	ldr	r3, [r4, #12]
 800a304:	9903      	ldr	r1, [sp, #12]
 800a306:	1a5b      	subs	r3, r3, r1
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dcf2      	bgt.n	800a2f2 <_printf_i+0x216>
 800a30c:	e7eb      	b.n	800a2e6 <_printf_i+0x20a>
 800a30e:	2500      	movs	r5, #0
 800a310:	f104 0619 	add.w	r6, r4, #25
 800a314:	e7f5      	b.n	800a302 <_printf_i+0x226>
 800a316:	bf00      	nop
 800a318:	08010601 	.word	0x08010601
 800a31c:	08010612 	.word	0x08010612

0800a320 <memmove>:
 800a320:	4288      	cmp	r0, r1
 800a322:	b510      	push	{r4, lr}
 800a324:	eb01 0402 	add.w	r4, r1, r2
 800a328:	d902      	bls.n	800a330 <memmove+0x10>
 800a32a:	4284      	cmp	r4, r0
 800a32c:	4623      	mov	r3, r4
 800a32e:	d807      	bhi.n	800a340 <memmove+0x20>
 800a330:	1e43      	subs	r3, r0, #1
 800a332:	42a1      	cmp	r1, r4
 800a334:	d008      	beq.n	800a348 <memmove+0x28>
 800a336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a33e:	e7f8      	b.n	800a332 <memmove+0x12>
 800a340:	4402      	add	r2, r0
 800a342:	4601      	mov	r1, r0
 800a344:	428a      	cmp	r2, r1
 800a346:	d100      	bne.n	800a34a <memmove+0x2a>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a352:	e7f7      	b.n	800a344 <memmove+0x24>

0800a354 <_sbrk_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d06      	ldr	r5, [pc, #24]	; (800a370 <_sbrk_r+0x1c>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	602b      	str	r3, [r5, #0]
 800a360:	f7f6 fd56 	bl	8000e10 <_sbrk>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_sbrk_r+0x1a>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_sbrk_r+0x1a>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20002104 	.word	0x20002104

0800a374 <memcpy>:
 800a374:	440a      	add	r2, r1
 800a376:	4291      	cmp	r1, r2
 800a378:	f100 33ff 	add.w	r3, r0, #4294967295
 800a37c:	d100      	bne.n	800a380 <memcpy+0xc>
 800a37e:	4770      	bx	lr
 800a380:	b510      	push	{r4, lr}
 800a382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a38a:	4291      	cmp	r1, r2
 800a38c:	d1f9      	bne.n	800a382 <memcpy+0xe>
 800a38e:	bd10      	pop	{r4, pc}

0800a390 <_realloc_r>:
 800a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	4680      	mov	r8, r0
 800a396:	4614      	mov	r4, r2
 800a398:	460e      	mov	r6, r1
 800a39a:	b921      	cbnz	r1, 800a3a6 <_realloc_r+0x16>
 800a39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	f7ff bc49 	b.w	8009c38 <_malloc_r>
 800a3a6:	b92a      	cbnz	r2, 800a3b4 <_realloc_r+0x24>
 800a3a8:	f7ff fbda 	bl	8009b60 <_free_r>
 800a3ac:	4625      	mov	r5, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b4:	f000 f81b 	bl	800a3ee <_malloc_usable_size_r>
 800a3b8:	4284      	cmp	r4, r0
 800a3ba:	4607      	mov	r7, r0
 800a3bc:	d802      	bhi.n	800a3c4 <_realloc_r+0x34>
 800a3be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3c2:	d812      	bhi.n	800a3ea <_realloc_r+0x5a>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f7ff fc36 	bl	8009c38 <_malloc_r>
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0ed      	beq.n	800a3ae <_realloc_r+0x1e>
 800a3d2:	42bc      	cmp	r4, r7
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	bf28      	it	cs
 800a3da:	463a      	movcs	r2, r7
 800a3dc:	f7ff ffca 	bl	800a374 <memcpy>
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f7ff fbbc 	bl	8009b60 <_free_r>
 800a3e8:	e7e1      	b.n	800a3ae <_realloc_r+0x1e>
 800a3ea:	4635      	mov	r5, r6
 800a3ec:	e7df      	b.n	800a3ae <_realloc_r+0x1e>

0800a3ee <_malloc_usable_size_r>:
 800a3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f2:	1f18      	subs	r0, r3, #4
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfbc      	itt	lt
 800a3f8:	580b      	ldrlt	r3, [r1, r0]
 800a3fa:	18c0      	addlt	r0, r0, r3
 800a3fc:	4770      	bx	lr
	...

0800a400 <_init>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr

0800a40c <_fini>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr
