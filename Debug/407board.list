
407board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006248  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801087c  0801087c  00030194  2**0
                  CONTENTS
  4 .ARM          00000008  0801087c  0801087c  0002087c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010884  08010884  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010884  08010884  00020884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010888  08010888  00020888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801088c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030194  2**0
                  CONTENTS
 10 .bss          00001f80  20000194  20000194  00030194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002114  20002114  00030194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b89e  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c8e  00000000  00000000  0004baa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  00050738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000106b  00000000  00000000  00051d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a1fd  00000000  00000000  00052d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001facd  00000000  00000000  0007cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7d41  00000000  00000000  0009ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cf0  00000000  00000000  001747a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0017a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a61c 	.word	0x0800a61c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0800a61c 	.word	0x0800a61c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000586:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800058a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_FSMC_Init+0xb8>)
 800058e:	4a26      	ldr	r2, [pc, #152]	; (8000628 <MX_FSMC_Init+0xbc>)
 8000590:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_FSMC_Init+0xb8>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80005f0:	2305      	movs	r3, #5
 80005f2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80005fc:	2311      	movs	r3, #17
 80005fe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_FSMC_Init+0xb8>)
 800060c:	f003 fc0e 	bl	8003e2c <HAL_SRAM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000616:	f000 fae1 	bl	8000bdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001b0 	.word	0x200001b0
 8000628:	a0000104 	.word	0xa0000104

0800062c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d141      	bne.n	80006cc <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6393      	str	r3, [r2, #56]	; 0x38
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800066a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800066e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800067c:	230c      	movs	r3, #12
 800067e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <HAL_FSMC_MspInit+0xb0>)
 8000686:	f000 ff1b 	bl	80014c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800068a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800068e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800069c:	230c      	movs	r3, #12
 800069e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006a6:	f000 ff0b 	bl	80014c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80006aa:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80006ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006bc:	230c      	movs	r3, #12
 80006be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006c6:	f000 fefb 	bl	80014c0 <HAL_GPIO_Init>
 80006ca:	e000      	b.n	80006ce <HAL_FSMC_MspInit+0xa2>
    return;
 80006cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000200 	.word	0x20000200
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80006ec:	f7ff ff9e 	bl	800062c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	4b62      	ldr	r3, [pc, #392]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a61      	ldr	r2, [pc, #388]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	4b5b      	ldr	r3, [pc, #364]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a5a      	ldr	r2, [pc, #360]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b58      	ldr	r3, [pc, #352]	; (800089c <MX_GPIO_Init+0x1a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b54      	ldr	r3, [pc, #336]	; (800089c <MX_GPIO_Init+0x1a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a53      	ldr	r2, [pc, #332]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b4d      	ldr	r3, [pc, #308]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a4c      	ldr	r2, [pc, #304]	; (800089c <MX_GPIO_Init+0x1a4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b4a      	ldr	r3, [pc, #296]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a45      	ldr	r2, [pc, #276]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <MX_GPIO_Init+0x1a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a3e      	ldr	r2, [pc, #248]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_GPIO_Init+0x1a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	21c0      	movs	r1, #192	; 0xc0
 80007ba:	4839      	ldr	r0, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x1a8>)
 80007bc:	f001 f834 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	4837      	ldr	r0, [pc, #220]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 80007c6:	f001 f82f 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CS_Pin|T_CLK_Pin|T_MOSI_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80007d0:	4834      	ldr	r0, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 80007d2:	f001 f829 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80007d6:	2318      	movs	r3, #24
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <MX_GPIO_Init+0x1b0>)
 80007ea:	f000 fe69 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007ee:	23c0      	movs	r3, #192	; 0xc0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <MX_GPIO_Init+0x1a8>)
 8000806:	f000 fe5b 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 800080a:	2320      	movs	r3, #32
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	2301      	movs	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x1b4>)
 800081e:	f000 fe4f 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000822:	2302      	movs	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 800083a:	f000 fe41 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000844:	2311      	movs	r3, #17
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000858:	f000 fe32 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 800085c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000876:	f000 fe23 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800087a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0x1ac>)
 8000890:	f000 fe16 	bl	80014c0 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	; 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40020800 	.word	0x40020800

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b08d      	sub	sp, #52	; 0x34
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fbc9 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f8bd 	bl	8000a38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f7ff ff1b 	bl	80006f8 <MX_GPIO_Init>
  MX_FSMC_Init();
 80008c2:	f7ff fe53 	bl	800056c <MX_FSMC_Init>
  MX_RTC_Init();
 80008c6:	f000 f98f 	bl	8000be8 <MX_RTC_Init>
  MX_SPI1_Init();
 80008ca:	f000 f9dd 	bl	8000c88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008ce:	f000 fb19 	bl	8000f04 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80008d2:	f008 fd0b 	bl	80092ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  time.Hours = 22;
//  time.Minutes = 59;
//  time.Seconds = 00;
//  HAL_RTC_SetTime(&rtc, &time , RTC_HOURFORMAT_24);
  LCD_BL_ON();
 80008d6:	2201      	movs	r2, #1
 80008d8:	2102      	movs	r1, #2
 80008da:	4851      	ldr	r0, [pc, #324]	; (8000a20 <main+0x170>)
 80008dc:	f000 ffa4 	bl	8001828 <HAL_GPIO_WritePin>
   lcdInit();
 80008e0:	f005 ffe8 	bl	80068b4 <_Z7lcdInitv>
   int i = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
   lcdSetOrientation((lcdOrientationTypeDef)i);
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fbf9 	bl	80070e4 <_Z17lcdSetOrientation21lcdOrientationTypeDef>
   // TpadInit();
   HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fc1c 	bl	8001130 <HAL_Delay>
  // HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
   lcdFillRGB(COLOR_BLACK);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f006 f94f 	bl	8006b9c <_Z10lcdFillRGBt>
   char Str[] = "Привет!";
 80008fe:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <main+0x174>)
 8000900:	f107 040c 	add.w	r4, r7, #12
 8000904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000906:	c407      	stmia	r4!, {r0, r1, r2}
 8000908:	8023      	strh	r3, [r4, #0]
   lcdSetTextFont(&Font_verdana_10);
 800090a:	4847      	ldr	r0, [pc, #284]	; (8000a28 <main+0x178>)
 800090c:	f006 fbc4 	bl	8007098 <_Z14lcdSetTextFontP6_tFont>
       lcdSetCursor(2,2);
 8000910:	2102      	movs	r1, #2
 8000912:	2002      	movs	r0, #2
 8000914:	f006 fc54 	bl	80071c0 <_Z12lcdSetCursortt>
       lcdPrintText(Str, 7, COLOR_GREEN, COLOR_DARKCYAN);
 8000918:	f107 000c 	add.w	r0, r7, #12
 800091c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000920:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000924:	2107      	movs	r1, #7
 8000926:	f006 fb03 	bl	8006f30 <_Z12lcdPrintTextPKchtt>
       HAL_Delay(2000);
 800092a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800092e:	f000 fbff 	bl	8001130 <HAL_Delay>
       lcdSetCursor(1,20);
 8000932:	2114      	movs	r1, #20
 8000934:	2001      	movs	r0, #1
 8000936:	f006 fc43 	bl	80071c0 <_Z12lcdSetCursortt>
       lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800093a:	2100      	movs	r1, #0
 800093c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000940:	f006 fbba 	bl	80070b8 <_Z15lcdSetTextColortt>
       lcdPrintf("CALIBRATE! \n Перемешайте стилус по экрану \n from  upper right \n to down left\n screens corner few time");
 8000944:	4839      	ldr	r0, [pc, #228]	; (8000a2c <main+0x17c>)
 8000946:	f006 fa43 	bl	8006dd0 <_Z9lcdPrintfPKcz>
       while(! TP_Touchpad_Pressed());
 800094a:	bf00      	nop
 800094c:	f005 ff16 	bl	800677c <_Z19TP_Touchpad_Pressedv>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf0c      	ite	eq
 8000956:	2301      	moveq	r3, #1
 8000958:	2300      	movne	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1f5      	bne.n	800094c <main+0x9c>
       TP_calibration();
 8000960:	f005 ff22 	bl	80067a8 <_Z14TP_calibrationv>
   lcdFillRGB(COLOR_BLACK);
 8000964:	2000      	movs	r0, #0
 8000966:	f006 f919 	bl	8006b9c <_Z10lcdFillRGBt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
bool refil = false;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {

//      	if(TpadGetCoordinates(penX, penY)){
//      	}

      if(TP_Touchpad_Pressed() == 1){
 8000970:	f005 ff04 	bl	800677c <_Z19TP_Touchpad_Pressedv>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	bf0c      	ite	eq
 800097a:	2301      	moveq	r3, #1
 800097c:	2300      	movne	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <main+0x11c>
	  uint16_t Coord[4] ={0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
	  refil = true;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  TP_Read_Coordinates(Coord);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fe31 	bl	80065fc <_Z19TP_Read_CoordinatesPt>
      		lcdSetTextFont(&Font_verdana_10);
 800099a:	4823      	ldr	r0, [pc, #140]	; (8000a28 <main+0x178>)
 800099c:	f006 fb7c 	bl	8007098 <_Z14lcdSetTextFontP6_tFont>
      	      	lcdSetCursor(1 , 1);
 80009a0:	2101      	movs	r1, #1
 80009a2:	2001      	movs	r0, #1
 80009a4:	f006 fc0c 	bl	80071c0 <_Z12lcdSetCursortt>
      	      	lcdSetTextColor(COLOR_GREENYELLOW, COLOR_BLACK);
 80009a8:	2100      	movs	r1, #0
 80009aa:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 80009ae:	f006 fb83 	bl	80070b8 <_Z15lcdSetTextColortt>
      	      	lcdPrintf("PEN: X %5i Y %5i\n \t X %5i Y %5i", Coord[0], Coord[1], Coord[2], Coord[3]);
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	4619      	mov	r1, r3
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	461a      	mov	r2, r3
 80009ba:	893b      	ldrh	r3, [r7, #8]
 80009bc:	4618      	mov	r0, r3
 80009be:	897b      	ldrh	r3, [r7, #10]
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4603      	mov	r3, r0
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0x180>)
 80009c6:	f006 fa03 	bl	8006dd0 <_Z9lcdPrintfPKcz>
 80009ca:	e009      	b.n	80009e0 <main+0x130>

      } else {
	  if (refil){
 80009cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d005      	beq.n	80009e0 <main+0x130>
	  refil = false;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  lcdFillRGB(COLOR_BLACK);
 80009da:	2000      	movs	r0, #0
 80009dc:	f006 f8de 	bl	8006b9c <_Z10lcdFillRGBt>
	  }
      }
    unsigned long t = testText();
 80009e0:	f000 f8a0 	bl	8000b24 <_Z8testTextv>
 80009e4:	61f8      	str	r0, [r7, #28]
    lcdSetTextFont(&Font_verdana_10);
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <main+0x178>)
 80009e8:	f006 fb56 	bl	8007098 <_Z14lcdSetTextFontP6_tFont>
    lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 2);
 80009ec:	f006 fc46 	bl	800727c <_Z12lcdGetHeightv>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461c      	mov	r4, r3
 80009f4:	f006 fc4e 	bl	8007294 <_Z14lcdGetTextFontv>
 80009f8:	4603      	mov	r3, r0
 80009fa:	88db      	ldrh	r3, [r3, #6]
 80009fc:	1ae3      	subs	r3, r4, r3
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3b02      	subs	r3, #2
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f006 fbda 	bl	80071c0 <_Z12lcdSetCursortt>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a12:	f006 fb51 	bl	80070b8 <_Z15lcdSetTextColortt>
    lcdPrintf("Time: %4lu ms", t);
 8000a16:	69f9      	ldr	r1, [r7, #28]
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <main+0x184>)
 8000a1a:	f006 f9d9 	bl	8006dd0 <_Z9lcdPrintfPKcz>
      		// HAL_Delay(_delay);

//      demoLCD(i);
//    	  i++;
      }
 8000a1e:	e7a7      	b.n	8000970 <main+0xc0>
 8000a20:	40020400 	.word	0x40020400
 8000a24:	0800a6e4 	.word	0x0800a6e4
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	0800a634 	.word	0x0800a634
 8000a30:	0800a6b4 	.word	0x0800a6b4
 8000a34:	0800a6d4 	.word	0x0800a6d4

08000a38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f009 f964 	bl	8009d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <_Z18SystemClock_Configv+0xe4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <_Z18SystemClock_Configv+0xe4>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <_Z18SystemClock_Configv+0xe4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <_Z18SystemClock_Configv+0xe8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <_Z18SystemClock_Configv+0xe8>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <_Z18SystemClock_Configv+0xe8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a94:	2305      	movs	r3, #5
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ab0:	23a8      	movs	r3, #168	; 0xa8
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 f91b 	bl	8002cfc <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000ad6:	f000 f881 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2105      	movs	r1, #5
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 fb77 	bl	80031ec <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000b0e:	f000 f865 	bl	8000bdc <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <_Z8testTextv>:
	lcdFillRGB(COLOR_BLACK);
	return t += HAL_GetTick() - start;
}

unsigned long testText()
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick();
 8000b2a:	f000 faf5 	bl	8001118 <HAL_GetTick>
 8000b2e:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
 8000b30:	2200      	movs	r2, #0
 8000b32:	4923      	ldr	r1, [pc, #140]	; (8000bc0 <_Z8testTextv+0x9c>)
 8000b34:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <_Z8testTextv+0xa0>)
 8000b36:	f002 fede 	bl	80038f6 <HAL_RTC_GetTime>
	lcdSetCursor(50, 60);
 8000b3a:	213c      	movs	r1, #60	; 0x3c
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f006 fb3f 	bl	80071c0 <_Z12lcdSetCursortt>
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8000b42:	2100      	movs	r1, #0
 8000b44:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000b48:	f006 fab6 	bl	80070b8 <_Z15lcdSetTextColortt>
	lcdSetTextFont(&Font_verdana_14);
 8000b4c:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <_Z8testTextv+0xa4>)
 8000b4e:	f006 faa3 	bl	8007098 <_Z14lcdSetTextFontP6_tFont>
	lcdPrintf("%02i : %02i : %02i ", time.Hours, time.Minutes, time.Seconds);
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <_Z8testTextv+0x9c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <_Z8testTextv+0x9c>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <_Z8testTextv+0x9c>)
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <_Z8testTextv+0xa8>)
 8000b64:	f006 f934 	bl	8006dd0 <_Z9lcdPrintfPKcz>
		lcdSetCursor(0, 86);
 8000b68:	2156      	movs	r1, #86	; 0x56
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f006 fb28 	bl	80071c0 <_Z12lcdSetCursortt>
		lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8000b70:	2100      	movs	r1, #0
 8000b72:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000b76:	f006 fa9f 	bl	80070b8 <_Z15lcdSetTextColortt>
		lcdSetTextFont(&Font_verdana_10);
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <_Z8testTextv+0xac>)
 8000b7c:	f006 fa8c 	bl	8007098 <_Z14lcdSetTextFontP6_tFont>
		lcdPrintf("\t Monospace font type \n \t \texample: \n\n\t!@#$%^&,.-+=<>? \n\t 1234567890\n  Hello!\n" );
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <_Z8testTextv+0xb0>)
 8000b82:	f006 f925 	bl	8006dd0 <_Z9lcdPrintfPKcz>
		char Str1[] ="Кириллический шрифт\n и Latinic";
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <_Z8testTextv+0xb4>)
 8000b88:	463c      	mov	r4, r7
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	8023      	strh	r3, [r4, #0]
		lcdPrintText(Str1, 30, COLOR_GREENYELLOW, COLOR_DARKCYAN);
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000ba2:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8000ba6:	211e      	movs	r1, #30
 8000ba8:	f006 f9c2 	bl	8006f30 <_Z12lcdPrintTextPKchtt>
	return HAL_GetTick() - start;
 8000bac:	f000 fab4 	bl	8001118 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb4:	1ad3      	subs	r3, r2, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000204 	.word	0x20000204
 8000bc4:	20000218 	.word	0x20000218
 8000bc8:	2000003c 	.word	0x2000003c
 8000bcc:	0800a710 	.word	0x0800a710
 8000bd0:	20000030 	.word	0x20000030
 8000bd4:	0800a724 	.word	0x0800a724
 8000bd8:	0800a774 	.word	0x0800a774

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_RTC_Init+0x44>)
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <MX_RTC_Init+0x48>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_RTC_Init+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_RTC_Init+0x44>)
 8000bfa:	227f      	movs	r2, #127	; 0x7f
 8000bfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_RTC_Init+0x44>)
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_RTC_Init+0x44>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_RTC_Init+0x44>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_RTC_Init+0x44>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_RTC_Init+0x44>)
 8000c18:	f002 fdea 	bl	80037f0 <HAL_RTC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c22:	f7ff ffdb 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000218 	.word	0x20000218
 8000c30:	40002800 	.word	0x40002800

08000c34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_RTC_MspInit+0x4c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d111      	bne.n	8000c78 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fce2 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c6e:	f7ff ffb5 	bl	8000bdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_RTC_MspInit+0x50>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40002800 	.word	0x40002800
 8000c84:	42470e3c 	.word	0x42470e3c

08000c88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <MX_SPI1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cda:	f002 ff0b 	bl	8003af4 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f7ff ff7a 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000238 	.word	0x20000238
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_SPI_MspInit+0x94>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d133      	bne.n	8000d7e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_SPI_MspInit+0x98>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d4e:	2338      	movs	r3, #56	; 0x38
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <HAL_SPI_MspInit+0x9c>)
 8000d6a:	f000 fba9 	bl	80014c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2023      	movs	r0, #35	; 0x23
 8000d74:	f000 fadb 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d78:	2023      	movs	r0, #35	; 0x23
 8000d7a:	f000 faf4 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40013000 	.word	0x40013000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f95e 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <SPI1_IRQHandler+0x10>)
 8000e3e:	f002 fee3 	bl	8003c08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000238 	.word	0x20000238

08000e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART1_IRQHandler+0x10>)
 8000e52:	f003 f883 	bl	8003f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000294 	.word	0x20000294

08000e60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <OTG_FS_IRQHandler+0x10>)
 8000e66:	f000 fe3c 	bl	8001ae2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200018c8 	.word	0x200018c8

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f008 ff3e 	bl	8009d24 <__errno>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20020000 	.word	0x20020000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	20000290 	.word	0x20000290
 8000edc:	20002118 	.word	0x20002118

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_USART1_UART_Init+0x4c>)
 8000f3c:	f002 ffbe 	bl	8003ebc <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f46:	f7ff fe49 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000294 	.word	0x20000294
 8000f54:	40011000 	.word	0x40011000

08000f58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_UART_MspInit+0x94>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d134      	bne.n	8000fe4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000fd0:	f000 fa76 	bl	80014c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2025      	movs	r0, #37	; 0x25
 8000fda:	f000 f9a8 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fde:	2025      	movs	r0, #37	; 0x25
 8000fe0:	f000 f9c1 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ffc:	f7ff ff70 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f008 fe83 	bl	8009d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fc41 	bl	80008b0 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 800103c:	0801088c 	.word	0x0801088c
  ldr r2, =_sbss
 8001040:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8001044:	20002114 	.word	0x20002114

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_Init+0x40>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_Init+0x40>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x40>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f94f 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fe88 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f967 	bl	8001382 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f92f 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	200002dc 	.word	0x200002dc

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200002dc 	.word	0x200002dc

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff3e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff31 	bl	80011dc <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff feb6 	bl	8001118 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d008      	beq.n	80013cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e052      	b.n	8001472 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0216 	bic.w	r2, r2, #22
 80013da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_DMA_Abort+0x62>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d007      	beq.n	800140c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0208 	bic.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141c:	e013      	b.n	8001446 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141e:	f7ff fe7b 	bl	8001118 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b05      	cmp	r3, #5
 800142a:	d90c      	bls.n	8001446 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e015      	b.n	8001472 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e4      	bne.n	800141e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	223f      	movs	r2, #63	; 0x3f
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d004      	beq.n	8001498 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e00c      	b.n	80014b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e16b      	b.n	80017b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 815a 	bne.w	80017ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80b4 	beq.w	80017ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_GPIO_Init+0x30c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a5f      	ldr	r2, [pc, #380]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_GPIO_Init+0x310>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x314>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d02b      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x318>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_GPIO_Init+0x31c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x21e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x320>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x328>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x32c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x330>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x20a>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00e      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ca:	2308      	movs	r3, #8
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e6:	2300      	movs	r3, #0
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f8:	4935      	ldr	r1, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x310>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_GPIO_Init+0x334>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	f67f ae90 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af02      	add	r7, sp, #8
 8001860:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e101      	b.n	8001a70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f007 ff10 	bl	80096ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fc15 	bl	80050d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7c1a      	ldrb	r2, [r3, #16]
 80018b4:	f88d 2000 	strb.w	r2, [sp]
 80018b8:	3304      	adds	r3, #4
 80018ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018bc:	f003 faf4 	bl	8004ea8 <USB_CoreInit>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0ce      	b.n	8001a70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fc0d 	bl	80050f8 <USB_SetCurrentMode>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0bf      	b.n	8001a70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e04a      	b.n	800198c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3315      	adds	r3, #21
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3314      	adds	r3, #20
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	b298      	uxth	r0, r3
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	332e      	adds	r3, #46	; 0x2e
 8001932:	4602      	mov	r2, r0
 8001934:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3318      	adds	r3, #24
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	331c      	adds	r3, #28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3320      	adds	r3, #32
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3324      	adds	r3, #36	; 0x24
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	3301      	adds	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	791b      	ldrb	r3, [r3, #4]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3af      	bcc.n	80018f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e044      	b.n	8001a26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	f203 2355 	addw	r3, r3, #597	; 0x255
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	3301      	adds	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3b5      	bcc.n	800199c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7c1a      	ldrb	r2, [r3, #16]
 8001a38:	f88d 2000 	strb.w	r2, [sp]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a40:	f003 fba6 	bl	8005190 <USB_DevInit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00c      	b.n	8001a70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f004 fbea 	bl	8006242 <USB_DevDisconnect>

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_Start+0x1c>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e022      	b.n	8001ada <HAL_PCD_Start+0x62>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 faf7 	bl	80050b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fb98 	bl	8006200 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ae2:	b590      	push	{r4, r7, lr}
 8001ae4:	b08d      	sub	sp, #52	; 0x34
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fc56 	bl	80063aa <USB_GetMode>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 848c 	bne.w	800241e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fbba 	bl	8006284 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8482 	beq.w	800241c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fba7 	bl	8006284 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d107      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f002 0202 	and.w	r2, r2, #2
 8001b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fb95 	bl	8006284 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d161      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0210 	bic.w	r2, r2, #16
 8001b72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	3304      	adds	r3, #4
 8001b92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	0c5b      	lsrs	r3, r3, #17
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d124      	bne.n	8001bea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d035      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6a38      	ldr	r0, [r7, #32]
 8001bc0:	f004 f9cc 	bl	8005f5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd0:	441a      	add	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be2:	441a      	add	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	e016      	b.n	8001c18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	0c5b      	lsrs	r3, r3, #17
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d110      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6a38      	ldr	r0, [r7, #32]
 8001c02:	f004 f9ab 	bl	8005f5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c12:	441a      	add	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0210 	orr.w	r2, r2, #16
 8001c26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 fb29 	bl	8006284 <USB_ReadInterrupts>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c3c:	f040 80a7 	bne.w	8001d8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fb2e 	bl	80062aa <USB_ReadDevAllOutEpInterrupt>
 8001c4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c50:	e099      	b.n	8001d86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 808e 	beq.w	8001d7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fb52 	bl	8006312 <USB_ReadDevOutEPInterrupt>
 8001c6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c86:	461a      	mov	r2, r3
 8001c88:	2301      	movs	r3, #1
 8001c8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fea2 	bl	80029d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001caa:	461a      	mov	r2, r3
 8001cac:	2308      	movs	r3, #8
 8001cae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 ff78 	bl	8002ba8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d030      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d109      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f007 fdc5 	bl	80098b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d56:	461a      	mov	r2, r3
 8001d58:	2320      	movs	r3, #32
 8001d5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d72:	461a      	mov	r2, r3
 8001d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f af62 	bne.w	8001c52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fa76 	bl	8006284 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001da2:	f040 80db 	bne.w	8001f5c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fa97 	bl	80062de <USB_ReadDevAllInEpInterrupt>
 8001db0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001db6:	e0cd      	b.n	8001f54 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80c2 	beq.w	8001f48 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fabd 	bl	800634e <USB_ReadDevInEPInterrupt>
 8001dd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d057      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	2201      	movs	r2, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69f9      	ldr	r1, [r7, #28]
 8001dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e00:	4013      	ands	r3, r2
 8001e02:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e10:	461a      	mov	r2, r3
 8001e12:	2301      	movs	r3, #1
 8001e14:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	799b      	ldrb	r3, [r3, #6]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d132      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4403      	add	r3, r0
 8001e3e:	331c      	adds	r3, #28
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4419      	add	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4403      	add	r3, r0
 8001e52:	3320      	adds	r3, #32
 8001e54:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x3a2>
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3324      	adds	r3, #36	; 0x24
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d108      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2101      	movs	r1, #1
 8001e80:	f004 fac4 	bl	800640c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f007 fc8f 	bl	80097ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2340      	movs	r3, #64	; 0x40
 8001ee2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d023      	beq.n	8001f36 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef0:	6a38      	ldr	r0, [r7, #32]
 8001ef2:	f003 fab1 	bl	8005458 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3310      	adds	r3, #16
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	78db      	ldrb	r3, [r3, #3]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d108      	bne.n	8001f24 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f007 fcdc 	bl	80098dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f30:	461a      	mov	r2, r3
 8001f32:	2302      	movs	r3, #2
 8001f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fcbb 	bl	80028be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f47f af2e 	bne.w	8001db8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 f98f 	bl	8006284 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f70:	d122      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d108      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fea2 	bl	8002ce4 <HAL_PCDEx_LPM_Callback>
 8001fa0:	e002      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f007 fc7a 	bl	800989c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 f961 	bl	8006284 <USB_ReadInterrupts>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fcc:	d112      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f007 fc36 	bl	8009850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ff2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 f943 	bl	8006284 <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	f040 80b7 	bne.w	800217a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2110      	movs	r1, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fa16 	bl	8005458 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002030:	e046      	b.n	80020c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203e:	461a      	mov	r2, r3
 8002040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002044:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002056:	0151      	lsls	r1, r2, #5
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	440a      	add	r2, r1
 800205c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002078:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208a:	0151      	lsls	r1, r2, #5
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	440a      	add	r2, r1
 8002090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002098:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	3301      	adds	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	461a      	mov	r2, r3
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d3b2      	bcc.n	8002032 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7bdb      	ldrb	r3, [r3, #15]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d016      	beq.n	8002116 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f8:	f043 030b 	orr.w	r3, r3, #11
 80020fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800210e:	f043 030b 	orr.w	r3, r3, #11
 8002112:	6453      	str	r3, [r2, #68]	; 0x44
 8002114:	e015      	b.n	8002142 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002128:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800212c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213c:	f043 030b 	orr.w	r3, r3, #11
 8002140:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002150:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002154:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002164:	461a      	mov	r2, r3
 8002166:	f004 f951 	bl	800640c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 f880 	bl	8006284 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d123      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f916 	bl	80063c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 f9d3 	bl	800554a <USB_GetDevSpeed>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	f001 fa08 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80021b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ba:	461a      	mov	r2, r3
 80021bc:	4620      	mov	r0, r4
 80021be:	f002 fed7 	bl	8004f70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f007 fb1b 	bl	80097fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 f851 	bl	8006284 <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d10a      	bne.n	8002202 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f007 faf8 	bl	80097e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f002 0208 	and.w	r2, r2, #8
 8002200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f83c 	bl	8006284 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d123      	bne.n	800225e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e014      	b.n	8002252 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f203 2357 	addw	r3, r3, #599	; 0x257
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fb08 	bl	800285c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3301      	adds	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	4293      	cmp	r3, r2
 800225c:	d3e4      	bcc.n	8002228 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f80e 	bl	8006284 <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002272:	d13c      	bne.n	80022ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	e02b      	b.n	80022d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3318      	adds	r3, #24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d115      	bne.n	80022cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da12      	bge.n	80022cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3317      	adds	r3, #23
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fac8 	bl	800285c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3301      	adds	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	791b      	ldrb	r3, [r3, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3cd      	bcc.n	800227a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 ffc6 	bl	8006284 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002302:	d156      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002304:	2301      	movs	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e045      	b.n	8002396 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d12e      	bne.n	8002390 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002332:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	da2b      	bge.n	8002390 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002344:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002348:	429a      	cmp	r2, r3
 800234a:	d121      	bne.n	8002390 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238c:	6053      	str	r3, [r2, #4]
            break;
 800238e:	e008      	b.n	80023a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	4293      	cmp	r3, r2
 80023a0:	d3b3      	bcc.n	800230a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 ff64 	bl	8006284 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d10a      	bne.n	80023de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f007 fa99 	bl	8009900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 ff4e 	bl	8006284 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d115      	bne.n	800241e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f007 fa89 	bl	800991c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	e000      	b.n	800241e <HAL_PCD_IRQHandler+0x93c>
      return;
 800241c:	bf00      	nop
    }
  }
}
 800241e:	3734      	adds	r7, #52	; 0x34
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_SetAddress+0x1a>
 800243a:	2302      	movs	r3, #2
 800243c:	e012      	b.n	8002464 <HAL_PCD_SetAddress+0x40>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fead 	bl	80061b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	70fb      	strb	r3, [r7, #3]
 800247e:	460b      	mov	r3, r1
 8002480:	803b      	strh	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800248a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248e:	2b00      	cmp	r3, #0
 8002490:	da0f      	bge.n	80024b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3310      	adds	r3, #16
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	705a      	strb	r2, [r3, #1]
 80024b0:	e00f      	b.n	80024d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024de:	883a      	ldrh	r2, [r7, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	78ba      	ldrb	r2, [r7, #2]
 80024e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024fc:	78bb      	ldrb	r3, [r7, #2]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d102      	bne.n	8002508 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_Open+0xaa>
 8002512:	2302      	movs	r3, #2
 8002514:	e00e      	b.n	8002534 <HAL_PCD_EP_Open+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f835 	bl	8005594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002532:	7afb      	ldrb	r3, [r7, #11]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da0f      	bge.n	8002570 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3310      	adds	r3, #16
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00f      	b.n	8002590 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_EP_Close+0x6e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e00e      	b.n	80025c8 <HAL_PCD_EP_Close+0x8c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 f873 	bl	80056a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	f003 020f 	and.w	r2, r3, #15
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002612:	7afb      	ldrb	r3, [r7, #11]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	b2da      	uxtb	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	799b      	ldrb	r3, [r3, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	799b      	ldrb	r3, [r3, #6]
 8002634:	461a      	mov	r2, r3
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	f003 f910 	bl	800585c <USB_EPStartXfer>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002668:	681b      	ldr	r3, [r3, #0]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	460b      	mov	r3, r1
 8002684:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3310      	adds	r3, #16
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	799b      	ldrb	r3, [r3, #6]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	799b      	ldrb	r3, [r3, #6]
 80026d8:	461a      	mov	r2, r3
 80026da:	6979      	ldr	r1, [r7, #20]
 80026dc:	f003 f8be 	bl	800585c <USB_EPStartXfer>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	7912      	ldrb	r2, [r2, #4]
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04f      	b.n	80027a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da0f      	bge.n	8002730 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	3310      	adds	r3, #16
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	705a      	strb	r2, [r3, #1]
 800272e:	e00d      	b.n	800274c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	3304      	adds	r3, #4
 8002744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_PCD_EP_SetStall+0x82>
 8002768:	2302      	movs	r3, #2
 800276a:	e01d      	b.n	80027a8 <HAL_PCD_EP_SetStall+0xbe>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fc46 	bl	800600c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7999      	ldrb	r1, [r3, #6]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002798:	461a      	mov	r2, r3
 800279a:	f003 fe37 	bl	800640c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	7912      	ldrb	r2, [r2, #4]
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e042      	b.n	8002854 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da0f      	bge.n	80027f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3310      	adds	r3, #16
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	705a      	strb	r2, [r3, #1]
 80027f4:	e00f      	b.n	8002816 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_EP_ClrStall+0x86>
 8002832:	2302      	movs	r3, #2
 8002834:	e00e      	b.n	8002854 <HAL_PCD_EP_ClrStall+0xa4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fc4f 	bl	80060e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0c      	bge.n	800288a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3310      	adds	r3, #16
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e00c      	b.n	80028a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68f9      	ldr	r1, [r7, #12]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fa6e 	bl	8005d8c <USB_EPStopXfer>
 80028b0:	4603      	mov	r3, r0
 80028b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028b4:	7afb      	ldrb	r3, [r7, #11]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b08a      	sub	sp, #40	; 0x28
 80028c2:	af02      	add	r7, sp, #8
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3310      	adds	r3, #16
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d901      	bls.n	80028f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06b      	b.n	80029ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	d902      	bls.n	8002912 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3303      	adds	r3, #3
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800291a:	e02a      	b.n	8002972 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d902      	bls.n	8002938 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3303      	adds	r3, #3
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4603      	mov	r3, r0
 8002954:	6978      	ldr	r0, [r7, #20]
 8002956:	f003 fac3 	bl	8005ee0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	441a      	add	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	441a      	add	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	429a      	cmp	r2, r3
 8002986:	d809      	bhi.n	800299c <PCD_WriteEmptyTxFifo+0xde>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002990:	429a      	cmp	r2, r3
 8002992:	d203      	bcs.n	800299c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1bf      	bne.n	800291c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d811      	bhi.n	80029cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	2201      	movs	r2, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029c8:	4013      	ands	r3, r2
 80029ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	333c      	adds	r3, #60	; 0x3c
 80029f0:	3304      	adds	r3, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	799b      	ldrb	r3, [r3, #6]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d17b      	bne.n	8002b06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4a61      	ldr	r2, [pc, #388]	; (8002ba0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	f240 80b9 	bls.w	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80b3 	beq.w	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a40:	6093      	str	r3, [r2, #8]
 8002a42:	e0a7      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	6093      	str	r3, [r2, #8]
 8002a60:	e098      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 8093 	bne.w	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d90f      	bls.n	8002a96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	e07e      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	0159      	lsls	r1, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	1ad2      	subs	r2, r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d114      	bne.n	8002af8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	f003 fc92 	bl	800640c <USB_EP0_OutStart>
 8002ae8:	e006      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	441a      	add	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f006 fe3a 	bl	8009778 <HAL_PCD_DataOutStageCallback>
 8002b04:	e046      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d124      	bne.n	8002b58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2a:	6093      	str	r3, [r2, #8]
 8002b2c:	e032      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	461a      	mov	r2, r3
 8002b46:	2320      	movs	r3, #32
 8002b48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f006 fe11 	bl	8009778 <HAL_PCD_DataOutStageCallback>
 8002b56:	e01d      	b.n	8002b94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d114      	bne.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b80:	461a      	mov	r2, r3
 8002b82:	2100      	movs	r1, #0
 8002b84:	f003 fc42 	bl	800640c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f006 fdf2 	bl	8009778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	4f54300a 	.word	0x4f54300a
 8002ba4:	4f54310a 	.word	0x4f54310a

08002ba8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d90e      	bls.n	8002bfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f006 fda9 	bl	8009754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d90c      	bls.n	8002c24 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	799b      	ldrb	r3, [r3, #6]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f003 fbf4 	bl	800640c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	4f54300a 	.word	0x4f54300a

08002c34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
 8002c40:	4613      	mov	r3, r2
 8002c42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c52:	883b      	ldrh	r3, [r7, #0]
 8002c54:	0419      	lsls	r1, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c60:	e028      	b.n	8002cb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e00d      	b.n	8002c92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	3340      	adds	r3, #64	; 0x40
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3ec      	bcc.n	8002c76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c9c:	883b      	ldrh	r3, [r7, #0]
 8002c9e:	0418      	lsls	r0, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4302      	orrs	r2, r0
 8002cac:	3340      	adds	r3, #64	; 0x40
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f9b0 	bl	8001118 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f9ac 	bl	8001118 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f99c 	bl	8001118 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe f998 	bl	8001118 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe f951 	bl	8001118 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f94d 	bl	8001118 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f930 	bl	8001118 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe f92c 	bl	8001118 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f910 	bl	8001118 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe f90c 	bl	8001118 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe f8f9 	bl	8001118 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe f8f5 	bl	8001118 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f8b5 	bl	8001118 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe f8b1 	bl	8001118 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe f876 	bl	8001118 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe f872 	bl	8001118 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe f860 	bl	8001118 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe f85c 	bl	8001118 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe f830 	bl	8001118 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe f82c 	bl	8001118 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe f805 	bl	8001118 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe f801 	bl	8001118 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd ffee 	bl	8001118 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd ffea 	bl	8001118 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd ff1c 	bl	8001118 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd ff18 	bl	8001118 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fe7c 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	0800a7f0 	.word	0x0800a7f0
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b094      	sub	sp, #80	; 0x50
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	2300      	movs	r3, #0
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	2300      	movs	r3, #0
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80e1 	bhi.w	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e0db      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b73      	ldr	r3, [pc, #460]	; (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033f0:	e0db      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
 8003418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
 8003426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4621      	mov	r1, r4
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	6139      	str	r1, [r7, #16]
 8003448:	4629      	mov	r1, r5
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800345c:	4659      	mov	r1, fp
 800345e:	018b      	lsls	r3, r1, #6
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003466:	4651      	mov	r1, sl
 8003468:	018a      	lsls	r2, r1, #6
 800346a:	4651      	mov	r1, sl
 800346c:	ebb2 0801 	subs.w	r8, r2, r1
 8003470:	4659      	mov	r1, fp
 8003472:	eb63 0901 	sbc.w	r9, r3, r1
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	4623      	mov	r3, r4
 8003490:	eb18 0303 	adds.w	r3, r8, r3
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	462b      	mov	r3, r5
 8003498:	eb49 0303 	adc.w	r3, r9, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034aa:	4629      	mov	r1, r5
 80034ac:	024b      	lsls	r3, r1, #9
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034b4:	4621      	mov	r1, r4
 80034b6:	024a      	lsls	r2, r1, #9
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c8:	f7fc fed2 	bl	8000270 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d4:	e058      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	4611      	mov	r1, r2
 80034e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003502:	0150      	lsls	r0, r2, #5
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4641      	mov	r1, r8
 800350a:	ebb2 0a01 	subs.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb63 0b01 	sbc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003528:	ebb2 040a 	subs.w	r4, r2, sl
 800352c:	eb63 050b 	sbc.w	r5, r3, fp
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	464b      	mov	r3, r9
 800354c:	eb45 0303 	adc.w	r3, r5, r3
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	61fa      	str	r2, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	f7fc fe78 	bl	8000270 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800359a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3750      	adds	r7, #80	; 0x50
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff0 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800a800 	.word	0x0800a800

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	0800a800 	.word	0x0800a800

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003650:	2b00      	cmp	r3, #0
 8003652:	d035      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003654:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800365a:	f7fd fd5d 	bl	8001118 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003662:	f7fd fd59 	bl	8001118 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0b0      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003674:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	019a      	lsls	r2, r3, #6
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	071b      	lsls	r3, r3, #28
 800368c:	4955      	ldr	r1, [pc, #340]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003694:	4b52      	ldr	r3, [pc, #328]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800369a:	f7fd fd3d 	bl	8001118 <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036a2:	f7fd fd39 	bl	8001118 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e090      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8083 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ea:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3e      	ldr	r2, [pc, #248]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fd fd0f 	bl	8001118 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fd fd0b 	bl	8001118 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e062      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371c:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d028      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003756:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d114      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fcd9 	bl	8001118 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fcd5 	bl	8001118 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e02a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003798:	d10d      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ae:	490d      	ldr	r1, [pc, #52]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037c0:	6093      	str	r3, [r2, #8]
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	4905      	ldr	r1, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	42470068 	.word	0x42470068
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470e40 	.word	0x42470e40

080037f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7f5b      	ldrb	r3, [r3, #29]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fa0c 	bl	8000c34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d055      	beq.n	80038dc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	22ca      	movs	r2, #202	; 0xca
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2253      	movs	r2, #83	; 0x53
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8dd 	bl	8003a00 <RTC_EnterInitMode>
 8003846:	4603      	mov	r3, r0
 8003848:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d12c      	bne.n	80038aa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800385e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003862:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6919      	ldr	r1, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	041a      	lsls	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8e4 	bl	8003a6e <RTC_ExitInitMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d110      	bne.n	80038d2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
 80038da:	e001      	b.n	80038e0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003928:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800392c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	0d9b      	lsrs	r3, r3, #22
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11a      	bne.n	80039a8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f89e 	bl	8003ab8 <RTC_Bcd2ToByte>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f895 	bl	8003ab8 <RTC_Bcd2ToByte>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	789b      	ldrb	r3, [r3, #2]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f88c 	bl	8003ab8 <RTC_Bcd2ToByte>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_RTC_WaitForSynchro+0x48>)
 80039c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c8:	f7fd fba6 	bl	8001118 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039ce:	e009      	b.n	80039e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039d0:	f7fd fba2 	bl	8001118 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039de:	d901      	bls.n	80039e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e007      	b.n	80039f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ee      	beq.n	80039d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00017f5f 	.word	0x00017f5f

08003a00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d122      	bne.n	8003a64 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fb73 	bl	8001118 <HAL_GetTick>
 8003a32:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003a34:	e00c      	b.n	8003a50 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a36:	f7fd fb6f 	bl	8001118 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a44:	d904      	bls.n	8003a50 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <RTC_EnterInitMode+0x64>
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d1e8      	bne.n	8003a36 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a88:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff8b 	bl	80039b4 <HAL_RTC_WaitForSynchro>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07b      	b.n	8003bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d009      	beq.n	8003b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
 8003b1e:	e005      	b.n	8003b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd f8d4 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0104 	and.w	r1, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f003 0210 	and.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
    return;
 8003c46:	e0ce      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_SPI_IRQHandler+0x5e>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    return;
 8003c64:	e0bf      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_SPI_IRQHandler+0x7e>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b0 	beq.w	8003de6 <HAL_SPI_IRQHandler+0x1de>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80aa 	beq.w	8003de6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d011      	beq.n	8003ccc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	e00b      	b.n	8003ce4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
        return;
 8003ce2:	e080      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d014      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d04f      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d52:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_SPI_IRQHandler+0x168>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d034      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0203 	bic.w	r2, r2, #3
 8003d7e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_SPI_IRQHandler+0x1e4>)
 8003d8e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd fb70 	bl	800147a <HAL_DMA_Abort_IT>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <HAL_SPI_IRQHandler+0x1e4>)
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fb5a 	bl	800147a <HAL_DMA_Abort_IT>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003dd8:	e003      	b.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f808 	bl	8003df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003de0:	e000      	b.n	8003de4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003de2:	bf00      	nop
    return;
 8003de4:	bf00      	nop
  }
}
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08003e05 	.word	0x08003e05

08003df0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff ffe6 	bl	8003df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e038      	b.n	8003eb4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7fc fc44 	bl	80006e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3308      	adds	r3, #8
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 ff46 	bl	8004cf8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	f000 ffa8 	bl	8004dcc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6858      	ldr	r0, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	f000 ffd5 	bl	8004e38 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6892      	ldr	r2, [r2, #8]
 8003ea2:	f041 0101 	orr.w	r1, r1, #1
 8003ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e042      	b.n	8003f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd f838 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fc85 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b0ba      	sub	sp, #232	; 0xe8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x66>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fb69 	bl	8004692 <UART_Receive_IT>
      return;
 8003fc0:	e25b      	b.n	800447a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80de 	beq.w	8004188 <HAL_UART_IRQHandler+0x22c>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80d1 	beq.w	8004188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_UART_IRQHandler+0xae>
 8003ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_UART_IRQHandler+0xd2>
 8004016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_UART_IRQHandler+0xf6>
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_UART_IRQHandler+0x126>
 800405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 81f2 	beq.w	8004470 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_UART_IRQHandler+0x14e>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 faf4 	bl	8004692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_UART_IRQHandler+0x17a>
 80040ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d04f      	beq.n	8004176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9fc 	bl	80044d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d141      	bne.n	800416e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800411a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800412e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1d9      	bne.n	80040ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d013      	beq.n	8004166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	4a7e      	ldr	r2, [pc, #504]	; (800433c <HAL_UART_IRQHandler+0x3e0>)
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd f995 	bl	800147a <HAL_DMA_Abort_IT>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004160:	4610      	mov	r0, r2
 8004162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	e00e      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f99e 	bl	80044a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	e00a      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f99a 	bl	80044a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e006      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f996 	bl	80044a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004182:	e175      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	bf00      	nop
    return;
 8004186:	e173      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	f040 814f 	bne.w	8004430 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8148 	beq.w	8004430 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8141 	beq.w	8004430 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	f040 80b6 	bne.w	8004340 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8145 	beq.w	8004474 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f080 813e 	bcs.w	8004474 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	f000 8088 	beq.w	800431e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800423a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800423e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d9      	bne.n	800420e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800426a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800427e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e1      	bne.n	800425a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004300:	65ba      	str	r2, [r7, #88]	; 0x58
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800430e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e3      	bne.n	80042dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd f83e 	bl	800139a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	b29b      	uxth	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8c1 	bl	80044bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800433a:	e09b      	b.n	8004474 <HAL_UART_IRQHandler+0x518>
 800433c:	0800459b 	.word	0x0800459b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 808e 	beq.w	8004478 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800435c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8089 	beq.w	8004478 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800438a:	647a      	str	r2, [r7, #68]	; 0x44
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	623b      	str	r3, [r7, #32]
   return(result);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3314      	adds	r3, #20
 80043be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043c2:	633a      	str	r2, [r7, #48]	; 0x30
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e3      	bne.n	800439e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0310 	bic.w	r3, r3, #16
 80043fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e3      	bne.n	80043e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f847 	bl	80044bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800442e:	e023      	b.n	8004478 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_UART_IRQHandler+0x4f4>
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8ba 	bl	80045c2 <UART_Transmit_IT>
    return;
 800444e:	e014      	b.n	800447a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <HAL_UART_IRQHandler+0x51e>
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8fa 	bl	8004662 <UART_EndTransmit_IT>
    return;
 800446e:	e004      	b.n	800447a <HAL_UART_IRQHandler+0x51e>
    return;
 8004470:	bf00      	nop
 8004472:	e002      	b.n	800447a <HAL_UART_IRQHandler+0x51e>
      return;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_UART_IRQHandler+0x51e>
      return;
 8004478:	bf00      	nop
  }
}
 800447a:	37e8      	adds	r7, #232	; 0xe8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b095      	sub	sp, #84	; 0x54
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fc:	643a      	str	r2, [r7, #64]	; 0x40
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	64bb      	str	r3, [r7, #72]	; 0x48
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d119      	bne.n	8004580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60bb      	str	r3, [r7, #8]
   return(result);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f023 0310 	bic.w	r3, r3, #16
 8004562:	647b      	str	r3, [r7, #68]	; 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800456c:	61ba      	str	r2, [r7, #24]
 800456e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800458e:	bf00      	nop
 8004590:	3754      	adds	r7, #84	; 0x54
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff77 	bl	80044a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b21      	cmp	r3, #33	; 0x21
 80045d4:	d13e      	bne.n	8004654 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d114      	bne.n	800460a <UART_Transmit_IT+0x48>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d110      	bne.n	800460a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	621a      	str	r2, [r3, #32]
 8004608:	e008      	b.n	800461c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6211      	str	r1, [r2, #32]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29b      	uxth	r3, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4619      	mov	r1, r3
 800462a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fefc 	bl	8004480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b08c      	sub	sp, #48	; 0x30
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b22      	cmp	r3, #34	; 0x22
 80046a4:	f040 80ae 	bne.w	8004804 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d117      	bne.n	80046e2 <UART_Receive_IT+0x50>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d113      	bne.n	80046e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	1c9a      	adds	r2, r3, #2
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
 80046e0:	e026      	b.n	8004730 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d007      	beq.n	8004706 <UART_Receive_IT+0x74>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <UART_Receive_IT+0x82>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e008      	b.n	8004726 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004740:	2b00      	cmp	r3, #0
 8004742:	d15d      	bne.n	8004800 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0220 	bic.w	r2, r2, #32
 8004752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	2b01      	cmp	r3, #1
 8004788:	d135      	bne.n	80047f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 0310 	bic.w	r3, r3, #16
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	623a      	str	r2, [r7, #32]
 80047b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	69f9      	ldr	r1, [r7, #28]
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e5      	bne.n	8004790 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d10a      	bne.n	80047e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fe64 	bl	80044bc <HAL_UARTEx_RxEventCallback>
 80047f4:	e002      	b.n	80047fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fe4c 	bl	8004494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e002      	b.n	8004806 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3730      	adds	r7, #48	; 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b0c0      	sub	sp, #256	; 0x100
 8004816:	af00      	add	r7, sp, #0
 8004818:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	68d9      	ldr	r1, [r3, #12]
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	ea40 0301 	orr.w	r3, r0, r1
 8004838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	431a      	orrs	r2, r3
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004868:	f021 010c 	bic.w	r1, r1, #12
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004876:	430b      	orrs	r3, r1
 8004878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	ea40 0301 	orr.w	r3, r0, r1
 8004896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8f      	ldr	r3, [pc, #572]	; (8004adc <UART_SetConfig+0x2cc>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d005      	beq.n	80048b0 <UART_SetConfig+0xa0>
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8d      	ldr	r3, [pc, #564]	; (8004ae0 <UART_SetConfig+0x2d0>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d104      	bne.n	80048ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fe fea8 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 80048b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048b8:	e003      	b.n	80048c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7fe fe8f 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 80048be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	f040 810c 	bne.w	8004ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	1891      	adds	r1, r2, r2
 80048e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ea:	415b      	adcs	r3, r3
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048f2:	4621      	mov	r1, r4
 80048f4:	eb12 0801 	adds.w	r8, r2, r1
 80048f8:	4629      	mov	r1, r5
 80048fa:	eb43 0901 	adc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004920:	462b      	mov	r3, r5
 8004922:	eb49 0303 	adc.w	r3, r9, r3
 8004926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800493a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800493e:	460b      	mov	r3, r1
 8004940:	18db      	adds	r3, r3, r3
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	4613      	mov	r3, r2
 8004946:	eb42 0303 	adc.w	r3, r2, r3
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004954:	f7fb fc8c 	bl	8000270 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4b61      	ldr	r3, [pc, #388]	; (8004ae4 <UART_SetConfig+0x2d4>)
 800495e:	fba3 2302 	umull	r2, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	011c      	lsls	r4, r3, #4
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004970:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004980:	415b      	adcs	r3, r3
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004988:	4641      	mov	r1, r8
 800498a:	eb12 0a01 	adds.w	sl, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb43 0b01 	adc.w	fp, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a8:	4692      	mov	sl, r2
 80049aa:	469b      	mov	fp, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	eb1a 0303 	adds.w	r3, sl, r3
 80049b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb4b 0303 	adc.w	r3, fp, r3
 80049bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	647b      	str	r3, [r7, #68]	; 0x44
 80049e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049ea:	f7fb fc41 	bl	8000270 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <UART_SetConfig+0x2d4>)
 80049f6:	fba3 2301 	umull	r2, r3, r3, r1
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2264      	movs	r2, #100	; 0x64
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	1acb      	subs	r3, r1, r3
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a18:	441c      	add	r4, r3
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a34:	415b      	adcs	r3, r3
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	1851      	adds	r1, r2, r1
 8004a40:	6339      	str	r1, [r7, #48]	; 0x30
 8004a42:	4649      	mov	r1, r9
 8004a44:	414b      	adcs	r3, r1
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a54:	4659      	mov	r1, fp
 8004a56:	00cb      	lsls	r3, r1, #3
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5e:	4651      	mov	r1, sl
 8004a60:	00ca      	lsls	r2, r1, #3
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aa6:	f7fb fbe3 	bl	8000270 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2164      	movs	r1, #100	; 0x64
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	3332      	adds	r3, #50	; 0x32
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 0207 	and.w	r2, r3, #7
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4422      	add	r2, r4
 8004ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ad8:	e106      	b.n	8004ce8 <UART_SetConfig+0x4d8>
 8004ada:	bf00      	nop
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	6239      	str	r1, [r7, #32]
 8004b02:	415b      	adcs	r3, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	1854      	adds	r4, r2, r1
 8004b0e:	4649      	mov	r1, r9
 8004b10:	eb43 0501 	adc.w	r5, r3, r1
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b30:	464b      	mov	r3, r9
 8004b32:	eb45 0303 	adc.w	r3, r5, r3
 8004b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b56:	4629      	mov	r1, r5
 8004b58:	008b      	lsls	r3, r1, #2
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b60:	4621      	mov	r1, r4
 8004b62:	008a      	lsls	r2, r1, #2
 8004b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b68:	f7fb fb82 	bl	8000270 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b60      	ldr	r3, [pc, #384]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011c      	lsls	r4, r3, #4
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	61b9      	str	r1, [r7, #24]
 8004b94:	415b      	adcs	r3, r3
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6139      	str	r1, [r7, #16]
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfe:	4641      	mov	r1, r8
 8004c00:	008a      	lsls	r2, r1, #2
 8004c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c06:	f7fb fb33 	bl	8000270 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004c12:	fba3 2301 	umull	r2, r3, r3, r1
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2264      	movs	r2, #100	; 0x64
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	1acb      	subs	r3, r1, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a33      	ldr	r2, [pc, #204]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c30:	441c      	add	r4, r3
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	673b      	str	r3, [r7, #112]	; 0x70
 8004c3a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c82:	464b      	mov	r3, r9
 8004c84:	460a      	mov	r2, r1
 8004c86:	eb42 0303 	adc.w	r3, r2, r3
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	663b      	str	r3, [r7, #96]	; 0x60
 8004c96:	667a      	str	r2, [r7, #100]	; 0x64
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cb6:	f7fb fadb 	bl	8000270 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 020f 	and.w	r2, r3, #15
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4422      	add	r2, r4
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	f023 0101 	bic.w	r1, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d102      	bne.n	8004d28 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004d22:	2340      	movs	r3, #64	; 0x40
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e001      	b.n	8004d2c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004d38:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004d3e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004d44:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004d4a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004d50:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004d56:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004d5c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004d62:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004d68:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <FSMC_NORSRAM_Init+0xd0>)
 8004d88:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d90:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004d98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	ea02 0103 	and.w	r1, r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4319      	orrs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	0008fb7f 	.word	0x0008fb7f

08004dcc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	051b      	lsls	r3, r3, #20
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	3b02      	subs	r3, #2
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	3201      	adds	r2, #1
 8004e20:	4319      	orrs	r1, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4c:	d11d      	bne.n	8004e8a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	6811      	ldr	r1, [r2, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	4311      	orrs	r1, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	6892      	ldr	r2, [r2, #8]
 8004e6a:	0212      	lsls	r2, r2, #8
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	6992      	ldr	r2, [r2, #24]
 8004e72:	4311      	orrs	r1, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68d2      	ldr	r2, [r2, #12]
 8004e78:	0412      	lsls	r2, r2, #16
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	ea43 0102 	orr.w	r1, r3, r2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e88:	e005      	b.n	8004e96 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	cff00000 	.word	0xcff00000

08004ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	f107 001c 	add.w	r0, r7, #28
 8004eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d123      	bne.n	8004f0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d105      	bne.n	8004efe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f001 fae2 	bl	80064c8 <USB_CoreReset>
 8004f04:	4603      	mov	r3, r0
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	e01b      	b.n	8004f42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fad6 	bl	80064c8 <USB_CoreReset>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
 8004f34:	e005      	b.n	8004f42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f42:	7fbb      	ldrb	r3, [r7, #30]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10b      	bne.n	8004f60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f043 0206 	orr.w	r2, r3, #6
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f6c:	b004      	add	sp, #16
 8004f6e:	4770      	bx	lr

08004f70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d165      	bne.n	8005050 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a41      	ldr	r2, [pc, #260]	; (800508c <USB_SetTurnaroundTime+0x11c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d906      	bls.n	8004f9a <USB_SetTurnaroundTime+0x2a>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a40      	ldr	r2, [pc, #256]	; (8005090 <USB_SetTurnaroundTime+0x120>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d202      	bcs.n	8004f9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f94:	230f      	movs	r3, #15
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e062      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <USB_SetTurnaroundTime+0x120>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d306      	bcc.n	8004fb0 <USB_SetTurnaroundTime+0x40>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <USB_SetTurnaroundTime+0x124>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d202      	bcs.n	8004fb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004faa:	230e      	movs	r3, #14
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e057      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a38      	ldr	r2, [pc, #224]	; (8005094 <USB_SetTurnaroundTime+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d306      	bcc.n	8004fc6 <USB_SetTurnaroundTime+0x56>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a37      	ldr	r2, [pc, #220]	; (8005098 <USB_SetTurnaroundTime+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d202      	bcs.n	8004fc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004fc0:	230d      	movs	r3, #13
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e04c      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a33      	ldr	r2, [pc, #204]	; (8005098 <USB_SetTurnaroundTime+0x128>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d306      	bcc.n	8004fdc <USB_SetTurnaroundTime+0x6c>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a32      	ldr	r2, [pc, #200]	; (800509c <USB_SetTurnaroundTime+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d802      	bhi.n	8004fdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e041      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a2f      	ldr	r2, [pc, #188]	; (800509c <USB_SetTurnaroundTime+0x12c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d906      	bls.n	8004ff2 <USB_SetTurnaroundTime+0x82>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <USB_SetTurnaroundTime+0x130>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d802      	bhi.n	8004ff2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004fec:	230b      	movs	r3, #11
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e036      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <USB_SetTurnaroundTime+0x130>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d906      	bls.n	8005008 <USB_SetTurnaroundTime+0x98>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <USB_SetTurnaroundTime+0x134>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d802      	bhi.n	8005008 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005002:	230a      	movs	r3, #10
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e02b      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <USB_SetTurnaroundTime+0x134>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d906      	bls.n	800501e <USB_SetTurnaroundTime+0xae>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <USB_SetTurnaroundTime+0x138>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d202      	bcs.n	800501e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005018:	2309      	movs	r3, #9
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e020      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <USB_SetTurnaroundTime+0x138>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d306      	bcc.n	8005034 <USB_SetTurnaroundTime+0xc4>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a20      	ldr	r2, [pc, #128]	; (80050ac <USB_SetTurnaroundTime+0x13c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d802      	bhi.n	8005034 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800502e:	2308      	movs	r3, #8
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e015      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <USB_SetTurnaroundTime+0x13c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d906      	bls.n	800504a <USB_SetTurnaroundTime+0xda>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <USB_SetTurnaroundTime+0x140>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d202      	bcs.n	800504a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005044:	2307      	movs	r3, #7
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e00a      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800504a:	2306      	movs	r3, #6
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e007      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005056:	2309      	movs	r3, #9
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e001      	b.n	8005060 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800505c:	2309      	movs	r3, #9
 800505e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	00d8acbf 	.word	0x00d8acbf
 8005090:	00e4e1c0 	.word	0x00e4e1c0
 8005094:	00f42400 	.word	0x00f42400
 8005098:	01067380 	.word	0x01067380
 800509c:	011a499f 	.word	0x011a499f
 80050a0:	01312cff 	.word	0x01312cff
 80050a4:	014ca43f 	.word	0x014ca43f
 80050a8:	016e3600 	.word	0x016e3600
 80050ac:	01a6ab1f 	.word	0x01a6ab1f
 80050b0:	01e84800 	.word	0x01e84800

080050b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f043 0201 	orr.w	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d115      	bne.n	8005146 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005126:	200a      	movs	r0, #10
 8005128:	f7fc f802 	bl	8001130 <HAL_Delay>
      ms += 10U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	330a      	adds	r3, #10
 8005130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 f939 	bl	80063aa <USB_GetMode>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d01e      	beq.n	800517c <USB_SetCurrentMode+0x84>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2bc7      	cmp	r3, #199	; 0xc7
 8005142:	d9f0      	bls.n	8005126 <USB_SetCurrentMode+0x2e>
 8005144:	e01a      	b.n	800517c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005158:	200a      	movs	r0, #10
 800515a:	f7fb ffe9 	bl	8001130 <HAL_Delay>
      ms += 10U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	330a      	adds	r3, #10
 8005162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f920 	bl	80063aa <USB_GetMode>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <USB_SetCurrentMode+0x84>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2bc7      	cmp	r3, #199	; 0xc7
 8005174:	d9f0      	bls.n	8005158 <USB_SetCurrentMode+0x60>
 8005176:	e001      	b.n	800517c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e005      	b.n	8005188 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2bc8      	cmp	r3, #200	; 0xc8
 8005180:	d101      	bne.n	8005186 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e009      	b.n	80051c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3340      	adds	r3, #64	; 0x40
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0e      	cmp	r3, #14
 80051c8:	d9f2      	bls.n	80051b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11c      	bne.n	800520c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
 800520a:	e00b      	b.n	8005224 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005230:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10d      	bne.n	8005254 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005240:	2100      	movs	r1, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f968 	bl	8005518 <USB_SetDevSpeed>
 8005248:	e008      	b.n	800525c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800524a:	2101      	movs	r1, #1
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f963 	bl	8005518 <USB_SetDevSpeed>
 8005252:	e003      	b.n	800525c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005254:	2103      	movs	r1, #3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f95e 	bl	8005518 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800525c:	2110      	movs	r1, #16
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8fa 	bl	8005458 <USB_FlushTxFifo>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f924 	bl	80054bc <USB_FlushRxFifo>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e043      	b.n	8005330 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052be:	d118      	bne.n	80052f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	461a      	mov	r2, r3
 80052d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e013      	b.n	8005304 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e008      	b.n	8005304 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	461a      	mov	r2, r3
 8005300:	2300      	movs	r3, #0
 8005302:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	461a      	mov	r2, r3
 8005324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005334:	461a      	mov	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4293      	cmp	r3, r2
 800533a:	d3b5      	bcc.n	80052a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e043      	b.n	80053ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005358:	d118      	bne.n	800538c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	461a      	mov	r2, r3
 800536e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e013      	b.n	800539e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e008      	b.n	800539e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	461a      	mov	r2, r3
 80053be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3301      	adds	r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053ce:	461a      	mov	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d3b5      	bcc.n	8005342 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f043 0210 	orr.w	r2, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <USB_DevInit+0x2c4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005418:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f043 0208 	orr.w	r2, r3, #8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800542c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800543c:	f043 0304 	orr.w	r3, r3, #4
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005450:	b004      	add	sp, #16
 8005452:	4770      	bx	lr
 8005454:	803c3800 	.word	0x803c3800

08005458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005472:	d901      	bls.n	8005478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e01b      	b.n	80054b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	daf2      	bge.n	8005466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	019b      	lsls	r3, r3, #6
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800549c:	d901      	bls.n	80054a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e006      	b.n	80054b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d0f0      	beq.n	8005490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054d4:	d901      	bls.n	80054da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e018      	b.n	800550c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	daf2      	bge.n	80054c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2210      	movs	r2, #16
 80054ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054f8:	d901      	bls.n	80054fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e006      	b.n	800550c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b10      	cmp	r3, #16
 8005508:	d0f0      	beq.n	80054ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0306 	and.w	r3, r3, #6
 8005562:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]
 800556e:	e00a      	b.n	8005586 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d002      	beq.n	800557c <USB_GetDevSpeed+0x32>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d102      	bne.n	8005582 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800557c:	2302      	movs	r3, #2
 800557e:	75fb      	strb	r3, [r7, #23]
 8005580:	e001      	b.n	8005586 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005582:	230f      	movs	r3, #15
 8005584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d13a      	bne.n	8005626 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	2101      	movs	r1, #1
 80055c2:	fa01 f303 	lsl.w	r3, r1, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	68f9      	ldr	r1, [r7, #12]
 80055ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d155      	bne.n	8005694 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	059b      	lsls	r3, r3, #22
 800560a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800560c:	4313      	orrs	r3, r2
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	e036      	b.n	8005694 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	2101      	movs	r1, #1
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	041b      	lsls	r3, r3, #16
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005644:	4313      	orrs	r3, r2
 8005646:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11a      	bne.n	8005694 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	791b      	ldrb	r3, [r3, #4]
 8005678:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800567a:	430b      	orrs	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d161      	bne.n	8005784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d6:	d11f      	bne.n	8005718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4013      	ands	r3, r2
 800573a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	2101      	movs	r1, #1
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575c:	4013      	ands	r3, r2
 800575e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0159      	lsls	r1, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	440b      	add	r3, r1
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	4619      	mov	r1, r3
 800577c:	4b35      	ldr	r3, [pc, #212]	; (8005854 <USB_DeactivateEndpoint+0x1b0>)
 800577e:	4013      	ands	r3, r2
 8005780:	600b      	str	r3, [r1, #0]
 8005782:	e060      	b.n	8005846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579a:	d11f      	bne.n	80057dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	43db      	mvns	r3, r3
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fc:	4013      	ands	r3, r2
 80057fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	43db      	mvns	r3, r3
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005820:	4013      	ands	r3, r2
 8005822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0159      	lsls	r1, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	440b      	add	r3, r1
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	4619      	mov	r1, r3
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <USB_DeactivateEndpoint+0x1b4>)
 8005842:	4013      	ands	r3, r2
 8005844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	ec337800 	.word	0xec337800
 8005858:	eff37800 	.word	0xeff37800

0800585c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 817a 	bne.w	8005b72 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d132      	bne.n	80058ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	0cdb      	lsrs	r3, r3, #19
 80058e6:	04db      	lsls	r3, r3, #19
 80058e8:	6113      	str	r3, [r2, #16]
 80058ea:	e092      	b.n	8005a12 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	0cdb      	lsrs	r3, r3, #19
 8005908:	04db      	lsls	r3, r3, #19
 800590a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800592a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800592e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11a      	bne.n	800596c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	d903      	bls.n	800594a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	e01b      	b.n	80059a4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6919      	ldr	r1, [r3, #16]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	440b      	add	r3, r1
 8005984:	1e59      	subs	r1, r3, #1
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	fbb1 f3f3 	udiv	r3, r1, r3
 800598e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005990:	4ba2      	ldr	r3, [pc, #648]	; (8005c1c <USB_EPStartXfer+0x3c0>)
 8005992:	400b      	ands	r3, r1
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	0148      	lsls	r0, r1, #5
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	4401      	add	r1, r0
 800599c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059a0:	4313      	orrs	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	0148      	lsls	r0, r1, #5
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	4401      	add	r1, r0
 80059c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d11f      	bne.n	8005a12 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d14b      	bne.n	8005ab0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	791b      	ldrb	r3, [r3, #4]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d128      	bne.n	8005a8e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d110      	bne.n	8005a6e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e00f      	b.n	8005a8e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e165      	b.n	8005d7c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ace:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	791b      	ldrb	r3, [r3, #4]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d015      	beq.n	8005b04 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 814d 	beq.w	8005d7c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	2101      	movs	r1, #1
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005afe:	4313      	orrs	r3, r2
 8005b00:	634b      	str	r3, [r1, #52]	; 0x34
 8005b02:	e13b      	b.n	8005d7c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d110      	bne.n	8005b36 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e00f      	b.n	8005b56 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	b298      	uxth	r0, r3
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4603      	mov	r3, r0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f9b8 	bl	8005ee0 <USB_WritePacket>
 8005b70:	e104      	b.n	8005d7c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	0cdb      	lsrs	r3, r3, #19
 8005b8e:	04db      	lsls	r3, r3, #19
 8005b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d131      	bne.n	8005c20 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	0148      	lsls	r0, r1, #5
 8005bee:	69f9      	ldr	r1, [r7, #28]
 8005bf0:	4401      	add	r1, r0
 8005bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c18:	6113      	str	r3, [r2, #16]
 8005c1a:	e061      	b.n	8005ce0 <USB_EPStartXfer+0x484>
 8005c1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d123      	bne.n	8005c70 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c3e:	69b9      	ldr	r1, [r7, #24]
 8005c40:	0148      	lsls	r0, r1, #5
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	4401      	add	r1, r0
 8005c46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6c:	6113      	str	r3, [r2, #16]
 8005c6e:	e037      	b.n	8005ce0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	1e5a      	subs	r2, r3, #1
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	8afa      	ldrh	r2, [r7, #22]
 8005c8c:	fb03 f202 	mul.w	r2, r3, r2
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	04d9      	lsls	r1, r3, #19
 8005ca6:	4b38      	ldr	r3, [pc, #224]	; (8005d88 <USB_EPStartXfer+0x52c>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	69b9      	ldr	r1, [r7, #24]
 8005cac:	0148      	lsls	r0, r1, #5
 8005cae:	69f9      	ldr	r1, [r7, #28]
 8005cb0:	4401      	add	r1, r0
 8005cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	0148      	lsls	r0, r1, #5
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10d      	bne.n	8005d02 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68d9      	ldr	r1, [r3, #12]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	460a      	mov	r2, r1
 8005d00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	791b      	ldrb	r3, [r3, #4]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d128      	bne.n	8005d5c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d110      	bne.n	8005d3c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e00f      	b.n	8005d5c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	1ff80000 	.word	0x1ff80000

08005d8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d14a      	bne.n	8005e40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc2:	f040 8086 	bne.w	8005ed2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d902      	bls.n	8005e24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
          break;
 8005e22:	e056      	b.n	8005ed2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3c:	d0e7      	beq.n	8005e0e <USB_EPStopXfer+0x82>
 8005e3e:	e048      	b.n	8005ed2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e58:	d13b      	bne.n	8005ed2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d902      	bls.n	8005eb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005eb6:	e00c      	b.n	8005ed2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed0:	d0e7      	beq.n	8005ea2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	460b      	mov	r3, r1
 8005ef0:	71fb      	strb	r3, [r7, #7]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005efe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d123      	bne.n	8005f4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f06:	88bb      	ldrh	r3, [r7, #4]
 8005f08:	3303      	adds	r3, #3
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e018      	b.n	8005f46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	031a      	lsls	r2, r3, #12
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f20:	461a      	mov	r2, r3
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	3301      	adds	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d3e2      	bcc.n	8005f14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3724      	adds	r7, #36	; 0x24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b08b      	sub	sp, #44	; 0x2c
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	e014      	b.n	8005fb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	3301      	adds	r3, #1
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	3301      	adds	r3, #1
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d3e6      	bcc.n	8005f88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fba:	8bfb      	ldrh	r3, [r7, #30]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01e      	beq.n	8005ffe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f107 0310 	add.w	r3, r7, #16
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	701a      	strb	r2, [r3, #0]
      i++;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	3301      	adds	r3, #1
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ff2:	8bfb      	ldrh	r3, [r7, #30]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1ea      	bne.n	8005fd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006000:	4618      	mov	r0, r3
 8006002:	372c      	adds	r7, #44	; 0x2c
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d12c      	bne.n	8006082 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	db12      	blt.n	8006060 <USB_EPSetStall+0x54>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800605e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e02b      	b.n	80060da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	db12      	blt.n	80060ba <USB_EPSetStall+0xae>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00f      	beq.n	80060ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d128      	bne.n	8006156 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006122:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d003      	beq.n	8006134 <USB_EPClearStall+0x4c>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d138      	bne.n	80061a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e027      	b.n	80061a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006174:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	791b      	ldrb	r3, [r3, #4]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d003      	beq.n	8006186 <USB_EPClearStall+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	791b      	ldrb	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d10f      	bne.n	80061a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ee:	4313      	orrs	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622e:	f023 0302 	bic.w	r3, r3, #2
 8006232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800625c:	f023 0303 	bic.w	r3, r3, #3
 8006260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0c1b      	lsrs	r3, r3, #16
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	b29b      	uxth	r3, r3
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4013      	ands	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006340:	68bb      	ldr	r3, [r7, #8]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	01db      	lsls	r3, r3, #7
 8006380:	b2db      	uxtb	r3, r3
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4013      	ands	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800639c:	68bb      	ldr	r3, [r7, #8]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f003 0301 	and.w	r3, r3, #1
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	460b      	mov	r3, r1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	333c      	adds	r3, #60	; 0x3c
 8006422:	3304      	adds	r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <USB_EP0_OutStart+0xb8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d90a      	bls.n	8006446 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800643c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006440:	d101      	bne.n	8006446 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e037      	b.n	80064b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006474:	f043 0318 	orr.w	r3, r3, #24
 8006478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800648c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10f      	bne.n	80064b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	4f54300a 	.word	0x4f54300a

080064c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064e0:	d901      	bls.n	80064e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e01b      	b.n	800651e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	daf2      	bge.n	80064d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800650a:	d901      	bls.n	8006510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e006      	b.n	800651e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d0f0      	beq.n	80064fe <USB_CoreReset+0x36>

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <_ZL7TP_Readv>:
volatile float X_MAGNITUDE = 0x433F;
volatile float Y_MAGNITUDE = 0x436E00F;

//Internal Touch pad command, do not call directly
static uint16_t TP_Read(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8006532:	2310      	movs	r3, #16
 8006534:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	80bb      	strh	r3, [r7, #4]

    while(i)
 800653a:	e021      	b.n	8006580 <_ZL7TP_Readv+0x54>
    {
        value <<= 1;
 800653c:	88bb      	ldrh	r3, [r7, #4]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8006542:	2201      	movs	r2, #1
 8006544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006548:	4811      	ldr	r0, [pc, #68]	; (8006590 <_ZL7TP_Readv+0x64>)
 800654a:	f7fb f96d 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800654e:	2200      	movs	r2, #0
 8006550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006554:	480e      	ldr	r0, [pc, #56]	; (8006590 <_ZL7TP_Readv+0x64>)
 8006556:	f7fb f967 	bl	8001828 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN))
 800655a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800655e:	480c      	ldr	r0, [pc, #48]	; (8006590 <_ZL7TP_Readv+0x64>)
 8006560:	f7fb f94a 	bl	80017f8 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <_ZL7TP_Readv+0x4e>
        {
            ++value;
 8006574:	88bb      	ldrh	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	80bb      	strh	r3, [r7, #4]
        }

        --i;
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	3b01      	subs	r3, #1
 800657e:	71fb      	strb	r3, [r7, #7]
    while(i)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1da      	bne.n	800653c <_ZL7TP_Readv+0x10>
    }

    return value;
 8006586:	88bb      	ldrh	r3, [r7, #4]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40020400 	.word	0x40020400

08006594 <_ZL8TP_Writeh>:

//Internal Touch pad command, do not call directly
static void TP_Write(uint8_t value)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800659e:	2308      	movs	r3, #8
 80065a0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80065a2:	2200      	movs	r2, #0
 80065a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065a8:	4813      	ldr	r0, [pc, #76]	; (80065f8 <_ZL8TP_Writeh+0x64>)
 80065aa:	f7fb f93d 	bl	8001828 <HAL_GPIO_WritePin>
	
    while(i)
 80065ae:	e01a      	b.n	80065e6 <_ZL8TP_Writeh+0x52>
    {

		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET ); // prepare bit of data
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065bc:	480e      	ldr	r0, [pc, #56]	; (80065f8 <_ZL8TP_Writeh+0x64>)
 80065be:	f7fb f933 	bl	8001828 <HAL_GPIO_WritePin>

        value <<= 1;
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET); 	//  CLK pulse
 80065c8:	2201      	movs	r2, #1
 80065ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065ce:	480a      	ldr	r0, [pc, #40]	; (80065f8 <_ZL8TP_Writeh+0x64>)
 80065d0:	f7fb f92a 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065da:	4807      	ldr	r0, [pc, #28]	; (80065f8 <_ZL8TP_Writeh+0x64>)
 80065dc:	f7fb f924 	bl	8001828 <HAL_GPIO_WritePin>
        --i;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
    while(i)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e1      	bne.n	80065b0 <_ZL8TP_Writeh+0x1c>
    }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40020400 	.word	0x40020400

080065fc <_Z19TP_Read_CoordinatesPt>:



//Read coordinates of touchscreen press. [0] = X, [1] = Y, [2] = RawX, [3] = RawY
uint8_t TP_Read_Coordinates(uint16_t Coordinates[])
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
    uint32_t samples = N_OF_POSITION_SAMPLES;
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	61fb      	str	r3, [r7, #28]
    uint16_t rawx, rawy = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	81fb      	strh	r3, [r7, #14]
    uint32_t calculating_x, calculating_y = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
											// Prepare T-pad controller
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);			// CS - High (inactively)
 8006614:	2201      	movs	r2, #1
 8006616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800661a:	4852      	ldr	r0, [pc, #328]	; (8006764 <_Z19TP_Read_CoordinatesPt+0x168>)
 800661c:	f7fb f904 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		// CLK   - High
 8006620:	2201      	movs	r2, #1
 8006622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006626:	484f      	ldr	r0, [pc, #316]	; (8006764 <_Z19TP_Read_CoordinatesPt+0x168>)
 8006628:	f7fb f8fe 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		// MOSI  - High
 800662c:	2201      	movs	r2, #1
 800662e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006632:	484c      	ldr	r0, [pc, #304]	; (8006764 <_Z19TP_Read_CoordinatesPt+0x168>)
 8006634:	f7fb f8f8 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET); 		// CS - active
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800663e:	4849      	ldr	r0, [pc, #292]	; (8006764 <_Z19TP_Read_CoordinatesPt+0x168>)
 8006640:	f7fb f8f2 	bl	8001828 <HAL_GPIO_WritePin>

	
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 8006644:	e01b      	b.n	800667e <_Z19TP_Read_CoordinatesPt+0x82>
    {			
        TP_Write(CMD_RDY);
 8006646:	20d0      	movs	r0, #208	; 0xd0
 8006648:	f7ff ffa4 	bl	8006594 <_ZL8TP_Writeh>
		rawy = TP_Read();
 800664c:	f7ff ff6e 	bl	800652c <_ZL7TP_Readv>
 8006650:	4603      	mov	r3, r0
 8006652:	81fb      	strh	r3, [r7, #14]
		calculating_y += rawy;
 8006654:	89fb      	ldrh	r3, [r7, #14]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4413      	add	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

        TP_Write(CMD_RDX);
 800665c:	2090      	movs	r0, #144	; 0x90
 800665e:	f7ff ff99 	bl	8006594 <_ZL8TP_Writeh>
		rawx = TP_Read();
 8006662:	f7ff ff63 	bl	800652c <_ZL7TP_Readv>
 8006666:	4603      	mov	r3, r0
 8006668:	81bb      	strh	r3, [r7, #12]
		calculating_x += rawx;
 800666a:	89bb      	ldrh	r3, [r7, #12]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4413      	add	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        samples--;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3b01      	subs	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
	counted_samples++;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3301      	adds	r3, #1
 800667c:	613b      	str	r3, [r7, #16]
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <_Z19TP_Read_CoordinatesPt+0x9a>
 8006684:	2120      	movs	r1, #32
 8006686:	4838      	ldr	r0, [pc, #224]	; (8006768 <_Z19TP_Read_CoordinatesPt+0x16c>)
 8006688:	f7fb f8b6 	bl	80017f8 <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <_Z19TP_Read_CoordinatesPt+0x9a>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <_Z19TP_Read_CoordinatesPt+0x9c>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1d4      	bne.n	8006646 <_Z19TP_Read_CoordinatesPt+0x4a>
    }
		
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);   			//T-pad controller inactive
 800669c:	2201      	movs	r2, #1
 800669e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066a2:	4830      	ldr	r0, [pc, #192]	; (8006764 <_Z19TP_Read_CoordinatesPt+0x168>)
 80066a4:	f7fb f8c0 	bl	8001828 <HAL_GPIO_WritePin>
		
	if((counted_samples == N_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d108      	bne.n	80066c0 <_Z19TP_Read_CoordinatesPt+0xc4>
 80066ae:	2120      	movs	r1, #32
 80066b0:	482d      	ldr	r0, [pc, #180]	; (8006768 <_Z19TP_Read_CoordinatesPt+0x16c>)
 80066b2:	f7fb f8a1 	bl	80017f8 <HAL_GPIO_ReadPin>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <_Z19TP_Read_CoordinatesPt+0xc4>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <_Z19TP_Read_CoordinatesPt+0xc6>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d042      	beq.n	800674c <_Z19TP_Read_CoordinatesPt+0x150>
	{
	    calculating_x /= counted_samples;
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ce:	61bb      	str	r3, [r7, #24]
	    calculating_y /= counted_samples;
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]
	    rawx = calculating_x;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	81bb      	strh	r3, [r7, #12]
	    Coordinates[2] = rawx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3304      	adds	r3, #4
 80066e2:	89ba      	ldrh	r2, [r7, #12]
 80066e4:	801a      	strh	r2, [r3, #0]
	    rawy = calculating_y;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	81fb      	strh	r3, [r7, #14]
	    Coordinates[3] = rawy;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3306      	adds	r3, #6
 80066ee:	89fa      	ldrh	r2, [r7, #14]
 80066f0:	801a      	strh	r2, [r3, #0]
		
	    Coordinates[0] = (rawx - X_OFFSET) / X_MAGNITUDE;
 80066f2:	89bb      	ldrh	r3, [r7, #12]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <_Z19TP_Read_CoordinatesPt+0x170>)
 80066f6:	8812      	ldrh	r2, [r2, #0]
 80066f8:	b292      	uxth	r2, r2
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <_Z19TP_Read_CoordinatesPt+0x174>)
 8006706:	ed93 7a00 	vldr	s14, [r3]
 800670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006712:	ee17 3a90 	vmov	r3, s15
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	801a      	strh	r2, [r3, #0]
	    Coordinates[1] = (rawy - Y_OFFSET) / Y_MAGNITUDE;
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	4a15      	ldr	r2, [pc, #84]	; (8006774 <_Z19TP_Read_CoordinatesPt+0x178>)
 8006720:	8812      	ldrh	r2, [r2, #0]
 8006722:	b292      	uxth	r2, r2
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <_Z19TP_Read_CoordinatesPt+0x17c>)
 8006730:	ed93 7a00 	vldr	s14, [r3]
 8006734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3302      	adds	r3, #2
 800673c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006740:	ee17 2a90 	vmov	r2, s15
 8006744:	b292      	uxth	r2, r2
 8006746:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8006748:	2301      	movs	r3, #1
 800674a:	e007      	b.n	800675c <_Z19TP_Read_CoordinatesPt+0x160>
		}

			Coordinates[0] = 0;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3302      	adds	r3, #2
 8006756:	2200      	movs	r2, #0
 8006758:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 800675a:	2300      	movs	r3, #0

}
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40020400 	.word	0x40020400
 8006768:	40020800 	.word	0x40020800
 800676c:	2000000a 	.word	0x2000000a
 8006770:	20000010 	.word	0x20000010
 8006774:	2000000c 	.word	0x2000000c
 8006778:	20000014 	.word	0x20000014

0800677c <_Z19TP_Touchpad_Pressedv>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed()
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8006780:	2120      	movs	r1, #32
 8006782:	4808      	ldr	r0, [pc, #32]	; (80067a4 <_Z19TP_Touchpad_Pressedv+0x28>)
 8006784:	f7fb f838 	bl	80017f8 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <_Z19TP_Touchpad_Pressedv+0x20>
	{
		return TOUCHPAD_PRESSED;
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <_Z19TP_Touchpad_Pressedv+0x22>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800679c:	2300      	movs	r3, #0
	}
}
 800679e:	4618      	mov	r0, r3
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40020800 	.word	0x40020800

080067a8 <_Z14TP_calibrationv>:

// Touch pad calibration. Lets move stilus from upper left corner of screen to down right corner few time. You have CALIBRATION_TIME millisecond)).
uint8_t TP_calibration()
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
  uint16_t rawCoord[4];
  uint16_t Xmin = 0xFFFF;
 80067ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067b2:	82fb      	strh	r3, [r7, #22]
  uint16_t Ymin = 0xFFFF;
 80067b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067b8:	82bb      	strh	r3, [r7, #20]
  uint16_t Xmax = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	827b      	strh	r3, [r7, #18]
  uint16_t Ymax = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	823b      	strh	r3, [r7, #16]

  uint32_t end_time = HAL_GetTick() + CALIBRATION_TIME;
 80067c2:	f7fa fca9 	bl	8001118 <HAL_GetTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80067cc:	3308      	adds	r3, #8
 80067ce:	60fb      	str	r3, [r7, #12]
  while (end_time > HAL_GetTick())
 80067d0:	e023      	b.n	800681a <_Z14TP_calibrationv+0x72>
    {
      if (TP_Read_Coordinates(rawCoord))
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff11 	bl	80065fc <_Z19TP_Read_CoordinatesPt>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bf14      	ite	ne
 80067e0:	2301      	movne	r3, #1
 80067e2:	2300      	moveq	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <_Z14TP_calibrationv+0x72>
	{
	  if (rawCoord[2] < Xmin) { Xmin = rawCoord[2]; }
 80067ea:	893b      	ldrh	r3, [r7, #8]
 80067ec:	8afa      	ldrh	r2, [r7, #22]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d901      	bls.n	80067f6 <_Z14TP_calibrationv+0x4e>
 80067f2:	893b      	ldrh	r3, [r7, #8]
 80067f4:	82fb      	strh	r3, [r7, #22]
	  if (rawCoord[2] > Xmax) { Xmax = rawCoord[2]; }
 80067f6:	893b      	ldrh	r3, [r7, #8]
 80067f8:	8a7a      	ldrh	r2, [r7, #18]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d201      	bcs.n	8006802 <_Z14TP_calibrationv+0x5a>
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	827b      	strh	r3, [r7, #18]
	  if (rawCoord[3] < Ymin) { Ymin = rawCoord[3]; }
 8006802:	897b      	ldrh	r3, [r7, #10]
 8006804:	8aba      	ldrh	r2, [r7, #20]
 8006806:	429a      	cmp	r2, r3
 8006808:	d901      	bls.n	800680e <_Z14TP_calibrationv+0x66>
 800680a:	897b      	ldrh	r3, [r7, #10]
 800680c:	82bb      	strh	r3, [r7, #20]
	  if (rawCoord[3] > Ymax) { Ymax = rawCoord[3]; }
 800680e:	897b      	ldrh	r3, [r7, #10]
 8006810:	8a3a      	ldrh	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d201      	bcs.n	800681a <_Z14TP_calibrationv+0x72>
 8006816:	897b      	ldrh	r3, [r7, #10]
 8006818:	823b      	strh	r3, [r7, #16]
  while (end_time > HAL_GetTick())
 800681a:	f7fa fc7d 	bl	8001118 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4293      	cmp	r3, r2
 8006824:	bf8c      	ite	hi
 8006826:	2301      	movhi	r3, #1
 8006828:	2300      	movls	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1d0      	bne.n	80067d2 <_Z14TP_calibrationv+0x2a>
	}
    }
  if ((Xmin < Xmax) && (Ymin < Ymax))
 8006830:	8afa      	ldrh	r2, [r7, #22]
 8006832:	8a7b      	ldrh	r3, [r7, #18]
 8006834:	429a      	cmp	r2, r3
 8006836:	d22c      	bcs.n	8006892 <_Z14TP_calibrationv+0xea>
 8006838:	8aba      	ldrh	r2, [r7, #20]
 800683a:	8a3b      	ldrh	r3, [r7, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d228      	bcs.n	8006892 <_Z14TP_calibrationv+0xea>
  {
      X_OFFSET = Xmin;
 8006840:	4a16      	ldr	r2, [pc, #88]	; (800689c <_Z14TP_calibrationv+0xf4>)
 8006842:	8afb      	ldrh	r3, [r7, #22]
 8006844:	8013      	strh	r3, [r2, #0]
      Y_OFFSET = Ymin;
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <_Z14TP_calibrationv+0xf8>)
 8006848:	8abb      	ldrh	r3, [r7, #20]
 800684a:	8013      	strh	r3, [r2, #0]
      X_MAGNITUDE = (Xmax - Xmin) / X_SIZE;
 800684c:	8a7a      	ldrh	r2, [r7, #18]
 800684e:	8afb      	ldrh	r3, [r7, #22]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <_Z14TP_calibrationv+0xfc>)
 8006854:	fb82 1203 	smull	r1, r2, r2, r3
 8006858:	11d2      	asrs	r2, r2, #7
 800685a:	17db      	asrs	r3, r3, #31
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <_Z14TP_calibrationv+0x100>)
 8006868:	edc3 7a00 	vstr	s15, [r3]
      Y_MAGNITUDE = (Ymax- Ymin) /  Y_SIZE;
 800686c:	8a3a      	ldrh	r2, [r7, #16]
 800686e:	8abb      	ldrh	r3, [r7, #20]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <_Z14TP_calibrationv+0x104>)
 8006874:	fb82 1203 	smull	r1, r2, r2, r3
 8006878:	441a      	add	r2, r3
 800687a:	11d2      	asrs	r2, r2, #7
 800687c:	17db      	asrs	r3, r3, #31
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <_Z14TP_calibrationv+0x108>)
 800688a:	edc3 7a00 	vstr	s15, [r3]

      return CALIBRATION_OK;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <_Z14TP_calibrationv+0xec>
  }
  return CALIBRATION_FAILS;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	2000000a 	.word	0x2000000a
 80068a0:	2000000c 	.word	0x2000000c
 80068a4:	66666667 	.word	0x66666667
 80068a8:	20000010 	.word	0x20000010
 80068ac:	88888889 	.word	0x88888889
 80068b0:	20000014 	.word	0x20000014

080068b4 <_Z7lcdInitv>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 80068ba:	2300      	movs	r3, #0
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2301      	movs	r3, #1
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	2200      	movs	r2, #0
 80068c6:	2101      	movs	r1, #1
 80068c8:	2000      	movs	r0, #0
 80068ca:	f000 fd45 	bl	8007358 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	4bae      	ldr	r3, [pc, #696]	; (8006b8c <_Z7lcdInitv+0x2d8>)
 80068d4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80068d6:	2300      	movs	r3, #0
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	2301      	movs	r3, #1
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2300      	movs	r3, #0
 80068e0:	2201      	movs	r2, #1
 80068e2:	2100      	movs	r1, #0
 80068e4:	2000      	movs	r0, #0
 80068e6:	f000 fd37 	bl	8007358 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461a      	mov	r2, r3
 80068ee:	4ba8      	ldr	r3, [pc, #672]	; (8006b90 <_Z7lcdInitv+0x2dc>)
 80068f0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80068f2:	2300      	movs	r3, #0
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	2301      	movs	r3, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	2001      	movs	r0, #1
 8006902:	f000 fd29 	bl	8007358 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	4ba2      	ldr	r3, [pc, #648]	; (8006b94 <_Z7lcdInitv+0x2e0>)
 800690c:	701a      	strb	r2, [r3, #0]
		                                    MemoryAccessControlNormalOrder,	// rowColumnExchange
		                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
		                                    MemoryAccessControlColorOrderBGR,	// colorOrder
		                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800690e:	2300      	movs	r3, #0
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	2301      	movs	r3, #1
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2300      	movs	r3, #0
 8006918:	2201      	movs	r2, #1
 800691a:	2101      	movs	r1, #1
 800691c:	2001      	movs	r0, #1
 800691e:	f000 fd1b 	bl	8007358 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	4b9c      	ldr	r3, [pc, #624]	; (8006b98 <_Z7lcdInitv+0x2e4>)
 8006928:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,	// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 800692a:	f000 fceb 	bl	8007304 <_ZL8lcdResetv>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 800692e:	2028      	movs	r0, #40	; 0x28
 8006930:	f000 fcf2 	bl	8007318 <_ZL15lcdWriteCommandh>

  lcdWriteCommand(0xCF);
 8006934:	20cf      	movs	r0, #207	; 0xcf
 8006936:	f000 fcef 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 800693a:	2000      	movs	r0, #0
 800693c:	f000 fcfc 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x83);
 8006940:	2083      	movs	r0, #131	; 0x83
 8006942:	f000 fcf9 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x30);
 8006946:	2030      	movs	r0, #48	; 0x30
 8006948:	f000 fcf6 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xED);
 800694c:	20ed      	movs	r0, #237	; 0xed
 800694e:	f000 fce3 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x64);
 8006952:	2064      	movs	r0, #100	; 0x64
 8006954:	f000 fcf0 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x03);
 8006958:	2003      	movs	r0, #3
 800695a:	f000 fced 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x12);
 800695e:	2012      	movs	r0, #18
 8006960:	f000 fcea 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x81);
 8006964:	2081      	movs	r0, #129	; 0x81
 8006966:	f000 fce7 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xE8);
 800696a:	20e8      	movs	r0, #232	; 0xe8
 800696c:	f000 fcd4 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x85);
 8006970:	2085      	movs	r0, #133	; 0x85
 8006972:	f000 fce1 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006976:	2000      	movs	r0, #0
 8006978:	f000 fcde 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 800697c:	2078      	movs	r0, #120	; 0x78
 800697e:	f000 fcdb 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xCB);
 8006982:	20cb      	movs	r0, #203	; 0xcb
 8006984:	f000 fcc8 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x39);
 8006988:	2039      	movs	r0, #57	; 0x39
 800698a:	f000 fcd5 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x2C);
 800698e:	202c      	movs	r0, #44	; 0x2c
 8006990:	f000 fcd2 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006994:	2000      	movs	r0, #0
 8006996:	f000 fccf 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x34);
 800699a:	2034      	movs	r0, #52	; 0x34
 800699c:	f000 fccc 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 80069a0:	2002      	movs	r0, #2
 80069a2:	f000 fcc9 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF7);
 80069a6:	20f7      	movs	r0, #247	; 0xf7
 80069a8:	f000 fcb6 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x20);
 80069ac:	2020      	movs	r0, #32
 80069ae:	f000 fcc3 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xEA);
 80069b2:	20ea      	movs	r0, #234	; 0xea
 80069b4:	f000 fcb0 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80069b8:	2000      	movs	r0, #0
 80069ba:	f000 fcbd 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 80069be:	2000      	movs	r0, #0
 80069c0:	f000 fcba 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 80069c4:	20c0      	movs	r0, #192	; 0xc0
 80069c6:	f000 fca7 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x26);
 80069ca:	2026      	movs	r0, #38	; 0x26
 80069cc:	f000 fcb4 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 80069d0:	20c1      	movs	r0, #193	; 0xc1
 80069d2:	f000 fca1 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x11);
 80069d6:	2011      	movs	r0, #17
 80069d8:	f000 fcae 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 80069dc:	20c5      	movs	r0, #197	; 0xc5
 80069de:	f000 fc9b 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x35);
 80069e2:	2035      	movs	r0, #53	; 0x35
 80069e4:	f000 fca8 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3E);
 80069e8:	203e      	movs	r0, #62	; 0x3e
 80069ea:	f000 fca5 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 80069ee:	20c7      	movs	r0, #199	; 0xc7
 80069f0:	f000 fc92 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0xBE);
 80069f4:	20be      	movs	r0, #190	; 0xbe
 80069f6:	f000 fc9f 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80069fa:	2036      	movs	r0, #54	; 0x36
 80069fc:	f000 fc8c 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(lcdPortraitConfig);
 8006a00:	4b62      	ldr	r3, [pc, #392]	; (8006b8c <_Z7lcdInitv+0x2d8>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc96 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8006a0c:	203a      	movs	r0, #58	; 0x3a
 8006a0e:	f000 fc83 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x55);
 8006a12:	2055      	movs	r0, #85	; 0x55
 8006a14:	f000 fc90 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8006a18:	20b1      	movs	r0, #177	; 0xb1
 8006a1a:	f000 fc7d 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f000 fc8a 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8006a24:	2018      	movs	r0, #24
 8006a26:	f000 fc87 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF2);
 8006a2a:	20f2      	movs	r0, #242	; 0xf2
 8006a2c:	f000 fc74 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x08);
 8006a30:	2008      	movs	r0, #8
 8006a32:	f000 fc81 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_GAMMASET);
 8006a36:	2026      	movs	r0, #38	; 0x26
 8006a38:	f000 fc6e 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x01);
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f000 fc7b 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8006a42:	20e0      	movs	r0, #224	; 0xe0
 8006a44:	f000 fc68 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x1F);
 8006a48:	201f      	movs	r0, #31
 8006a4a:	f000 fc75 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1A);
 8006a4e:	201a      	movs	r0, #26
 8006a50:	f000 fc72 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8006a54:	2018      	movs	r0, #24
 8006a56:	f000 fc6f 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8006a5a:	200a      	movs	r0, #10
 8006a5c:	f000 fc6c 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0F);
 8006a60:	200f      	movs	r0, #15
 8006a62:	f000 fc69 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x06);
 8006a66:	2006      	movs	r0, #6
 8006a68:	f000 fc66 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x45);
 8006a6c:	2045      	movs	r0, #69	; 0x45
 8006a6e:	f000 fc63 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x87);
 8006a72:	2087      	movs	r0, #135	; 0x87
 8006a74:	f000 fc60 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x32);
 8006a78:	2032      	movs	r0, #50	; 0x32
 8006a7a:	f000 fc5d 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8006a7e:	200a      	movs	r0, #10
 8006a80:	f000 fc5a 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8006a84:	2007      	movs	r0, #7
 8006a86:	f000 fc57 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f000 fc54 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8006a90:	2007      	movs	r0, #7
 8006a92:	f000 fc51 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006a96:	2005      	movs	r0, #5
 8006a98:	f000 fc4e 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f000 fc4b 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8006aa2:	20e1      	movs	r0, #225	; 0xe1
 8006aa4:	f000 fc38 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f000 fc45 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x25);
 8006aae:	2025      	movs	r0, #37	; 0x25
 8006ab0:	f000 fc42 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8006ab4:	2027      	movs	r0, #39	; 0x27
 8006ab6:	f000 fc3f 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006aba:	2005      	movs	r0, #5
 8006abc:	f000 fc3c 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x10);
 8006ac0:	2010      	movs	r0, #16
 8006ac2:	f000 fc39 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x09);
 8006ac6:	2009      	movs	r0, #9
 8006ac8:	f000 fc36 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8006acc:	203a      	movs	r0, #58	; 0x3a
 8006ace:	f000 fc33 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 8006ad2:	2078      	movs	r0, #120	; 0x78
 8006ad4:	f000 fc30 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x4D);
 8006ad8:	204d      	movs	r0, #77	; 0x4d
 8006ada:	f000 fc2d 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8006ade:	2005      	movs	r0, #5
 8006ae0:	f000 fc2a 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8006ae4:	2018      	movs	r0, #24
 8006ae6:	f000 fc27 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0D);
 8006aea:	200d      	movs	r0, #13
 8006aec:	f000 fc24 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x38);
 8006af0:	2038      	movs	r0, #56	; 0x38
 8006af2:	f000 fc21 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8006af6:	203a      	movs	r0, #58	; 0x3a
 8006af8:	f000 fc1e 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1F);
 8006afc:	201f      	movs	r0, #31
 8006afe:	f000 fc1b 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8006b02:	202a      	movs	r0, #42	; 0x2a
 8006b04:	f000 fc08 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f000 fc15 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f000 fc12 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006b14:	2000      	movs	r0, #0
 8006b16:	f000 fc0f 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0xEF);
 8006b1a:	20ef      	movs	r0, #239	; 0xef
 8006b1c:	f000 fc0c 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8006b20:	202b      	movs	r0, #43	; 0x2b
 8006b22:	f000 fbf9 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8006b26:	2000      	movs	r0, #0
 8006b28:	f000 fc06 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f000 fc03 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x01);
 8006b32:	2001      	movs	r0, #1
 8006b34:	f000 fc00 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3F);
 8006b38:	203f      	movs	r0, #63	; 0x3f
 8006b3a:	f000 fbfd 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8006b3e:	20b7      	movs	r0, #183	; 0xb7
 8006b40:	f000 fbea 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x07);
 8006b44:	2007      	movs	r0, #7
 8006b46:	f000 fbf7 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8006b4a:	20b6      	movs	r0, #182	; 0xb6
 8006b4c:	f000 fbe4 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x0A);
 8006b50:	200a      	movs	r0, #10
 8006b52:	f000 fbf1 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x82);
 8006b56:	2082      	movs	r0, #130	; 0x82
 8006b58:	f000 fbee 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8006b5c:	2027      	movs	r0, #39	; 0x27
 8006b5e:	f000 fbeb 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8006b62:	2000      	movs	r0, #0
 8006b64:	f000 fbe8 	bl	8007338 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8006b68:	2011      	movs	r0, #17
 8006b6a:	f000 fbd5 	bl	8007318 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8006b6e:	2064      	movs	r0, #100	; 0x64
 8006b70:	f7fa fade 	bl	8001130 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8006b74:	2029      	movs	r0, #41	; 0x29
 8006b76:	f000 fbcf 	bl	8007318 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8006b7a:	2064      	movs	r0, #100	; 0x64
 8006b7c:	f7fa fad8 	bl	8001130 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8006b80:	202c      	movs	r0, #44	; 0x2c
 8006b82:	f000 fbc9 	bl	8007318 <_ZL15lcdWriteCommandh>
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	200002e4 	.word	0x200002e4
 8006b90:	200002e5 	.word	0x200002e5
 8006b94:	200002e6 	.word	0x200002e6
 8006b98:	200002e7 	.word	0x200002e7

08006b9c <_Z10lcdFillRGBt>:
}

// Fill screen a color

void lcdFillRGB(uint16_t color)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <_Z10lcdFillRGBt+0x5c>)
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <_Z10lcdFillRGBt+0x5c>)
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f000 fb1b 	bl	80071f4 <_Z12lcdSetWindowtttt>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <_Z10lcdFillRGBt+0x5c>)
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <_Z10lcdFillRGBt+0x5c>)
 8006bc6:	885b      	ldrh	r3, [r3, #2]
 8006bc8:	fb02 f303 	mul.w	r3, r2, r3
 8006bcc:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8006bce:	e003      	b.n	8006bd8 <_Z10lcdFillRGBt+0x3c>
  {
    lcdWriteData(color);
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fbb0 	bl	8007338 <_ZL12lcdWriteDatat>
  while(dimensions--)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1e5a      	subs	r2, r3, #1
 8006bdc:	60fa      	str	r2, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f1      	bne.n	8006bd0 <_Z10lcdFillRGBt+0x34>
  }
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000018 	.word	0x20000018

08006bfc <_Z11lcdDrawCharsshtt>:
 * \param size		Character Size
 *
 * \return void
 */
uint16_t lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b08b      	sub	sp, #44	; 0x2c
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	80fb      	strh	r3, [r7, #6]
 8006c0e:	4603      	mov	r3, r0
 8006c10:	80bb      	strh	r3, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
 8006c16:	4613      	mov	r3, r2
 8006c18:	803b      	strh	r3, [r7, #0]
  uint16_t incrX = 0; 								// width of char symbol
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	83fb      	strh	r3, [r7, #30]
  if ((x + lcdFont.pFont->Width >= lcdProperties.width) || 			// Clip right
 8006c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c22:	4a69      	ldr	r2, [pc, #420]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c24:	6892      	ldr	r2, [r2, #8]
 8006c26:	8892      	ldrh	r2, [r2, #4]
 8006c28:	4413      	add	r3, r2
 8006c2a:	4a68      	ldr	r2, [pc, #416]	; (8006dcc <_Z11lcdDrawCharsshtt+0x1d0>)
 8006c2c:	8812      	ldrh	r2, [r2, #0]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	da11      	bge.n	8006c56 <_Z11lcdDrawCharsshtt+0x5a>
	    (y + lcdFont.pFont->Height >= lcdProperties.height) || 		// Clip bottom
 8006c32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c36:	4a64      	ldr	r2, [pc, #400]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c38:	6892      	ldr	r2, [r2, #8]
 8006c3a:	88d2      	ldrh	r2, [r2, #6]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	4a63      	ldr	r2, [pc, #396]	; (8006dcc <_Z11lcdDrawCharsshtt+0x1d0>)
 8006c40:	8852      	ldrh	r2, [r2, #2]
  if ((x + lcdFont.pFont->Width >= lcdProperties.width) || 			// Clip right
 8006c42:	4293      	cmp	r3, r2
 8006c44:	da07      	bge.n	8006c56 <_Z11lcdDrawCharsshtt+0x5a>
	    (y + lcdFont.pFont->Height >= lcdProperties.height) || 		// Clip bottom
 8006c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	db03      	blt.n	8006c56 <_Z11lcdDrawCharsshtt+0x5a>
	    (x  < 0) || 							// Clip left
 8006c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da01      	bge.n	8006c5a <_Z11lcdDrawCharsshtt+0x5e>
	    (y < 0))  								// Clip top
	{
	    return incrX;
 8006c56:	8bfb      	ldrh	r3, [r7, #30]
 8006c58:	e0b1      	b.n	8006dbe <_Z11lcdDrawCharsshtt+0x1c2>
	}
//--------------------------------------------- output procedure for monospace char------------------------------------------------
	if (lcdFont.pFont->Monospace)
 8006c5a:	4b5b      	ldr	r3, [pc, #364]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	7a1b      	ldrb	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80a9 	beq.w	8006db8 <_Z11lcdDrawCharsshtt+0x1bc>
	{
	    incrX = lcdFont.pFont->Width; 					// monospace char
 8006c66:	4b58      	ldr	r3, [pc, #352]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	889b      	ldrh	r3, [r3, #4]
 8006c6c:	83fb      	strh	r3, [r7, #30]
	    uint8_t byte_count = 1 + lcdFont.pFont->Width / 8;
 8006c6e:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	889b      	ldrh	r3, [r3, #4]
 8006c74:	08db      	lsrs	r3, r3, #3
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	777b      	strb	r3, [r7, #29]
	    uint8_t xP = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c8a:	e08c      	b.n	8006da6 <_Z11lcdDrawCharsshtt+0x1aa>
	      {
		  uint16_t bit_count = lcdFont.pFont->Width;
 8006c8c:	4b4e      	ldr	r3, [pc, #312]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	889b      	ldrh	r3, [r3, #4]
 8006c92:	84bb      	strh	r3, [r7, #36]	; 0x24
		  uint8_t line;
		  for(uint8_t k = 0; k < byte_count; k++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c9a:	e077      	b.n	8006d8c <_Z11lcdDrawCharsshtt+0x190>
		    {
			uint16_t lcd_data[8] = {bg,bg,bg,bg,bg,bg,bg,bg};
 8006c9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c9e:	81bb      	strh	r3, [r7, #12]
 8006ca0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ca2:	81fb      	strh	r3, [r7, #14]
 8006ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ca6:	823b      	strh	r3, [r7, #16]
 8006ca8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006caa:	827b      	strh	r3, [r7, #18]
 8006cac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cae:	82bb      	strh	r3, [r7, #20]
 8006cb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cb2:	82fb      	strh	r3, [r7, #22]
 8006cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cb6:	833b      	strh	r3, [r7, #24]
 8006cb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cba:	837b      	strh	r3, [r7, #26]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * byte_count) + (i * byte_count) + k];
 8006cbc:	4b42      	ldr	r3, [pc, #264]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	3a20      	subs	r2, #32
 8006cc6:	4940      	ldr	r1, [pc, #256]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006cc8:	6889      	ldr	r1, [r1, #8]
 8006cca:	88c9      	ldrh	r1, [r1, #6]
 8006ccc:	fb01 f202 	mul.w	r2, r1, r2
 8006cd0:	7f79      	ldrb	r1, [r7, #29]
 8006cd2:	fb02 f101 	mul.w	r1, r2, r1
 8006cd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006cda:	7f78      	ldrb	r0, [r7, #29]
 8006cdc:	fb00 f202 	mul.w	r2, r0, r2
 8006ce0:	4411      	add	r1, r2
 8006ce2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ce6:	440a      	add	r2, r1
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t type_pixels = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for(uint8_t j = 0; j < 8; j++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 3020 	strb.w	r3, [r7, #32]
 8006cfc:	e022      	b.n	8006d44 <_Z11lcdDrawCharsshtt+0x148>
			{
			    if (bit_count)
 8006cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d024      	beq.n	8006d4e <_Z11lcdDrawCharsshtt+0x152>
			      {
				if((line & 0x01) == 0x01)
 8006d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <_Z11lcdDrawCharsshtt+0x124>
				{
					lcd_data[j] = color;
 8006d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	3328      	adds	r3, #40	; 0x28
 8006d18:	443b      	add	r3, r7
 8006d1a:	883a      	ldrh	r2, [r7, #0]
 8006d1c:	f823 2c1c 	strh.w	r2, [r3, #-28]
				}
				line >>= 1;
 8006d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				-- bit_count;
 8006d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
				++ type_pixels;
 8006d30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d34:	3301      	adds	r3, #1
 8006d36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for(uint8_t j = 0; j < 8; j++)
 8006d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f887 3020 	strb.w	r3, [r7, #32]
 8006d44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d48:	2b07      	cmp	r3, #7
 8006d4a:	d9d8      	bls.n	8006cfe <_Z11lcdDrawCharsshtt+0x102>
 8006d4c:	e000      	b.n	8006d50 <_Z11lcdDrawCharsshtt+0x154>
			      }
			    else break;
 8006d4e:	bf00      	nop
			}
			lcdDrawPixels(x + xP, y + i, lcd_data, type_pixels); // byte to byte transfer line
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	4413      	add	r3, r2
 8006d5a:	b298      	uxth	r0, r3
 8006d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	88bb      	ldrh	r3, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	b299      	uxth	r1, r3
 8006d68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d6c:	f107 020c 	add.w	r2, r7, #12
 8006d70:	f000 fa9c 	bl	80072ac <_ZL13lcdDrawPixelsttPtm>
			xP += type_pixels;
 8006d74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  for(uint8_t k = 0; k < byte_count; k++)
 8006d82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d86:	3301      	adds	r3, #1
 8006d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d90:	7f7b      	ldrb	r3, [r7, #29]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d382      	bcc.n	8006c9c <_Z11lcdDrawCharsshtt+0xa0>
		    }
		xP = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006da0:	3301      	adds	r3, #1
 8006da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006daa:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <_Z11lcdDrawCharsshtt+0x1cc>)
 8006dac:	6892      	ldr	r2, [r2, #8]
 8006dae:	88d2      	ldrh	r2, [r2, #6]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	f6ff af6b 	blt.w	8006c8c <_Z11lcdDrawCharsshtt+0x90>
 8006db6:	e001      	b.n	8006dbc <_Z11lcdDrawCharsshtt+0x1c0>
	    //--------------------------------------------- output procedure for proportional char------------------------------------------------
	}
	else
	  {
	      // --- put here prop font char output procedure \/\/\/ )) ---
	      return incrX;
 8006db8:	8bfb      	ldrh	r3, [r7, #30]
 8006dba:	e000      	b.n	8006dbe <_Z11lcdDrawCharsshtt+0x1c2>
	  }
	return incrX;
 8006dbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	372c      	adds	r7, #44	; 0x2c
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000020 	.word	0x20000020
 8006dcc:	20000018 	.word	0x20000018

08006dd0 <_Z9lcdPrintfPKcz>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char* fmt, ...)
{
 8006dd0:	b40f      	push	{r0, r1, r2, r3}
 8006dd2:	b590      	push	{r4, r7, lr}
 8006dd4:	b087      	sub	sp, #28
 8006dd6:	af02      	add	r7, sp, #8
	static  char buf[256];

	char *p;
	va_list lst;

	va_start(lst, fmt);
 8006dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ddc:	607b      	str	r3, [r7, #4]
	vsprintf(buf, fmt, lst);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6a39      	ldr	r1, [r7, #32]
 8006de2:	484f      	ldr	r0, [pc, #316]	; (8006f20 <_Z9lcdPrintfPKcz+0x150>)
 8006de4:	f002 ff8c 	bl	8009d00 <vsiprintf>
	va_end(lst);

	p = buf;
 8006de8:	4b4d      	ldr	r3, [pc, #308]	; (8006f20 <_Z9lcdPrintfPKcz+0x150>)
 8006dea:	60fb      	str	r3, [r7, #12]
	while (*p)
 8006dec:	e08a      	b.n	8006f04 <_Z9lcdPrintfPKcz+0x134>
	{
	  char to_print = *p;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	72fb      	strb	r3, [r7, #11]
	    	if (to_print > 0x7f) // no ASCII symbol
 8006df4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da1a      	bge.n	8006e32 <_Z9lcdPrintfPKcz+0x62>
	    	{
	    	    switch(to_print)
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	2bd0      	cmp	r3, #208	; 0xd0
 8006e00:	d002      	beq.n	8006e08 <_Z9lcdPrintfPKcz+0x38>
 8006e02:	2bd1      	cmp	r3, #209	; 0xd1
 8006e04:	d008      	beq.n	8006e18 <_Z9lcdPrintfPKcz+0x48>
 8006e06:	e00f      	b.n	8006e28 <_Z9lcdPrintfPKcz+0x58>
	    	    {
	         	case 0xD0 :
	         	  ++p;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
	         	  to_print = *p + 0x30;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3330      	adds	r3, #48	; 0x30
 8006e14:	72fb      	strb	r3, [r7, #11]
	         	  break;
 8006e16:	e00c      	b.n	8006e32 <_Z9lcdPrintfPKcz+0x62>

	         	case 0xD1 :
	         	  ++p;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
	         	  to_print = *p + 0x70;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	3370      	adds	r3, #112	; 0x70
 8006e24:	72fb      	strb	r3, [r7, #11]
	         	  break;
 8006e26:	e004      	b.n	8006e32 <_Z9lcdPrintfPKcz+0x62>

	         	default :       // no 0x80---0xBF symbol  print space
	         	  ++p;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
	         	  to_print = ' ';
 8006e2e:	2320      	movs	r3, #32
 8006e30:	72fb      	strb	r3, [r7, #11]
	    	    }
	         }
	      	if (to_print == '\n')
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b0a      	cmp	r3, #10
 8006e36:	d10e      	bne.n	8006e56 <_Z9lcdPrintfPKcz+0x86>
	      	{
	      	    cursorXY.y += lcdFont.pFont->Height + 1;
 8006e38:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e3a:	885a      	ldrh	r2, [r3, #2]
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	88db      	ldrh	r3, [r3, #6]
 8006e42:	4413      	add	r3, r2
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3301      	adds	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	4b36      	ldr	r3, [pc, #216]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e4c:	805a      	strh	r2, [r3, #2]
	      	    cursorXY.x = 0;
 8006e4e:	4b35      	ldr	r3, [pc, #212]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	e04a      	b.n	8006eec <_Z9lcdPrintfPKcz+0x11c>
	      	}
	      	else if (to_print == '\r')
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b0d      	cmp	r3, #13
 8006e5a:	d047      	beq.n	8006eec <_Z9lcdPrintfPKcz+0x11c>
	      	{
	      			// skip em
	      	}
	      	else if (to_print == '\t')
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	2b09      	cmp	r3, #9
 8006e60:	d10b      	bne.n	8006e7a <_Z9lcdPrintfPKcz+0xaa>
	      	{
	      	    cursorXY.x += lcdFont.pFont->Width * 4;
 8006e62:	4b30      	ldr	r3, [pc, #192]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e64:	881a      	ldrh	r2, [r3, #0]
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	889b      	ldrh	r3, [r3, #4]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	4b2b      	ldr	r3, [pc, #172]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e038      	b.n	8006eec <_Z9lcdPrintfPKcz+0x11c>
	      	}
	      	else
	      	{
	      		uint16_t stepX = lcdDrawChar(cursorXY.x, cursorXY.y, to_print, lcdFont.TextColor, lcdFont.BackColor);
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b218      	sxth	r0, r3
 8006e80:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006e82:	885b      	ldrh	r3, [r3, #2]
 8006e84:	b219      	sxth	r1, r3
 8006e86:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	b29c      	uxth	r4, r3
 8006e8c:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	7afa      	ldrb	r2, [r7, #11]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4623      	mov	r3, r4
 8006e98:	f7ff feb0 	bl	8006bfc <_Z11lcdDrawCharsshtt>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	813b      	strh	r3, [r7, #8]
	      		cursorXY.x += (++ stepX);										// move cursor to width of symbol +  1
 8006ea0:	893b      	ldrh	r3, [r7, #8]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	813b      	strh	r3, [r7, #8]
 8006ea6:	893a      	ldrh	r2, [r7, #8]
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006eb2:	801a      	strh	r2, [r3, #0]
	      		if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8006eb4:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006eb6:	7b1b      	ldrb	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <_Z9lcdPrintfPKcz+0x11c>
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <_Z9lcdPrintfPKcz+0x15c>)
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	1acb      	subs	r3, r1, r3
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	dd0b      	ble.n	8006eec <_Z9lcdPrintfPKcz+0x11c>
	      		{
	      		    cursorXY.y += lcdFont.pFont->Height;
 8006ed4:	4b13      	ldr	r3, [pc, #76]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006ed6:	885a      	ldrh	r2, [r3, #2]
 8006ed8:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <_Z9lcdPrintfPKcz+0x158>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	4413      	add	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006ee4:	805a      	strh	r2, [r3, #2]
	      		    cursorXY.x = 0;
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	801a      	strh	r2, [r3, #0]
	      		}
	      	}
	      	p++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]

	      	if (cursorXY.y >= lcdProperties.height)
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006ef4:	885a      	ldrh	r2, [r3, #2]
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <_Z9lcdPrintfPKcz+0x15c>)
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <_Z9lcdPrintfPKcz+0x134>
	      	{
	      	    cursorXY.y = 0;
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <_Z9lcdPrintfPKcz+0x154>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	805a      	strh	r2, [r3, #2]
	while (*p)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f af70 	bne.w	8006dee <_Z9lcdPrintfPKcz+0x1e>
	      	}

	}
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006f1a:	b004      	add	sp, #16
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200002e8 	.word	0x200002e8
 8006f24:	200002e0 	.word	0x200002e0
 8006f28:	20000020 	.word	0x20000020
 8006f2c:	20000018 	.word	0x20000018

08006f30 <_Z12lcdPrintTextPKchtt>:

/**
 * \brief Print CP1250 string
 */
void lcdPrintText(const char* str, uint8_t str_size, uint16_t color, uint16_t bg )
{
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	72fb      	strb	r3, [r7, #11]
 8006f42:	460b      	mov	r3, r1
 8006f44:	813b      	strh	r3, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  lcdFont.BackColor = bg;
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	4a4f      	ldr	r2, [pc, #316]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006f4e:	6053      	str	r3, [r2, #4]
  lcdFont.TextColor = color;
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	4a4e      	ldr	r2, [pc, #312]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006f54:	6013      	str	r3, [r2, #0]
  const char* p = str;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	617b      	str	r3, [r7, #20]
  unsigned char to_print;
  while (str_size)
 8006f5a:	e08d      	b.n	8007078 <_Z12lcdPrintTextPKchtt+0x148>
  	{
	to_print = *p;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	74fb      	strb	r3, [r7, #19]
	if (to_print > 0x7f) // no ASCII symbol
 8006f62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	da1a      	bge.n	8006fa0 <_Z12lcdPrintTextPKchtt+0x70>
     	      {
     		switch(to_print)
 8006f6a:	7cfb      	ldrb	r3, [r7, #19]
 8006f6c:	2bd0      	cmp	r3, #208	; 0xd0
 8006f6e:	d002      	beq.n	8006f76 <_Z12lcdPrintTextPKchtt+0x46>
 8006f70:	2bd1      	cmp	r3, #209	; 0xd1
 8006f72:	d008      	beq.n	8006f86 <_Z12lcdPrintTextPKchtt+0x56>
 8006f74:	e00f      	b.n	8006f96 <_Z12lcdPrintTextPKchtt+0x66>
     		{
     		  case 0xD0 :
     		    ++p;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
     		    to_print = *p + 0x30;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3330      	adds	r3, #48	; 0x30
 8006f82:	74fb      	strb	r3, [r7, #19]
     		    break;
 8006f84:	e00c      	b.n	8006fa0 <_Z12lcdPrintTextPKchtt+0x70>
     		  case 0xD1 :
     		     ++p;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
     		     to_print = *p + 0x70;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	3370      	adds	r3, #112	; 0x70
 8006f92:	74fb      	strb	r3, [r7, #19]
     		     break;
 8006f94:	e004      	b.n	8006fa0 <_Z12lcdPrintTextPKchtt+0x70>
     		  default :       // no 0x80---0xBF symbol  print space
     		    ++p;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
     		    to_print = ' ';
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	74fb      	strb	r3, [r7, #19]
     		}
     	      }
  		if (to_print == '\n')
 8006fa0:	7cfb      	ldrb	r3, [r7, #19]
 8006fa2:	2b0a      	cmp	r3, #10
 8006fa4:	d10e      	bne.n	8006fc4 <_Z12lcdPrintTextPKchtt+0x94>
  		{
  			cursorXY.y += lcdFont.pFont->Height + 1;
 8006fa6:	4b3a      	ldr	r3, [pc, #232]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fa8:	885a      	ldrh	r2, [r3, #2]
 8006faa:	4b38      	ldr	r3, [pc, #224]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	88db      	ldrh	r3, [r3, #6]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	4b35      	ldr	r3, [pc, #212]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fba:	805a      	strh	r2, [r3, #2]
  			cursorXY.x = 0;
 8006fbc:	4b34      	ldr	r3, [pc, #208]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	801a      	strh	r2, [r3, #0]
 8006fc2:	e04a      	b.n	800705a <_Z12lcdPrintTextPKchtt+0x12a>
  		}
  		else if (to_print == '\r')
 8006fc4:	7cfb      	ldrb	r3, [r7, #19]
 8006fc6:	2b0d      	cmp	r3, #13
 8006fc8:	d047      	beq.n	800705a <_Z12lcdPrintTextPKchtt+0x12a>
  		{
  			// skip em
  		}
  		else if (to_print == '\t')
 8006fca:	7cfb      	ldrb	r3, [r7, #19]
 8006fcc:	2b09      	cmp	r3, #9
 8006fce:	d10b      	bne.n	8006fe8 <_Z12lcdPrintTextPKchtt+0xb8>
  		{
  			cursorXY.x += lcdFont.pFont->Width * 4;
 8006fd0:	4b2f      	ldr	r3, [pc, #188]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fd2:	881a      	ldrh	r2, [r3, #0]
 8006fd4:	4b2d      	ldr	r3, [pc, #180]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	4b2b      	ldr	r3, [pc, #172]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	e038      	b.n	800705a <_Z12lcdPrintTextPKchtt+0x12a>
  		}
  		else
  		{
  			uint16_t stepX = lcdDrawChar(cursorXY.x, cursorXY.y, to_print, lcdFont.TextColor, lcdFont.BackColor);
 8006fe8:	4b29      	ldr	r3, [pc, #164]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b218      	sxth	r0, r3
 8006fee:	4b28      	ldr	r3, [pc, #160]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	b219      	sxth	r1, r3
 8006ff4:	4b25      	ldr	r3, [pc, #148]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b29c      	uxth	r4, r3
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	7cfa      	ldrb	r2, [r7, #19]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	4623      	mov	r3, r4
 8007006:	f7ff fdf9 	bl	8006bfc <_Z11lcdDrawCharsshtt>
 800700a:	4603      	mov	r3, r0
 800700c:	823b      	strh	r3, [r7, #16]
  			cursorXY.x += (++ stepX);										// move cursor to width of symbol +  1
 800700e:	8a3b      	ldrh	r3, [r7, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	823b      	strh	r3, [r7, #16]
 8007014:	8a3a      	ldrh	r2, [r7, #16]
 8007016:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	4413      	add	r3, r2
 800701c:	b29a      	uxth	r2, r3
 800701e:	4b1c      	ldr	r3, [pc, #112]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007020:	801a      	strh	r2, [r3, #0]
  			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8007022:	4b1a      	ldr	r3, [pc, #104]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8007024:	7b1b      	ldrb	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <_Z12lcdPrintTextPKchtt+0x12a>
 800702a:	4b19      	ldr	r3, [pc, #100]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	4b18      	ldr	r3, [pc, #96]	; (8007094 <_Z12lcdPrintTextPKchtt+0x164>)
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	4619      	mov	r1, r3
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	889b      	ldrh	r3, [r3, #4]
 800703c:	1acb      	subs	r3, r1, r3
 800703e:	429a      	cmp	r2, r3
 8007040:	dd0b      	ble.n	800705a <_Z12lcdPrintTextPKchtt+0x12a>
  			{
  				cursorXY.y += lcdFont.pFont->Height;
 8007042:	4b13      	ldr	r3, [pc, #76]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007044:	885a      	ldrh	r2, [r3, #2]
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <_Z12lcdPrintTextPKchtt+0x15c>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	88db      	ldrh	r3, [r3, #6]
 800704c:	4413      	add	r3, r2
 800704e:	b29a      	uxth	r2, r3
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007052:	805a      	strh	r2, [r3, #2]
  				cursorXY.x = 0;
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007056:	2200      	movs	r2, #0
 8007058:	801a      	strh	r2, [r3, #0]
  			}
  		}
  		p++;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	3301      	adds	r3, #1
 800705e:	617b      	str	r3, [r7, #20]

  		if (cursorXY.y >= lcdProperties.height)
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 8007062:	885a      	ldrh	r2, [r3, #2]
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <_Z12lcdPrintTextPKchtt+0x164>)
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	429a      	cmp	r2, r3
 800706a:	d302      	bcc.n	8007072 <_Z12lcdPrintTextPKchtt+0x142>
  		{
  			cursorXY.y = 0;
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <_Z12lcdPrintTextPKchtt+0x160>)
 800706e:	2200      	movs	r2, #0
 8007070:	805a      	strh	r2, [r3, #2]
  		}
  		--str_size;
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	3b01      	subs	r3, #1
 8007076:	72fb      	strb	r3, [r7, #11]
  while (str_size)
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f47f af6e 	bne.w	8006f5c <_Z12lcdPrintTextPKchtt+0x2c>
  	}

}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
 800708a:	bf00      	nop
 800708c:	20000020 	.word	0x20000020
 8007090:	200002e0 	.word	0x200002e0
 8007094:	20000018 	.word	0x20000018

08007098 <_Z14lcdSetTextFontP6_tFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 80070a0:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <_Z14lcdSetTextFontP6_tFont+0x1c>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6093      	str	r3, [r2, #8]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000020 	.word	0x20000020

080070b8 <_Z15lcdSetTextColortt>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	460a      	mov	r2, r1
 80070c2:	80fb      	strh	r3, [r7, #6]
 80070c4:	4613      	mov	r3, r2
 80070c6:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	4a05      	ldr	r2, [pc, #20]	; (80070e0 <_Z15lcdSetTextColortt+0x28>)
 80070cc:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 80070ce:	88bb      	ldrh	r3, [r7, #4]
 80070d0:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <_Z15lcdSetTextColortt+0x28>)
 80070d2:	6053      	str	r3, [r2, #4]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	20000020 	.word	0x20000020

080070e4 <_Z17lcdSetOrientation21lcdOrientationTypeDef>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 80070ee:	4a2f      	ldr	r2, [pc, #188]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 80070f4:	2036      	movs	r0, #54	; 0x36
 80070f6:	f000 f90f 	bl	8007318 <_ZL15lcdWriteCommandh>

	switch (lcdProperties.orientation)
 80070fa:	4b2c      	ldr	r3, [pc, #176]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80070fc:	791b      	ldrb	r3, [r3, #4]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d842      	bhi.n	8007188 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa4>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0x24>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007119 	.word	0x08007119
 800710c:	08007151 	.word	0x08007151
 8007110:	08007135 	.word	0x08007135
 8007114:	0800716d 	.word	0x0800716d
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8007118:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xcc>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f90a 	bl	8007338 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007126:	22f0      	movs	r2, #240	; 0xf0
 8007128:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800712c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007130:	805a      	strh	r2, [r3, #2]
			break;
 8007132:	e02a      	b.n	800718a <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8007134:	4b1f      	ldr	r3, [pc, #124]	; (80071b4 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd0>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f8fc 	bl	8007338 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007142:	22f0      	movs	r2, #240	; 0xf0
 8007144:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8007146:	4b19      	ldr	r3, [pc, #100]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007148:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800714c:	805a      	strh	r2, [r3, #2]
			break;
 800714e:	e01c      	b.n	800718a <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd4>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f8ee 	bl	8007338 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800715c:	4b13      	ldr	r3, [pc, #76]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800715e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007162:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8007164:	4b11      	ldr	r3, [pc, #68]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007166:	22f0      	movs	r2, #240	; 0xf0
 8007168:	805a      	strh	r2, [r3, #2]
			break;
 800716a:	e00e      	b.n	800718a <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 800716c:	4b13      	ldr	r3, [pc, #76]	; (80071bc <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd8>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	4618      	mov	r0, r3
 8007174:	f000 f8e0 	bl	8007338 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800717a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800717e:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007182:	22f0      	movs	r2, #240	; 0xf0
 8007184:	805a      	strh	r2, [r3, #2]
			break;
 8007186:	e000      	b.n	800718a <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		default:
			break;
 8007188:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800718a:	4b08      	ldr	r3, [pc, #32]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	3b01      	subs	r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	2100      	movs	r1, #0
 800719c:	2000      	movs	r0, #0
 800719e:	f000 f829 	bl	80071f4 <_Z12lcdSetWindowtttt>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000018 	.word	0x20000018
 80071b0:	200002e4 	.word	0x200002e4
 80071b4:	200002e6 	.word	0x200002e6
 80071b8:	200002e5 	.word	0x200002e5
 80071bc:	200002e7 	.word	0x200002e7

080071c0 <_Z12lcdSetCursortt>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	460a      	mov	r2, r1
 80071ca:	80fb      	strh	r3, [r7, #6]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 80071d0:	4a07      	ldr	r2, [pc, #28]	; (80071f0 <_Z12lcdSetCursortt+0x30>)
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 80071d6:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <_Z12lcdSetCursortt+0x30>)
 80071d8:	88bb      	ldrh	r3, [r7, #4]
 80071da:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 80071dc:	88bb      	ldrh	r3, [r7, #4]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	88b9      	ldrh	r1, [r7, #4]
 80071e2:	88f8      	ldrh	r0, [r7, #6]
 80071e4:	f000 f806 	bl	80071f4 <_Z12lcdSetWindowtttt>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200002e0 	.word	0x200002e0

080071f4 <_Z12lcdSetWindowtttt>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	4623      	mov	r3, r4
 8007204:	80fb      	strh	r3, [r7, #6]
 8007206:	4603      	mov	r3, r0
 8007208:	80bb      	strh	r3, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	807b      	strh	r3, [r7, #2]
 800720e:	4613      	mov	r3, r2
 8007210:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8007212:	202a      	movs	r0, #42	; 0x2a
 8007214:	f000 f880 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(x0 >> 8) ;
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f88a 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(x0 );
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f886 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(x1 >> 8);
 800722c:	887b      	ldrh	r3, [r7, #2]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	b29b      	uxth	r3, r3
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f880 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(x1);
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f87c 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8007240:	202b      	movs	r0, #43	; 0x2b
 8007242:	f000 f869 	bl	8007318 <_ZL15lcdWriteCommandh>
  lcdWriteData(y0 >> 8);
 8007246:	88bb      	ldrh	r3, [r7, #4]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	b29b      	uxth	r3, r3
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f873 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(y0);
 8007252:	88bb      	ldrh	r3, [r7, #4]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f86f 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(y1 >> 8);
 800725a:	883b      	ldrh	r3, [r7, #0]
 800725c:	0a1b      	lsrs	r3, r3, #8
 800725e:	b29b      	uxth	r3, r3
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f869 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteData(y1);
 8007266:	883b      	ldrh	r3, [r7, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f865 	bl	8007338 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800726e:	202c      	movs	r0, #44	; 0x2c
 8007270:	f000 f852 	bl	8007318 <_ZL15lcdWriteCommandh>
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bd90      	pop	{r4, r7, pc}

0800727c <_Z12lcdGetHeightv>:
{
  return lcdProperties.width;
}

uint16_t lcdGetHeight(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <_Z12lcdGetHeightv+0x14>)
 8007282:	885b      	ldrh	r3, [r3, #2]
}
 8007284:	4618      	mov	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20000018 	.word	0x20000018

08007294 <_Z14lcdGetTextFontv>:
{
  return lcdProperties.orientation;
}

sFONT* lcdGetTextFont(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <_Z14lcdGetTextFontv+0x14>)
 800729a:	689b      	ldr	r3, [r3, #8]
}
 800729c:	4618      	mov	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20000020 	.word	0x20000020

080072ac <_ZL13lcdDrawPixelsttPtm>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60ba      	str	r2, [r7, #8]
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	4603      	mov	r3, r0
 80072b8:	81fb      	strh	r3, [r7, #14]
 80072ba:	460b      	mov	r3, r1
 80072bc:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <_ZL13lcdDrawPixelsttPtm+0x54>)
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <_ZL13lcdDrawPixelsttPtm+0x54>)
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	89b9      	ldrh	r1, [r7, #12]
 80072d4:	89f8      	ldrh	r0, [r7, #14]
 80072d6:	f7ff ff8d 	bl	80071f4 <_Z12lcdSetWindowtttt>

  do
  {
    lcdWriteData(data[i++]);
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	6179      	str	r1, [r7, #20]
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f825 	bl	8007338 <_ZL12lcdWriteDatat>
  }
  while (i < dataLength);
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3f1      	bcc.n	80072da <_ZL13lcdDrawPixelsttPtm+0x2e>

}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000018 	.word	0x20000018

08007304 <_ZL8lcdResetv>:

static void lcdReset(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8007308:	2001      	movs	r0, #1
 800730a:	f000 f805 	bl	8007318 <_ZL15lcdWriteCommandh>
	HAL_Delay(5);
 800730e:	2005      	movs	r0, #5
 8007310:	f7f9 ff0e 	bl	8001130 <HAL_Delay>
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}

08007318 <_ZL15lcdWriteCommandh>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8007322:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8007326:	79fa      	ldrb	r2, [r7, #7]
 8007328:	b292      	uxth	r2, r2
 800732a:	801a      	strh	r2, [r3, #0]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <_ZL12lcdWriteDatat>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8007342:	4a04      	ldr	r2, [pc, #16]	; (8007354 <_ZL12lcdWriteDatat+0x1c>)
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	8013      	strh	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	60080000 	.word	0x60080000

08007358 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8007358:	b490      	push	{r4, r7}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	461a      	mov	r2, r3
 8007366:	4623      	mov	r3, r4
 8007368:	71fb      	strb	r3, [r7, #7]
 800736a:	4603      	mov	r3, r0
 800736c:	71bb      	strb	r3, [r7, #6]
 800736e:	460b      	mov	r3, r1
 8007370:	717b      	strb	r3, [r7, #5]
 8007372:	4613      	mov	r3, r2
 8007374:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) 	value 	|= ILI9341_MADCTL_MH;
 800737a:	7f3b      	ldrb	r3, [r7, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x30>
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	f043 0304 	orr.w	r3, r3, #4
 8007386:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) 		value 	|= ILI9341_MADCTL_BGR;
 8007388:	7e3b      	ldrb	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x3e>
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	f043 0308 	orr.w	r3, r3, #8
 8007394:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) 	value 	|= ILI9341_MADCTL_ML;
 8007396:	793b      	ldrb	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x4c>
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	f043 0310 	orr.w	r3, r3, #16
 80073a2:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) 	value 	|= ILI9341_MADCTL_MV;
 80073a4:	797b      	ldrb	r3, [r7, #5]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x5a>
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	f043 0320 	orr.w	r3, r3, #32
 80073b0:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) 	value 	|= ILI9341_MADCTL_MX;
 80073b2:	79bb      	ldrb	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x68>
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073be:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) 		value 	|= ILI9341_MADCTL_MY;
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x76>
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073cc:	73fb      	strb	r3, [r7, #15]
  return value;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc90      	pop	{r4, r7}
 80073d8:	4770      	bx	lr
	...

080073dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073ec:	f002 fc2e 	bl	8009c4c <USBD_static_malloc>
 80073f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	2100      	movs	r1, #0
 8007404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007408:	2302      	movs	r3, #2
 800740a:	e0d4      	b.n	80075b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800740c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007410:	2100      	movs	r1, #0
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f002 fc7e 	bl	8009d14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32b0      	adds	r2, #176	; 0xb0
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	; 0xb0
 8007432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7c1b      	ldrb	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d138      	bne.n	80074b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007444:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <USBD_CDC_Init+0x1e4>)
 8007446:	7819      	ldrb	r1, [r3, #0]
 8007448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800744c:	2202      	movs	r2, #2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f002 fad9 	bl	8009a06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007454:	4b5a      	ldr	r3, [pc, #360]	; (80075c0 <USBD_CDC_Init+0x1e4>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 020f 	and.w	r2, r3, #15
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	3324      	adds	r3, #36	; 0x24
 800746a:	2201      	movs	r2, #1
 800746c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800746e:	4b55      	ldr	r3, [pc, #340]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 8007470:	7819      	ldrb	r1, [r3, #0]
 8007472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007476:	2202      	movs	r2, #2
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 fac4 	bl	8009a06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800747e:	4b51      	ldr	r3, [pc, #324]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f003 020f 	and.w	r2, r3, #15
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007496:	2201      	movs	r2, #1
 8007498:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800749a:	4b4b      	ldr	r3, [pc, #300]	; (80075c8 <USBD_CDC_Init+0x1ec>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f003 020f 	and.w	r2, r3, #15
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	3326      	adds	r3, #38	; 0x26
 80074b0:	2210      	movs	r2, #16
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e035      	b.n	8007522 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074b6:	4b42      	ldr	r3, [pc, #264]	; (80075c0 <USBD_CDC_Init+0x1e4>)
 80074b8:	7819      	ldrb	r1, [r3, #0]
 80074ba:	2340      	movs	r3, #64	; 0x40
 80074bc:	2202      	movs	r2, #2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f002 faa1 	bl	8009a06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074c4:	4b3e      	ldr	r3, [pc, #248]	; (80075c0 <USBD_CDC_Init+0x1e4>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3324      	adds	r3, #36	; 0x24
 80074da:	2201      	movs	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074de:	4b39      	ldr	r3, [pc, #228]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 80074e0:	7819      	ldrb	r1, [r3, #0]
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	2202      	movs	r2, #2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f002 fa8d 	bl	8009a06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007504:	2201      	movs	r2, #1
 8007506:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007508:	4b2f      	ldr	r3, [pc, #188]	; (80075c8 <USBD_CDC_Init+0x1ec>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3326      	adds	r3, #38	; 0x26
 800751e:	2210      	movs	r2, #16
 8007520:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007522:	4b29      	ldr	r3, [pc, #164]	; (80075c8 <USBD_CDC_Init+0x1ec>)
 8007524:	7819      	ldrb	r1, [r3, #0]
 8007526:	2308      	movs	r3, #8
 8007528:	2203      	movs	r2, #3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f002 fa6b 	bl	8009a06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <USBD_CDC_Init+0x1ec>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	3324      	adds	r3, #36	; 0x24
 8007546:	2201      	movs	r2, #1
 8007548:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	33b0      	adds	r3, #176	; 0xb0
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007580:	2302      	movs	r3, #2
 8007582:	e018      	b.n	80075b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7c1b      	ldrb	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 800758e:	7819      	ldrb	r1, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f002 fb22 	bl	8009be4 <USBD_LL_PrepareReceive>
 80075a0:	e008      	b.n	80075b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <USBD_CDC_Init+0x1e8>)
 80075a4:	7819      	ldrb	r1, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f002 fb18 	bl	8009be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200000db 	.word	0x200000db
 80075c4:	200000dc 	.word	0x200000dc
 80075c8:	200000dd 	.word	0x200000dd

080075cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075d8:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <USBD_CDC_DeInit+0xf8>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f002 fa37 	bl	8009a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075e4:	4b37      	ldr	r3, [pc, #220]	; (80076c4 <USBD_CDC_DeInit+0xf8>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	2200      	movs	r2, #0
 80075fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075fe:	4b32      	ldr	r3, [pc, #200]	; (80076c8 <USBD_CDC_DeInit+0xfc>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f002 fa24 	bl	8009a52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800760a:	4b2f      	ldr	r3, [pc, #188]	; (80076c8 <USBD_CDC_DeInit+0xfc>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 020f 	and.w	r2, r3, #15
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007622:	2200      	movs	r2, #0
 8007624:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <USBD_CDC_DeInit+0x100>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f002 fa10 	bl	8009a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007632:	4b26      	ldr	r3, [pc, #152]	; (80076cc <USBD_CDC_DeInit+0x100>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3324      	adds	r3, #36	; 0x24
 8007648:	2200      	movs	r2, #0
 800764a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <USBD_CDC_DeInit+0x100>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 020f 	and.w	r2, r3, #15
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	3326      	adds	r3, #38	; 0x26
 8007662:	2200      	movs	r2, #0
 8007664:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	; 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01f      	beq.n	80076b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	33b0      	adds	r3, #176	; 0xb0
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	32b0      	adds	r2, #176	; 0xb0
 8007696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769a:	4618      	mov	r0, r3
 800769c:	f002 fae4 	bl	8009c68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32b0      	adds	r2, #176	; 0xb0
 80076aa:	2100      	movs	r1, #0
 80076ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200000db 	.word	0x200000db
 80076c8:	200000dc 	.word	0x200000dc
 80076cc:	200000dd 	.word	0x200000dd

080076d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	32b0      	adds	r2, #176	; 0xb0
 80076e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e0bf      	b.n	8007880 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007708:	2b00      	cmp	r3, #0
 800770a:	d050      	beq.n	80077ae <USBD_CDC_Setup+0xde>
 800770c:	2b20      	cmp	r3, #32
 800770e:	f040 80af 	bne.w	8007870 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d03a      	beq.n	8007790 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b25b      	sxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	da1b      	bge.n	800775c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	33b0      	adds	r3, #176	; 0xb0
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800773a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	88d2      	ldrh	r2, [r2, #6]
 8007740:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b07      	cmp	r3, #7
 8007748:	bf28      	it	cs
 800774a:	2307      	movcs	r3, #7
 800774c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	89fa      	ldrh	r2, [r7, #14]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fd49 	bl	80091ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800775a:	e090      	b.n	800787e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	785a      	ldrb	r2, [r3, #1]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b3f      	cmp	r3, #63	; 0x3f
 800776c:	d803      	bhi.n	8007776 <USBD_CDC_Setup+0xa6>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	e000      	b.n	8007778 <USBD_CDC_Setup+0xa8>
 8007776:	2240      	movs	r2, #64	; 0x40
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800777e:	6939      	ldr	r1, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007786:	461a      	mov	r2, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fd5b 	bl	8009244 <USBD_CtlPrepareRx>
      break;
 800778e:	e076      	b.n	800787e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	33b0      	adds	r3, #176	; 0xb0
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	7850      	ldrb	r0, [r2, #1]
 80077a6:	2200      	movs	r2, #0
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4798      	blx	r3
      break;
 80077ac:	e067      	b.n	800787e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b0b      	cmp	r3, #11
 80077b4:	d851      	bhi.n	800785a <USBD_CDC_Setup+0x18a>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <USBD_CDC_Setup+0xec>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077ed 	.word	0x080077ed
 80077c0:	08007869 	.word	0x08007869
 80077c4:	0800785b 	.word	0x0800785b
 80077c8:	0800785b 	.word	0x0800785b
 80077cc:	0800785b 	.word	0x0800785b
 80077d0:	0800785b 	.word	0x0800785b
 80077d4:	0800785b 	.word	0x0800785b
 80077d8:	0800785b 	.word	0x0800785b
 80077dc:	0800785b 	.word	0x0800785b
 80077e0:	0800785b 	.word	0x0800785b
 80077e4:	08007817 	.word	0x08007817
 80077e8:	08007841 	.word	0x08007841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d107      	bne.n	8007808 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077f8:	f107 030a 	add.w	r3, r7, #10
 80077fc:	2202      	movs	r2, #2
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fcf3 	bl	80091ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007806:	e032      	b.n	800786e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fc7d 	bl	800910a <USBD_CtlError>
            ret = USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	75fb      	strb	r3, [r7, #23]
          break;
 8007814:	e02b      	b.n	800786e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d107      	bne.n	8007832 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007822:	f107 030d 	add.w	r3, r7, #13
 8007826:	2201      	movs	r2, #1
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fcde 	bl	80091ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007830:	e01d      	b.n	800786e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 fc68 	bl	800910a <USBD_CtlError>
            ret = USBD_FAIL;
 800783a:	2303      	movs	r3, #3
 800783c:	75fb      	strb	r3, [r7, #23]
          break;
 800783e:	e016      	b.n	800786e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b03      	cmp	r3, #3
 800784a:	d00f      	beq.n	800786c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fc5b 	bl	800910a <USBD_CtlError>
            ret = USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007858:	e008      	b.n	800786c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fc54 	bl	800910a <USBD_CtlError>
          ret = USBD_FAIL;
 8007862:	2303      	movs	r3, #3
 8007864:	75fb      	strb	r3, [r7, #23]
          break;
 8007866:	e002      	b.n	800786e <USBD_CDC_Setup+0x19e>
          break;
 8007868:	bf00      	nop
 800786a:	e008      	b.n	800787e <USBD_CDC_Setup+0x1ae>
          break;
 800786c:	bf00      	nop
      }
      break;
 800786e:	e006      	b.n	800787e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fc49 	bl	800910a <USBD_CtlError>
      ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	75fb      	strb	r3, [r7, #23]
      break;
 800787c:	bf00      	nop
  }

  return (uint8_t)ret;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800789a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32b0      	adds	r2, #176	; 0xb0
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e065      	b.n	800797e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	32b0      	adds	r2, #176	; 0xb0
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	f003 020f 	and.w	r2, r3, #15
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	3318      	adds	r3, #24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d02f      	beq.n	800793c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f003 020f 	and.w	r2, r3, #15
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3318      	adds	r3, #24
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	f003 010f 	and.w	r1, r3, #15
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	460b      	mov	r3, r1
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	440b      	add	r3, r1
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4403      	add	r3, r0
 8007904:	331c      	adds	r3, #28
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	fbb2 f1f3 	udiv	r1, r2, r3
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007912:	2b00      	cmp	r3, #0
 8007914:	d112      	bne.n	800793c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3318      	adds	r3, #24
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800792e:	78f9      	ldrb	r1, [r7, #3]
 8007930:	2300      	movs	r3, #0
 8007932:	2200      	movs	r2, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f002 f934 	bl	8009ba2 <USBD_LL_Transmit>
 800793a:	e01f      	b.n	800797c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	33b0      	adds	r3, #176	; 0xb0
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d010      	beq.n	800797c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	33b0      	adds	r3, #176	; 0xb0
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	32b0      	adds	r2, #176	; 0xb0
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32b0      	adds	r2, #176	; 0xb0
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e01a      	b.n	80079ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f002 f932 	bl	8009c26 <USBD_LL_GetRxDataSize>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	33b0      	adds	r3, #176	; 0xb0
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079e8:	4611      	mov	r1, r2
 80079ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	32b0      	adds	r2, #176	; 0xb0
 8007a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e025      	b.n	8007a64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	33b0      	adds	r3, #176	; 0xb0
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01a      	beq.n	8007a62 <USBD_CDC_EP0_RxReady+0x6c>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a32:	2bff      	cmp	r3, #255	; 0xff
 8007a34:	d015      	beq.n	8007a62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	33b0      	adds	r3, #176	; 0xb0
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a56:	b292      	uxth	r2, r2
 8007a58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a74:	2182      	movs	r1, #130	; 0x82
 8007a76:	4818      	ldr	r0, [pc, #96]	; (8007ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a78:	f000 fd0f 	bl	800849a <USBD_GetEpDesc>
 8007a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4815      	ldr	r0, [pc, #84]	; (8007ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a82:	f000 fd0a 	bl	800849a <USBD_GetEpDesc>
 8007a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a88:	2181      	movs	r1, #129	; 0x81
 8007a8a:	4813      	ldr	r0, [pc, #76]	; (8007ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a8c:	f000 fd05 	bl	800849a <USBD_GetEpDesc>
 8007a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aac:	711a      	strb	r2, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ac0:	711a      	strb	r2, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2243      	movs	r2, #67	; 0x43
 8007aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000098 	.word	0x20000098

08007adc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ae4:	2182      	movs	r1, #130	; 0x82
 8007ae6:	4818      	ldr	r0, [pc, #96]	; (8007b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ae8:	f000 fcd7 	bl	800849a <USBD_GetEpDesc>
 8007aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aee:	2101      	movs	r1, #1
 8007af0:	4815      	ldr	r0, [pc, #84]	; (8007b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007af2:	f000 fcd2 	bl	800849a <USBD_GetEpDesc>
 8007af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007af8:	2181      	movs	r1, #129	; 0x81
 8007afa:	4813      	ldr	r0, [pc, #76]	; (8007b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007afc:	f000 fccd 	bl	800849a <USBD_GetEpDesc>
 8007b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2210      	movs	r2, #16
 8007b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2200      	movs	r2, #0
 8007b18:	711a      	strb	r2, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f042 0202 	orr.w	r2, r2, #2
 8007b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d006      	beq.n	8007b36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	711a      	strb	r2, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f042 0202 	orr.w	r2, r2, #2
 8007b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2243      	movs	r2, #67	; 0x43
 8007b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000098 	.word	0x20000098

08007b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b54:	2182      	movs	r1, #130	; 0x82
 8007b56:	4818      	ldr	r0, [pc, #96]	; (8007bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b58:	f000 fc9f 	bl	800849a <USBD_GetEpDesc>
 8007b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4815      	ldr	r0, [pc, #84]	; (8007bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b62:	f000 fc9a 	bl	800849a <USBD_GetEpDesc>
 8007b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b68:	2181      	movs	r1, #129	; 0x81
 8007b6a:	4813      	ldr	r0, [pc, #76]	; (8007bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b6c:	f000 fc95 	bl	800849a <USBD_GetEpDesc>
 8007b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b8c:	711a      	strb	r2, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d006      	beq.n	8007ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ba0:	711a      	strb	r2, [r3, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2243      	movs	r2, #67	; 0x43
 8007baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007bac:	4b02      	ldr	r3, [pc, #8]	; (8007bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000098 	.word	0x20000098

08007bbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	220a      	movs	r2, #10
 8007bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bca:	4b03      	ldr	r3, [pc, #12]	; (8007bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	20000054 	.word	0x20000054

08007bdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e009      	b.n	8007c04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	33b0      	adds	r3, #176	; 0xb0
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	32b0      	adds	r2, #176	; 0xb0
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e008      	b.n	8007c48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	32b0      	adds	r2, #176	; 0xb0
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e004      	b.n	8007c82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32b0      	adds	r2, #176	; 0xb0
 8007ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32b0      	adds	r2, #176	; 0xb0
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e018      	b.n	8007cf0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7c1b      	ldrb	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <USBD_CDC_ReceivePacket+0x68>)
 8007cc8:	7819      	ldrb	r1, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 ff85 	bl	8009be4 <USBD_LL_PrepareReceive>
 8007cda:	e008      	b.n	8007cee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <USBD_CDC_ReceivePacket+0x68>)
 8007cde:	7819      	ldrb	r1, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 ff7b 	bl	8009be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200000dc 	.word	0x200000dc

08007cfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e01f      	b.n	8007d54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	79fa      	ldrb	r2, [r7, #7]
 8007d46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 fdf5 	bl	8009938 <USBD_LL_Init>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e025      	b.n	8007dc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	32ae      	adds	r2, #174	; 0xae
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00f      	beq.n	8007db0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32ae      	adds	r2, #174	; 0xae
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	f107 020e 	add.w	r2, r7, #14
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	4602      	mov	r2, r0
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fdfd 	bl	80099d0 <USBD_LL_Start>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 f90e 	bl	8009096 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d01a      	beq.n	8007ed4 <USBD_LL_SetupStage+0x72>
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d822      	bhi.n	8007ee8 <USBD_LL_SetupStage+0x86>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <USBD_LL_SetupStage+0x4a>
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d00a      	beq.n	8007ec0 <USBD_LL_SetupStage+0x5e>
 8007eaa:	e01d      	b.n	8007ee8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fb65 	bl	8008584 <USBD_StdDevReq>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebe:	e020      	b.n	8007f02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbcd 	bl	8008668 <USBD_StdItfReq>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e016      	b.n	8007f02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc2f 	bl	8008740 <USBD_StdEPReq>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee6:	e00c      	b.n	8007f02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 fdca 	bl	8009a90 <USBD_LL_StallEP>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
      break;
 8007f00:	bf00      	nop
  }

  return ret;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	460b      	mov	r3, r1
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d16e      	bne.n	8008002 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	f040 8098 	bne.w	8008068 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d913      	bls.n	8007f6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	1ad2      	subs	r2, r2, r3
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	bf28      	it	cs
 8007f5e:	4613      	movcs	r3, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 f98a 	bl	800927e <USBD_CtlContinueRx>
 8007f6a:	e07d      	b.n	8008068 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d014      	beq.n	8007fa4 <USBD_LL_DataOutStage+0x98>
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d81d      	bhi.n	8007fba <USBD_LL_DataOutStage+0xae>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <USBD_LL_DataOutStage+0x7c>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d003      	beq.n	8007f8e <USBD_LL_DataOutStage+0x82>
 8007f86:	e018      	b.n	8007fba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75bb      	strb	r3, [r7, #22]
            break;
 8007f8c:	e018      	b.n	8007fc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	4619      	mov	r1, r3
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 fa64 	bl	8008466 <USBD_CoreFindIF>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75bb      	strb	r3, [r7, #22]
            break;
 8007fa2:	e00d      	b.n	8007fc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	4619      	mov	r1, r3
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fa66 	bl	8008480 <USBD_CoreFindEP>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fb8:	e002      	b.n	8007fc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75bb      	strb	r3, [r7, #22]
            break;
 8007fbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fc0:	7dbb      	ldrb	r3, [r7, #22]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d119      	bne.n	8007ffa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d113      	bne.n	8007ffa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fd2:	7dba      	ldrb	r2, [r7, #22]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	32ae      	adds	r2, #174	; 0xae
 8007fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007fe2:	7dba      	ldrb	r2, [r7, #22]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fea:	7dba      	ldrb	r2, [r7, #22]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	32ae      	adds	r2, #174	; 0xae
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 f950 	bl	80092a0 <USBD_CtlSendStatus>
 8008000:	e032      	b.n	8008068 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008008:	b2db      	uxtb	r3, r3
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fa37 	bl	8008480 <USBD_CoreFindEP>
 8008012:	4603      	mov	r3, r0
 8008014:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008016:	7dbb      	ldrb	r3, [r7, #22]
 8008018:	2bff      	cmp	r3, #255	; 0xff
 800801a:	d025      	beq.n	8008068 <USBD_LL_DataOutStage+0x15c>
 800801c:	7dbb      	ldrb	r3, [r7, #22]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d122      	bne.n	8008068 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d117      	bne.n	800805e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	32ae      	adds	r2, #174	; 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00f      	beq.n	800805e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800803e:	7dba      	ldrb	r2, [r7, #22]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008046:	7dba      	ldrb	r2, [r7, #22]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	32ae      	adds	r2, #174	; 0xae
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	7afa      	ldrb	r2, [r7, #11]
 8008054:	4611      	mov	r1, r2
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	e000      	b.n	800806a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d16f      	bne.n	8008166 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3314      	adds	r3, #20
 800808a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008092:	2b02      	cmp	r3, #2
 8008094:	d15a      	bne.n	800814c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d914      	bls.n	80080cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f001 f8b2 	bl	8009222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080be:	2300      	movs	r3, #0
 80080c0:	2200      	movs	r2, #0
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f001 fd8d 	bl	8009be4 <USBD_LL_PrepareReceive>
 80080ca:	e03f      	b.n	800814c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d11c      	bne.n	8008112 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d316      	bcc.n	8008112 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d20f      	bcs.n	8008112 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f001 f893 	bl	8009222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008104:	2300      	movs	r3, #0
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 fd6a 	bl	8009be4 <USBD_LL_PrepareReceive>
 8008110:	e01c      	b.n	800814c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d10f      	bne.n	800813e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f001 fca5 	bl	8009a90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f001 f8bd 	bl	80092c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d03a      	beq.n	80081cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fe42 	bl	8007de0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008164:	e032      	b.n	80081cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800816c:	b2db      	uxtb	r3, r3
 800816e:	4619      	mov	r1, r3
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f985 	bl	8008480 <USBD_CoreFindEP>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	2bff      	cmp	r3, #255	; 0xff
 800817e:	d025      	beq.n	80081cc <USBD_LL_DataInStage+0x15a>
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d122      	bne.n	80081cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b03      	cmp	r3, #3
 8008190:	d11c      	bne.n	80081cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008192:	7dfa      	ldrb	r2, [r7, #23]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	32ae      	adds	r2, #174	; 0xae
 8008198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d014      	beq.n	80081cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081a2:	7dfa      	ldrb	r2, [r7, #23]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081aa:	7dfa      	ldrb	r2, [r7, #23]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	32ae      	adds	r2, #174	; 0xae
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	7afa      	ldrb	r2, [r7, #11]
 80081b8:	4611      	mov	r1, r2
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081c2:	7dbb      	ldrb	r3, [r7, #22]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081c8:	7dbb      	ldrb	r3, [r7, #22]
 80081ca:	e000      	b.n	80081ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d014      	beq.n	800823c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00e      	beq.n	800823c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6852      	ldr	r2, [r2, #4]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	4611      	mov	r1, r2
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fbdf 	bl	8009a06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2240      	movs	r2, #64	; 0x40
 8008254:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008258:	2340      	movs	r3, #64	; 0x40
 800825a:	2200      	movs	r2, #0
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 fbd1 	bl	8009a06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2240      	movs	r2, #64	; 0x40
 800826e:	621a      	str	r2, [r3, #32]

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d006      	beq.n	80082bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2204      	movs	r2, #4
 80082c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d106      	bne.n	80082f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b03      	cmp	r3, #3
 8008314:	d110      	bne.n	8008338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	32ae      	adds	r2, #174	; 0xae
 8008358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	e01c      	b.n	800839e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b03      	cmp	r3, #3
 800836e:	d115      	bne.n	800839c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	; 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32ae      	adds	r2, #174	; 0xae
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	4611      	mov	r1, r2
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	32ae      	adds	r2, #174	; 0xae
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e01c      	b.n	8008402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d115      	bne.n	8008400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	; 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	4611      	mov	r1, r2
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6852      	ldr	r2, [r2, #4]
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	4611      	mov	r1, r2
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008458:	2303      	movs	r3, #3
 800845a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008472:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800848c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	429a      	cmp	r2, r3
 80084c0:	d920      	bls.n	8008504 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084ca:	e013      	b.n	80084f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084cc:	f107 030a 	add.w	r3, r7, #10
 80084d0:	4619      	mov	r1, r3
 80084d2:	6978      	ldr	r0, [r7, #20]
 80084d4:	f000 f81b 	bl	800850e <USBD_GetNextDesc>
 80084d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b05      	cmp	r3, #5
 80084e0:	d108      	bne.n	80084f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	78fa      	ldrb	r2, [r7, #3]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d008      	beq.n	8008502 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	885b      	ldrh	r3, [r3, #2]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	897b      	ldrh	r3, [r7, #10]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d8e5      	bhi.n	80084cc <USBD_GetEpDesc+0x32>
 8008500:	e000      	b.n	8008504 <USBD_GetEpDesc+0x6a>
          break;
 8008502:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008504:	693b      	ldr	r3, [r7, #16]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	4413      	add	r3, r2
 8008528:	b29a      	uxth	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4413      	add	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800853a:	68fb      	ldr	r3, [r7, #12]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3301      	adds	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008566:	8a3b      	ldrh	r3, [r7, #16]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b21a      	sxth	r2, r3
 800856c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008570:	4313      	orrs	r3, r2
 8008572:	b21b      	sxth	r3, r3
 8008574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008576:	89fb      	ldrh	r3, [r7, #14]
}
 8008578:	4618      	mov	r0, r3
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d005      	beq.n	80085aa <USBD_StdDevReq+0x26>
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d857      	bhi.n	8008652 <USBD_StdDevReq+0xce>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00f      	beq.n	80085c6 <USBD_StdDevReq+0x42>
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d153      	bne.n	8008652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	32ae      	adds	r2, #174	; 0xae
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	e04a      	b.n	800865c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d83b      	bhi.n	8008646 <USBD_StdDevReq+0xc2>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_StdDevReq+0x50>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008629 	.word	0x08008629
 80085d8:	0800863d 	.word	0x0800863d
 80085dc:	08008647 	.word	0x08008647
 80085e0:	08008633 	.word	0x08008633
 80085e4:	08008647 	.word	0x08008647
 80085e8:	08008607 	.word	0x08008607
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	08008647 	.word	0x08008647
 80085f4:	0800861f 	.word	0x0800861f
 80085f8:	08008611 	.word	0x08008611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa3c 	bl	8008a7c <USBD_GetDescriptor>
          break;
 8008604:	e024      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fba1 	bl	8008d50 <USBD_SetAddress>
          break;
 800860e:	e01f      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fbe0 	bl	8008dd8 <USBD_SetConfig>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
          break;
 800861c:	e018      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc83 	bl	8008f2c <USBD_GetConfig>
          break;
 8008626:	e013      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fcb4 	bl	8008f98 <USBD_GetStatus>
          break;
 8008630:	e00e      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fce3 	bl	8009000 <USBD_SetFeature>
          break;
 800863a:	e009      	b.n	8008650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fd07 	bl	8009052 <USBD_ClrFeature>
          break;
 8008644:	e004      	b.n	8008650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fd5e 	bl	800910a <USBD_CtlError>
          break;
 800864e:	bf00      	nop
      }
      break;
 8008650:	e004      	b.n	800865c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fd58 	bl	800910a <USBD_CtlError>
      break;
 800865a:	bf00      	nop
  }

  return ret;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop

08008668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d005      	beq.n	800868e <USBD_StdItfReq+0x26>
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d852      	bhi.n	800872c <USBD_StdItfReq+0xc4>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <USBD_StdItfReq+0x26>
 800868a:	2b20      	cmp	r3, #32
 800868c:	d14e      	bne.n	800872c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	b2db      	uxtb	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	2b02      	cmp	r3, #2
 800869a:	d840      	bhi.n	800871e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	889b      	ldrh	r3, [r3, #4]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d836      	bhi.n	8008714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	889b      	ldrh	r3, [r3, #4]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff fed9 	bl	8008466 <USBD_CoreFindIF>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2bff      	cmp	r3, #255	; 0xff
 80086bc:	d01d      	beq.n	80086fa <USBD_StdItfReq+0x92>
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11a      	bne.n	80086fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086c4:	7bba      	ldrb	r2, [r7, #14]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	; 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00f      	beq.n	80086f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086dc:	7bba      	ldrb	r2, [r7, #14]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32ae      	adds	r2, #174	; 0xae
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086f2:	e004      	b.n	80086fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086f8:	e001      	b.n	80086fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	88db      	ldrh	r3, [r3, #6]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d110      	bne.n	8008728 <USBD_StdItfReq+0xc0>
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fdc7 	bl	80092a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008712:	e009      	b.n	8008728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fcf7 	bl	800910a <USBD_CtlError>
          break;
 800871c:	e004      	b.n	8008728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fcf2 	bl	800910a <USBD_CtlError>
          break;
 8008726:	e000      	b.n	800872a <USBD_StdItfReq+0xc2>
          break;
 8008728:	bf00      	nop
      }
      break;
 800872a:	e004      	b.n	8008736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fceb 	bl	800910a <USBD_CtlError>
      break;
 8008734:	bf00      	nop
  }

  return ret;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	889b      	ldrh	r3, [r3, #4]
 8008752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d007      	beq.n	8008770 <USBD_StdEPReq+0x30>
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	f200 817f 	bhi.w	8008a64 <USBD_StdEPReq+0x324>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02a      	beq.n	80087c0 <USBD_StdEPReq+0x80>
 800876a:	2b20      	cmp	r3, #32
 800876c:	f040 817a 	bne.w	8008a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff fe83 	bl	8008480 <USBD_CoreFindEP>
 800877a:	4603      	mov	r3, r0
 800877c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800877e:	7b7b      	ldrb	r3, [r7, #13]
 8008780:	2bff      	cmp	r3, #255	; 0xff
 8008782:	f000 8174 	beq.w	8008a6e <USBD_StdEPReq+0x32e>
 8008786:	7b7b      	ldrb	r3, [r7, #13]
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 8170 	bne.w	8008a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800878e:	7b7a      	ldrb	r2, [r7, #13]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008796:	7b7a      	ldrb	r2, [r7, #13]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32ae      	adds	r2, #174	; 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8163 	beq.w	8008a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087a8:	7b7a      	ldrb	r2, [r7, #13]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32ae      	adds	r2, #174	; 0xae
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087be:	e156      	b.n	8008a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d008      	beq.n	80087da <USBD_StdEPReq+0x9a>
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	f300 8145 	bgt.w	8008a58 <USBD_StdEPReq+0x318>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 809b 	beq.w	800890a <USBD_StdEPReq+0x1ca>
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d03c      	beq.n	8008852 <USBD_StdEPReq+0x112>
 80087d8:	e13e      	b.n	8008a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d002      	beq.n	80087ec <USBD_StdEPReq+0xac>
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d016      	beq.n	8008818 <USBD_StdEPReq+0xd8>
 80087ea:	e02c      	b.n	8008846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00d      	beq.n	800880e <USBD_StdEPReq+0xce>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d00a      	beq.n	800880e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 f947 	bl	8009a90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f943 	bl	8009a90 <USBD_LL_StallEP>
 800880a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800880c:	e020      	b.n	8008850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc7a 	bl	800910a <USBD_CtlError>
              break;
 8008816:	e01b      	b.n	8008850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	885b      	ldrh	r3, [r3, #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10e      	bne.n	800883e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00b      	beq.n	800883e <USBD_StdEPReq+0xfe>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b80      	cmp	r3, #128	; 0x80
 800882a:	d008      	beq.n	800883e <USBD_StdEPReq+0xfe>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	88db      	ldrh	r3, [r3, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d104      	bne.n	800883e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f929 	bl	8009a90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fd2e 	bl	80092a0 <USBD_CtlSendStatus>

              break;
 8008844:	e004      	b.n	8008850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fc5e 	bl	800910a <USBD_CtlError>
              break;
 800884e:	bf00      	nop
          }
          break;
 8008850:	e107      	b.n	8008a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d002      	beq.n	8008864 <USBD_StdEPReq+0x124>
 800885e:	2b03      	cmp	r3, #3
 8008860:	d016      	beq.n	8008890 <USBD_StdEPReq+0x150>
 8008862:	e04b      	b.n	80088fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <USBD_StdEPReq+0x146>
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b80      	cmp	r3, #128	; 0x80
 800886e:	d00a      	beq.n	8008886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f90b 	bl	8009a90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800887a:	2180      	movs	r1, #128	; 0x80
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f907 	bl	8009a90 <USBD_LL_StallEP>
 8008882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008884:	e040      	b.n	8008908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc3e 	bl	800910a <USBD_CtlError>
              break;
 800888e:	e03b      	b.n	8008908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d136      	bne.n	8008906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f911 	bl	8009ace <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fcf7 	bl	80092a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fde2 	bl	8008480 <USBD_CoreFindEP>
 80088bc:	4603      	mov	r3, r0
 80088be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088c0:	7b7b      	ldrb	r3, [r7, #13]
 80088c2:	2bff      	cmp	r3, #255	; 0xff
 80088c4:	d01f      	beq.n	8008906 <USBD_StdEPReq+0x1c6>
 80088c6:	7b7b      	ldrb	r3, [r7, #13]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11c      	bne.n	8008906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088cc:	7b7a      	ldrb	r2, [r7, #13]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088d4:	7b7a      	ldrb	r2, [r7, #13]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32ae      	adds	r2, #174	; 0xae
 80088da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088e4:	7b7a      	ldrb	r2, [r7, #13]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32ae      	adds	r2, #174	; 0xae
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80088fa:	e004      	b.n	8008906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fc03 	bl	800910a <USBD_CtlError>
              break;
 8008904:	e000      	b.n	8008908 <USBD_StdEPReq+0x1c8>
              break;
 8008906:	bf00      	nop
          }
          break;
 8008908:	e0ab      	b.n	8008a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d002      	beq.n	800891c <USBD_StdEPReq+0x1dc>
 8008916:	2b03      	cmp	r3, #3
 8008918:	d032      	beq.n	8008980 <USBD_StdEPReq+0x240>
 800891a:	e097      	b.n	8008a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <USBD_StdEPReq+0x1f2>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b80      	cmp	r3, #128	; 0x80
 8008926:	d004      	beq.n	8008932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fbed 	bl	800910a <USBD_CtlError>
                break;
 8008930:	e091      	b.n	8008a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008936:	2b00      	cmp	r3, #0
 8008938:	da0b      	bge.n	8008952 <USBD_StdEPReq+0x212>
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	3310      	adds	r3, #16
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	3304      	adds	r3, #4
 8008950:	e00b      	b.n	800896a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	4413      	add	r3, r2
 8008968:	3304      	adds	r3, #4
 800896a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2202      	movs	r2, #2
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fc37 	bl	80091ec <USBD_CtlSendData>
              break;
 800897e:	e06a      	b.n	8008a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	da11      	bge.n	80089ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	f003 020f 	and.w	r2, r3, #15
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	3324      	adds	r3, #36	; 0x24
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d117      	bne.n	80089d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fbb0 	bl	800910a <USBD_CtlError>
                  break;
 80089aa:	e054      	b.n	8008a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	f003 020f 	and.w	r2, r3, #15
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb9d 	bl	800910a <USBD_CtlError>
                  break;
 80089d0:	e041      	b.n	8008a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da0b      	bge.n	80089f2 <USBD_StdEPReq+0x2b2>
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	3310      	adds	r3, #16
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	3304      	adds	r3, #4
 80089f0:	e00b      	b.n	8008a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	3304      	adds	r3, #4
 8008a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <USBD_StdEPReq+0x2d8>
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b80      	cmp	r3, #128	; 0x80
 8008a16:	d103      	bne.n	8008a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e00e      	b.n	8008a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f871 	bl	8009b0c <USBD_LL_IsStallEP>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e002      	b.n	8008a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2202      	movs	r2, #2
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fbd1 	bl	80091ec <USBD_CtlSendData>
              break;
 8008a4a:	e004      	b.n	8008a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fb5b 	bl	800910a <USBD_CtlError>
              break;
 8008a54:	bf00      	nop
          }
          break;
 8008a56:	e004      	b.n	8008a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fb55 	bl	800910a <USBD_CtlError>
          break;
 8008a60:	bf00      	nop
      }
      break;
 8008a62:	e005      	b.n	8008a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fb4f 	bl	800910a <USBD_CtlError>
      break;
 8008a6c:	e000      	b.n	8008a70 <USBD_StdEPReq+0x330>
      break;
 8008a6e:	bf00      	nop
  }

  return ret;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b06      	cmp	r3, #6
 8008a9e:	f200 8128 	bhi.w	8008cf2 <USBD_GetDescriptor+0x276>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <USBD_GetDescriptor+0x2c>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008ac5 	.word	0x08008ac5
 8008aac:	08008add 	.word	0x08008add
 8008ab0:	08008b1d 	.word	0x08008b1d
 8008ab4:	08008cf3 	.word	0x08008cf3
 8008ab8:	08008cf3 	.word	0x08008cf3
 8008abc:	08008c93 	.word	0x08008c93
 8008ac0:	08008cbf 	.word	0x08008cbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	7c12      	ldrb	r2, [r2, #16]
 8008ad0:	f107 0108 	add.w	r1, r7, #8
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	60f8      	str	r0, [r7, #12]
      break;
 8008ada:	e112      	b.n	8008d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7c1b      	ldrb	r3, [r3, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10d      	bne.n	8008b00 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	f107 0208 	add.w	r2, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	2202      	movs	r2, #2
 8008afc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008afe:	e100      	b.n	8008d02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	f107 0208 	add.w	r2, r7, #8
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	2202      	movs	r2, #2
 8008b18:	701a      	strb	r2, [r3, #0]
      break;
 8008b1a:	e0f2      	b.n	8008d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	885b      	ldrh	r3, [r3, #2]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	f200 80ac 	bhi.w	8008c80 <USBD_GetDescriptor+0x204>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <USBD_GetDescriptor+0xb4>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b7d 	.word	0x08008b7d
 8008b38:	08008bb1 	.word	0x08008bb1
 8008b3c:	08008be5 	.word	0x08008be5
 8008b40:	08008c19 	.word	0x08008c19
 8008b44:	08008c4d 	.word	0x08008c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	7c12      	ldrb	r2, [r2, #16]
 8008b60:	f107 0108 	add.w	r1, r7, #8
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
 8008b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b6a:	e091      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 facb 	bl	800910a <USBD_CtlError>
            err++;
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	3301      	adds	r3, #1
 8008b78:	72fb      	strb	r3, [r7, #11]
          break;
 8008b7a:	e089      	b.n	8008c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	7c12      	ldrb	r2, [r2, #16]
 8008b94:	f107 0108 	add.w	r1, r7, #8
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4798      	blx	r3
 8008b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b9e:	e077      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fab1 	bl	800910a <USBD_CtlError>
            err++;
 8008ba8:	7afb      	ldrb	r3, [r7, #11]
 8008baa:	3301      	adds	r3, #1
 8008bac:	72fb      	strb	r3, [r7, #11]
          break;
 8008bae:	e06f      	b.n	8008c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7c12      	ldrb	r2, [r2, #16]
 8008bc8:	f107 0108 	add.w	r1, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bd2:	e05d      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa97 	bl	800910a <USBD_CtlError>
            err++;
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	3301      	adds	r3, #1
 8008be0:	72fb      	strb	r3, [r7, #11]
          break;
 8008be2:	e055      	b.n	8008c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	7c12      	ldrb	r2, [r2, #16]
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
 8008c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c06:	e043      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa7d 	bl	800910a <USBD_CtlError>
            err++;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	3301      	adds	r3, #1
 8008c14:	72fb      	strb	r3, [r7, #11]
          break;
 8008c16:	e03b      	b.n	8008c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00b      	beq.n	8008c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	7c12      	ldrb	r2, [r2, #16]
 8008c30:	f107 0108 	add.w	r1, r7, #8
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c3a:	e029      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa63 	bl	800910a <USBD_CtlError>
            err++;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	3301      	adds	r3, #1
 8008c48:	72fb      	strb	r3, [r7, #11]
          break;
 8008c4a:	e021      	b.n	8008c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7c12      	ldrb	r2, [r2, #16]
 8008c64:	f107 0108 	add.w	r1, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6e:	e00f      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa49 	bl	800910a <USBD_CtlError>
            err++;
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7e:	e007      	b.n	8008c90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa41 	bl	800910a <USBD_CtlError>
          err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c8e:	bf00      	nop
      }
      break;
 8008c90:	e037      	b.n	8008d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7c1b      	ldrb	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca2:	f107 0208 	add.w	r2, r7, #8
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4798      	blx	r3
 8008caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cac:	e029      	b.n	8008d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa2a 	bl	800910a <USBD_CtlError>
        err++;
 8008cb6:	7afb      	ldrb	r3, [r7, #11]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	72fb      	strb	r3, [r7, #11]
      break;
 8008cbc:	e021      	b.n	8008d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	7c1b      	ldrb	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10d      	bne.n	8008ce2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	f107 0208 	add.w	r2, r7, #8
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4798      	blx	r3
 8008cd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	2207      	movs	r2, #7
 8008cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ce0:	e00f      	b.n	8008d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa10 	bl	800910a <USBD_CtlError>
        err++;
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	3301      	adds	r3, #1
 8008cee:	72fb      	strb	r3, [r7, #11]
      break;
 8008cf0:	e007      	b.n	8008d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa08 	bl	800910a <USBD_CtlError>
      err++;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008d00:	bf00      	nop
  }

  if (err != 0U)
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11e      	bne.n	8008d46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d016      	beq.n	8008d3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d10:	893b      	ldrh	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88da      	ldrh	r2, [r3, #6]
 8008d1a:	893b      	ldrh	r3, [r7, #8]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	bf28      	it	cs
 8008d20:	4613      	movcs	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d26:	893b      	ldrh	r3, [r7, #8]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa5d 	bl	80091ec <USBD_CtlSendData>
 8008d32:	e009      	b.n	8008d48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f9e7 	bl	800910a <USBD_CtlError>
 8008d3c:	e004      	b.n	8008d48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 faae 	bl	80092a0 <USBD_CtlSendStatus>
 8008d44:	e000      	b.n	8008d48 <USBD_GetDescriptor+0x2cc>
    return;
 8008d46:	bf00      	nop
  }
}
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop

08008d50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	889b      	ldrh	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d131      	bne.n	8008dc6 <USBD_SetAddress+0x76>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88db      	ldrh	r3, [r3, #6]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d12d      	bne.n	8008dc6 <USBD_SetAddress+0x76>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d70:	d829      	bhi.n	8008dc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d104      	bne.n	8008d94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f9bc 	bl	800910a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d92:	e01d      	b.n	8008dd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7bfa      	ldrb	r2, [r7, #15]
 8008d98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fedf 	bl	8009b64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa7a 	bl	80092a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dba:	e009      	b.n	8008dd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc4:	e004      	b.n	8008dd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f99e 	bl	800910a <USBD_CtlError>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	4b4e      	ldr	r3, [pc, #312]	; (8008f28 <USBD_SetConfig+0x150>)
 8008dee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008df0:	4b4d      	ldr	r3, [pc, #308]	; (8008f28 <USBD_SetConfig+0x150>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d905      	bls.n	8008e04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f985 	bl	800910a <USBD_CtlError>
    return USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e08c      	b.n	8008f1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d002      	beq.n	8008e16 <USBD_SetConfig+0x3e>
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d029      	beq.n	8008e68 <USBD_SetConfig+0x90>
 8008e14:	e075      	b.n	8008f02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e16:	4b44      	ldr	r3, [pc, #272]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d020      	beq.n	8008e60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e1e:	4b42      	ldr	r3, [pc, #264]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e28:	4b3f      	ldr	r3, [pc, #252]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fe ffe1 	bl	8007df6 <USBD_SetClassConfig>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d008      	beq.n	8008e50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f962 	bl	800910a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e4e:	e065      	b.n	8008f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fa25 	bl	80092a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2203      	movs	r2, #3
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e5e:	e05d      	b.n	8008f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa1d 	bl	80092a0 <USBD_CtlSendStatus>
      break;
 8008e66:	e059      	b.n	8008f1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e68:	4b2f      	ldr	r3, [pc, #188]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d112      	bne.n	8008e96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e78:	4b2b      	ldr	r3, [pc, #172]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e82:	4b29      	ldr	r3, [pc, #164]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fe ffd0 	bl	8007e2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa06 	bl	80092a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e94:	e042      	b.n	8008f1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e96:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <USBD_SetConfig+0x150>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d02a      	beq.n	8008efa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fe ffbe 	bl	8007e2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <USBD_SetConfig+0x150>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <USBD_SetConfig+0x150>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe ff97 	bl	8007df6 <USBD_SetClassConfig>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00f      	beq.n	8008ef2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f918 	bl	800910a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fe ffa3 	bl	8007e2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ef0:	e014      	b.n	8008f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9d4 	bl	80092a0 <USBD_CtlSendStatus>
      break;
 8008ef8:	e010      	b.n	8008f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9d0 	bl	80092a0 <USBD_CtlSendStatus>
      break;
 8008f00:	e00c      	b.n	8008f1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f900 	bl	800910a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <USBD_SetConfig+0x150>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fe ff8c 	bl	8007e2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1a:	bf00      	nop
  }

  return ret;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200003e8 	.word	0x200003e8

08008f2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	88db      	ldrh	r3, [r3, #6]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d004      	beq.n	8008f48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8e2 	bl	800910a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f46:	e023      	b.n	8008f90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	dc02      	bgt.n	8008f5a <USBD_GetConfig+0x2e>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dc03      	bgt.n	8008f60 <USBD_GetConfig+0x34>
 8008f58:	e015      	b.n	8008f86 <USBD_GetConfig+0x5a>
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d00b      	beq.n	8008f76 <USBD_GetConfig+0x4a>
 8008f5e:	e012      	b.n	8008f86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f93c 	bl	80091ec <USBD_CtlSendData>
        break;
 8008f74:	e00c      	b.n	8008f90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f934 	bl	80091ec <USBD_CtlSendData>
        break;
 8008f84:	e004      	b.n	8008f90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8be 	bl	800910a <USBD_CtlError>
        break;
 8008f8e:	bf00      	nop
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d81e      	bhi.n	8008fee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	88db      	ldrh	r3, [r3, #6]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d004      	beq.n	8008fc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f8a5 	bl	800910a <USBD_CtlError>
        break;
 8008fc0:	e01a      	b.n	8008ff8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f900 	bl	80091ec <USBD_CtlSendData>
      break;
 8008fec:	e004      	b.n	8008ff8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f88a 	bl	800910a <USBD_CtlError>
      break;
 8008ff6:	bf00      	nop
  }
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d107      	bne.n	8009022 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f940 	bl	80092a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009020:	e013      	b.n	800904a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d10b      	bne.n	8009042 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	889b      	ldrh	r3, [r3, #4]
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	b29b      	uxth	r3, r3
 8009032:	b2da      	uxtb	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f930 	bl	80092a0 <USBD_CtlSendStatus>
}
 8009040:	e003      	b.n	800904a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f860 	bl	800910a <USBD_CtlError>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009062:	b2db      	uxtb	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	2b02      	cmp	r3, #2
 8009068:	d80b      	bhi.n	8009082 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	885b      	ldrh	r3, [r3, #2]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d10c      	bne.n	800908c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f910 	bl	80092a0 <USBD_CtlSendStatus>
      }
      break;
 8009080:	e004      	b.n	800908c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f840 	bl	800910a <USBD_CtlError>
      break;
 800908a:	e000      	b.n	800908e <USBD_ClrFeature+0x3c>
      break;
 800908c:	bf00      	nop
  }
}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff fa41 	bl	8008548 <SWAPBYTE>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff fa34 	bl	8008548 <SWAPBYTE>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7ff fa27 	bl	8008548 <SWAPBYTE>
 80090fa:	4603      	mov	r3, r0
 80090fc:	461a      	mov	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	80da      	strh	r2, [r3, #6]
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009114:	2180      	movs	r1, #128	; 0x80
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fcba 	bl	8009a90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fcb6 	bl	8009a90 <USBD_LL_StallEP>
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d036      	beq.n	80091b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009146:	6938      	ldr	r0, [r7, #16]
 8009148:	f000 f836 	bl	80091b8 <USBD_GetLen>
 800914c:	4603      	mov	r3, r0
 800914e:	3301      	adds	r3, #1
 8009150:	b29b      	uxth	r3, r3
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	4413      	add	r3, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7812      	ldrb	r2, [r2, #0]
 8009164:	701a      	strb	r2, [r3, #0]
  idx++;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	3301      	adds	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	2203      	movs	r2, #3
 8009174:	701a      	strb	r2, [r3, #0]
  idx++;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	3301      	adds	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800917c:	e013      	b.n	80091a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	4413      	add	r3, r2
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3301      	adds	r3, #1
 800918e:	613b      	str	r3, [r7, #16]
    idx++;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	3301      	adds	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	4413      	add	r3, r2
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
    idx++;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3301      	adds	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e7      	bne.n	800917e <USBD_GetString+0x52>
 80091ae:	e000      	b.n	80091b2 <USBD_GetString+0x86>
    return;
 80091b0:	bf00      	nop
  }
}
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091c8:	e005      	b.n	80091d6 <USBD_GetLen+0x1e>
  {
    len++;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	3301      	adds	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f5      	bne.n	80091ca <USBD_GetLen+0x12>
  }

  return len;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fcc5 	bl	8009ba2 <USBD_LL_Transmit>

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	2100      	movs	r1, #0
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fcb4 	bl	8009ba2 <USBD_LL_Transmit>

  return USBD_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2203      	movs	r2, #3
 8009254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	2100      	movs	r1, #0
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fcb8 	bl	8009be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	2100      	movs	r1, #0
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fca7 	bl	8009be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2204      	movs	r2, #4
 80092ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092b0:	2300      	movs	r3, #0
 80092b2:	2200      	movs	r2, #0
 80092b4:	2100      	movs	r1, #0
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fc73 	bl	8009ba2 <USBD_LL_Transmit>

  return USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2205      	movs	r2, #5
 80092d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092d6:	2300      	movs	r3, #0
 80092d8:	2200      	movs	r2, #0
 80092da:	2100      	movs	r1, #0
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fc81 	bl	8009be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092f0:	2200      	movs	r2, #0
 80092f2:	4912      	ldr	r1, [pc, #72]	; (800933c <MX_USB_DEVICE_Init+0x50>)
 80092f4:	4812      	ldr	r0, [pc, #72]	; (8009340 <MX_USB_DEVICE_Init+0x54>)
 80092f6:	f7fe fd01 	bl	8007cfc <USBD_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009300:	f7f7 fc6c 	bl	8000bdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <MX_USB_DEVICE_Init+0x58>)
 8009306:	480e      	ldr	r0, [pc, #56]	; (8009340 <MX_USB_DEVICE_Init+0x54>)
 8009308:	f7fe fd28 	bl	8007d5c <USBD_RegisterClass>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009312:	f7f7 fc63 	bl	8000bdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009316:	490c      	ldr	r1, [pc, #48]	; (8009348 <MX_USB_DEVICE_Init+0x5c>)
 8009318:	4809      	ldr	r0, [pc, #36]	; (8009340 <MX_USB_DEVICE_Init+0x54>)
 800931a:	f7fe fc5f 	bl	8007bdc <USBD_CDC_RegisterInterface>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009324:	f7f7 fc5a 	bl	8000bdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009328:	4805      	ldr	r0, [pc, #20]	; (8009340 <MX_USB_DEVICE_Init+0x54>)
 800932a:	f7fe fd4d 	bl	8007dc8 <USBD_Start>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009334:	f7f7 fc52 	bl	8000bdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200000f4 	.word	0x200000f4
 8009340:	200003ec 	.word	0x200003ec
 8009344:	20000060 	.word	0x20000060
 8009348:	200000e0 	.word	0x200000e0

0800934c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009350:	2200      	movs	r2, #0
 8009352:	4905      	ldr	r1, [pc, #20]	; (8009368 <CDC_Init_FS+0x1c>)
 8009354:	4805      	ldr	r0, [pc, #20]	; (800936c <CDC_Init_FS+0x20>)
 8009356:	f7fe fc5b 	bl	8007c10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800935a:	4905      	ldr	r1, [pc, #20]	; (8009370 <CDC_Init_FS+0x24>)
 800935c:	4803      	ldr	r0, [pc, #12]	; (800936c <CDC_Init_FS+0x20>)
 800935e:	f7fe fc79 	bl	8007c54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009364:	4618      	mov	r0, r3
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000ec8 	.word	0x20000ec8
 800936c:	200003ec 	.word	0x200003ec
 8009370:	200006c8 	.word	0x200006c8

08009374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
 8009390:	4613      	mov	r3, r2
 8009392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b23      	cmp	r3, #35	; 0x23
 8009398:	d84a      	bhi.n	8009430 <CDC_Control_FS+0xac>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <CDC_Control_FS+0x1c>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	08009431 	.word	0x08009431
 80093a4:	08009431 	.word	0x08009431
 80093a8:	08009431 	.word	0x08009431
 80093ac:	08009431 	.word	0x08009431
 80093b0:	08009431 	.word	0x08009431
 80093b4:	08009431 	.word	0x08009431
 80093b8:	08009431 	.word	0x08009431
 80093bc:	08009431 	.word	0x08009431
 80093c0:	08009431 	.word	0x08009431
 80093c4:	08009431 	.word	0x08009431
 80093c8:	08009431 	.word	0x08009431
 80093cc:	08009431 	.word	0x08009431
 80093d0:	08009431 	.word	0x08009431
 80093d4:	08009431 	.word	0x08009431
 80093d8:	08009431 	.word	0x08009431
 80093dc:	08009431 	.word	0x08009431
 80093e0:	08009431 	.word	0x08009431
 80093e4:	08009431 	.word	0x08009431
 80093e8:	08009431 	.word	0x08009431
 80093ec:	08009431 	.word	0x08009431
 80093f0:	08009431 	.word	0x08009431
 80093f4:	08009431 	.word	0x08009431
 80093f8:	08009431 	.word	0x08009431
 80093fc:	08009431 	.word	0x08009431
 8009400:	08009431 	.word	0x08009431
 8009404:	08009431 	.word	0x08009431
 8009408:	08009431 	.word	0x08009431
 800940c:	08009431 	.word	0x08009431
 8009410:	08009431 	.word	0x08009431
 8009414:	08009431 	.word	0x08009431
 8009418:	08009431 	.word	0x08009431
 800941c:	08009431 	.word	0x08009431
 8009420:	08009431 	.word	0x08009431
 8009424:	08009431 	.word	0x08009431
 8009428:	08009431 	.word	0x08009431
 800942c:	08009431 	.word	0x08009431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009430:	bf00      	nop
  }

  return (USBD_OK);
 8009432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4805      	ldr	r0, [pc, #20]	; (8009464 <CDC_Receive_FS+0x24>)
 800944e:	f7fe fc01 	bl	8007c54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009452:	4804      	ldr	r0, [pc, #16]	; (8009464 <CDC_Receive_FS+0x24>)
 8009454:	f7fe fc1c 	bl	8007c90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009458:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	200003ec 	.word	0x200003ec

08009468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800947a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800947e:	4618      	mov	r0, r3
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2212      	movs	r2, #18
 800949c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800949e:	4b03      	ldr	r3, [pc, #12]	; (80094ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	20000110 	.word	0x20000110

080094b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2204      	movs	r2, #4
 80094c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000124 	.word	0x20000124

080094d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d105      	bne.n	80094f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	4907      	ldr	r1, [pc, #28]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ea:	4808      	ldr	r0, [pc, #32]	; (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094ec:	f7ff fe1e 	bl	800912c <USBD_GetString>
 80094f0:	e004      	b.n	80094fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4904      	ldr	r1, [pc, #16]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094f6:	4805      	ldr	r0, [pc, #20]	; (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094f8:	f7ff fe18 	bl	800912c <USBD_GetString>
  }
  return USBD_StrDesc;
 80094fc:	4b02      	ldr	r3, [pc, #8]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	200016c8 	.word	0x200016c8
 800950c:	0800a7a8 	.word	0x0800a7a8

08009510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	4904      	ldr	r1, [pc, #16]	; (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009520:	4804      	ldr	r0, [pc, #16]	; (8009534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009522:	f7ff fe03 	bl	800912c <USBD_GetString>
  return USBD_StrDesc;
 8009526:	4b02      	ldr	r3, [pc, #8]	; (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200016c8 	.word	0x200016c8
 8009534:	0800a7c0 	.word	0x0800a7c0

08009538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	221a      	movs	r2, #26
 8009548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800954a:	f000 f843 	bl	80095d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800954e:	4b02      	ldr	r3, [pc, #8]	; (8009558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000128 	.word	0x20000128

0800955c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4907      	ldr	r1, [pc, #28]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009572:	4808      	ldr	r0, [pc, #32]	; (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009574:	f7ff fdda 	bl	800912c <USBD_GetString>
 8009578:	e004      	b.n	8009584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4904      	ldr	r1, [pc, #16]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009580:	f7ff fdd4 	bl	800912c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009584:	4b02      	ldr	r3, [pc, #8]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200016c8 	.word	0x200016c8
 8009594:	0800a7d4 	.word	0x0800a7d4

08009598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4907      	ldr	r1, [pc, #28]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ae:	4808      	ldr	r0, [pc, #32]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095b0:	f7ff fdbc 	bl	800912c <USBD_GetString>
 80095b4:	e004      	b.n	80095c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4904      	ldr	r1, [pc, #16]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ba:	4805      	ldr	r0, [pc, #20]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095bc:	f7ff fdb6 	bl	800912c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	200016c8 	.word	0x200016c8
 80095d0:	0800a7e0 	.word	0x0800a7e0

080095d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <Get_SerialNum+0x44>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <Get_SerialNum+0x48>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095e6:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <Get_SerialNum+0x4c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095fa:	2208      	movs	r2, #8
 80095fc:	4909      	ldr	r1, [pc, #36]	; (8009624 <Get_SerialNum+0x50>)
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f814 	bl	800962c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009604:	2204      	movs	r2, #4
 8009606:	4908      	ldr	r1, [pc, #32]	; (8009628 <Get_SerialNum+0x54>)
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f000 f80f 	bl	800962c <IntToUnicode>
  }
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	1fff7a10 	.word	0x1fff7a10
 800961c:	1fff7a14 	.word	0x1fff7a14
 8009620:	1fff7a18 	.word	0x1fff7a18
 8009624:	2000012a 	.word	0x2000012a
 8009628:	2000013a 	.word	0x2000013a

0800962c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]
 8009642:	e027      	b.n	8009694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	0f1b      	lsrs	r3, r3, #28
 8009648:	2b09      	cmp	r3, #9
 800964a:	d80b      	bhi.n	8009664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0f1b      	lsrs	r3, r3, #28
 8009650:	b2da      	uxtb	r2, r3
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4619      	mov	r1, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	440b      	add	r3, r1
 800965c:	3230      	adds	r2, #48	; 0x30
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e00a      	b.n	800967a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0f1b      	lsrs	r3, r3, #28
 8009668:	b2da      	uxtb	r2, r3
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4619      	mov	r1, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	440b      	add	r3, r1
 8009674:	3237      	adds	r2, #55	; 0x37
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	3301      	adds	r3, #1
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	4413      	add	r3, r2
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	3301      	adds	r3, #1
 8009692:	75fb      	strb	r3, [r7, #23]
 8009694:	7dfa      	ldrb	r2, [r7, #23]
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	429a      	cmp	r2, r3
 800969a:	d3d3      	bcc.n	8009644 <IntToUnicode+0x18>
  }
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b4:	f107 0314 	add.w	r3, r7, #20
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096cc:	d13a      	bne.n	8009744 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	4b1e      	ldr	r3, [pc, #120]	; (800974c <HAL_PCD_MspInit+0xa0>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	4a1d      	ldr	r2, [pc, #116]	; (800974c <HAL_PCD_MspInit+0xa0>)
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	6313      	str	r3, [r2, #48]	; 0x30
 80096de:	4b1b      	ldr	r3, [pc, #108]	; (800974c <HAL_PCD_MspInit+0xa0>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f0:	2302      	movs	r3, #2
 80096f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096f8:	2303      	movs	r3, #3
 80096fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096fc:	230a      	movs	r3, #10
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009700:	f107 0314 	add.w	r3, r7, #20
 8009704:	4619      	mov	r1, r3
 8009706:	4812      	ldr	r0, [pc, #72]	; (8009750 <HAL_PCD_MspInit+0xa4>)
 8009708:	f7f7 feda 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800970c:	4b0f      	ldr	r3, [pc, #60]	; (800974c <HAL_PCD_MspInit+0xa0>)
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	4a0e      	ldr	r2, [pc, #56]	; (800974c <HAL_PCD_MspInit+0xa0>)
 8009712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009716:	6353      	str	r3, [r2, #52]	; 0x34
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	4b0b      	ldr	r3, [pc, #44]	; (800974c <HAL_PCD_MspInit+0xa0>)
 800971e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <HAL_PCD_MspInit+0xa0>)
 8009722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009726:	6453      	str	r3, [r2, #68]	; 0x44
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <HAL_PCD_MspInit+0xa0>)
 800972a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	2043      	movs	r0, #67	; 0x43
 800973a:	f7f7 fdf8 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800973e:	2043      	movs	r0, #67	; 0x43
 8009740:	f7f7 fe11 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009744:	bf00      	nop
 8009746:	3728      	adds	r7, #40	; 0x28
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40023800 	.word	0x40023800
 8009750:	40020000 	.word	0x40020000

08009754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7fe fb79 	bl	8007e62 <USBD_LL_SetupStage>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	4619      	mov	r1, r3
 80097a2:	f7fe fbb3 	bl	8007f0c <USBD_LL_DataOutStage>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	3320      	adds	r3, #32
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	4619      	mov	r1, r3
 80097d6:	f7fe fc4c 	bl	8008072 <USBD_LL_DataInStage>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fd86 	bl	8008302 <USBD_LL_SOF>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	79db      	ldrb	r3, [r3, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
 8009816:	e008      	b.n	800982a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	79db      	ldrb	r3, [r3, #7]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d102      	bne.n	8009826 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]
 8009824:	e001      	b.n	800982a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009826:	f7f7 f9d9 	bl	8000bdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009830:	7bfa      	ldrb	r2, [r7, #15]
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fd20 	bl	800827a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fcc8 	bl	80081d6 <USBD_LL_Reset>
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fd1b 	bl	800829a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009876:	f043 0301 	orr.w	r3, r3, #1
 800987a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	7adb      	ldrb	r3, [r3, #11]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <HAL_PCD_SuspendCallback+0x48>)
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	4a03      	ldr	r2, [pc, #12]	; (8009898 <HAL_PCD_SuspendCallback+0x48>)
 800988a:	f043 0306 	orr.w	r3, r3, #6
 800988e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	e000ed00 	.word	0xe000ed00

0800989c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fd11 	bl	80082d2 <USBD_LL_Resume>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fd69 	bl	80083a6 <USBD_LL_IsoOUTIncomplete>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fd25 	bl	8008342 <USBD_LL_IsoINIncomplete>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fd7b 	bl	800840a <USBD_LL_DevConnected>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fd78 	bl	8008420 <USBD_LL_DevDisconnected>
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d13c      	bne.n	80099c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009948:	4a20      	ldr	r2, [pc, #128]	; (80099cc <USBD_LL_Init+0x94>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1e      	ldr	r2, [pc, #120]	; (80099cc <USBD_LL_Init+0x94>)
 8009954:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009958:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <USBD_LL_Init+0x94>)
 800995a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800995e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009960:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <USBD_LL_Init+0x94>)
 8009962:	2204      	movs	r2, #4
 8009964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009966:	4b19      	ldr	r3, [pc, #100]	; (80099cc <USBD_LL_Init+0x94>)
 8009968:	2202      	movs	r2, #2
 800996a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800996c:	4b17      	ldr	r3, [pc, #92]	; (80099cc <USBD_LL_Init+0x94>)
 800996e:	2200      	movs	r2, #0
 8009970:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <USBD_LL_Init+0x94>)
 8009974:	2202      	movs	r2, #2
 8009976:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009978:	4b14      	ldr	r3, [pc, #80]	; (80099cc <USBD_LL_Init+0x94>)
 800997a:	2200      	movs	r2, #0
 800997c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <USBD_LL_Init+0x94>)
 8009980:	2200      	movs	r2, #0
 8009982:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <USBD_LL_Init+0x94>)
 8009986:	2200      	movs	r2, #0
 8009988:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <USBD_LL_Init+0x94>)
 800998c:	2200      	movs	r2, #0
 800998e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <USBD_LL_Init+0x94>)
 8009992:	2200      	movs	r2, #0
 8009994:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009996:	480d      	ldr	r0, [pc, #52]	; (80099cc <USBD_LL_Init+0x94>)
 8009998:	f7f7 ff5f 	bl	800185a <HAL_PCD_Init>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099a2:	f7f7 f91b 	bl	8000bdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099a6:	2180      	movs	r1, #128	; 0x80
 80099a8:	4808      	ldr	r0, [pc, #32]	; (80099cc <USBD_LL_Init+0x94>)
 80099aa:	f7f9 f98a 	bl	8002cc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099ae:	2240      	movs	r2, #64	; 0x40
 80099b0:	2100      	movs	r1, #0
 80099b2:	4806      	ldr	r0, [pc, #24]	; (80099cc <USBD_LL_Init+0x94>)
 80099b4:	f7f9 f93e 	bl	8002c34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099b8:	2280      	movs	r2, #128	; 0x80
 80099ba:	2101      	movs	r1, #1
 80099bc:	4803      	ldr	r0, [pc, #12]	; (80099cc <USBD_LL_Init+0x94>)
 80099be:	f7f9 f939 	bl	8002c34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200018c8 	.word	0x200018c8

080099d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f8 f846 	bl	8001a78 <HAL_PCD_Start>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f942 	bl	8009c7c <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	461a      	mov	r2, r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	70fb      	strb	r3, [r7, #3]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70bb      	strb	r3, [r7, #2]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a2e:	78bb      	ldrb	r3, [r7, #2]
 8009a30:	883a      	ldrh	r2, [r7, #0]
 8009a32:	78f9      	ldrb	r1, [r7, #3]
 8009a34:	f7f8 fd1a 	bl	800246c <HAL_PCD_EP_Open>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f91c 	bl	8009c7c <USBD_Get_USB_Status>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7f8 fd63 	bl	800253c <HAL_PCD_EP_Close>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f8fd 	bl	8009c7c <USBD_Get_USB_Status>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7f8 fe1b 	bl	80026ea <HAL_PCD_EP_SetStall>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 f8de 	bl	8009c7c <USBD_Get_USB_Status>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ae8:	78fa      	ldrb	r2, [r7, #3]
 8009aea:	4611      	mov	r1, r2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f8 fe5f 	bl	80027b0 <HAL_PCD_EP_ClrStall>
 8009af2:	4603      	mov	r3, r0
 8009af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f8bf 	bl	8009c7c <USBD_Get_USB_Status>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da0b      	bge.n	8009b40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	4613      	mov	r3, r2
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	440b      	add	r3, r1
 8009b3a:	3316      	adds	r3, #22
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	e00b      	b.n	8009b58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009b56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f8 fc4e 	bl	8002424 <HAL_PCD_SetAddress>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f874 	bl	8009c7c <USBD_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b086      	sub	sp, #24
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bc0:	7af9      	ldrb	r1, [r7, #11]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f7f8 fd56 	bl	8002676 <HAL_PCD_EP_Transmit>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f853 	bl	8009c7c <USBD_Get_USB_Status>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c02:	7af9      	ldrb	r1, [r7, #11]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	f7f8 fce2 	bl	80025d0 <HAL_PCD_EP_Receive>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f832 	bl	8009c7c <USBD_Get_USB_Status>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c38:	78fa      	ldrb	r2, [r7, #3]
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7f8 fd02 	bl	8002646 <HAL_PCD_EP_GetRxCount>
 8009c42:	4603      	mov	r3, r0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <USBD_static_malloc+0x18>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20001dac 	.word	0x20001dac

08009c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d817      	bhi.n	8009cc0 <USBD_Get_USB_Status+0x44>
 8009c90:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <USBD_Get_USB_Status+0x1c>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009caf 	.word	0x08009caf
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cbb 	.word	0x08009cbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cac:	e00b      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb2:	e008      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb8:	e005      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbe:	e002      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc4:	bf00      	nop
  }
  return usb_status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <_vsiprintf_r>:
 8009cd4:	b500      	push	{lr}
 8009cd6:	b09b      	sub	sp, #108	; 0x6c
 8009cd8:	9100      	str	r1, [sp, #0]
 8009cda:	9104      	str	r1, [sp, #16]
 8009cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ce0:	9105      	str	r1, [sp, #20]
 8009ce2:	9102      	str	r1, [sp, #8]
 8009ce4:	4905      	ldr	r1, [pc, #20]	; (8009cfc <_vsiprintf_r+0x28>)
 8009ce6:	9103      	str	r1, [sp, #12]
 8009ce8:	4669      	mov	r1, sp
 8009cea:	f000 f999 	bl	800a020 <_svfiprintf_r>
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	b01b      	add	sp, #108	; 0x6c
 8009cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cfa:	bf00      	nop
 8009cfc:	ffff0208 	.word	0xffff0208

08009d00 <vsiprintf>:
 8009d00:	4613      	mov	r3, r2
 8009d02:	460a      	mov	r2, r1
 8009d04:	4601      	mov	r1, r0
 8009d06:	4802      	ldr	r0, [pc, #8]	; (8009d10 <vsiprintf+0x10>)
 8009d08:	6800      	ldr	r0, [r0, #0]
 8009d0a:	f7ff bfe3 	b.w	8009cd4 <_vsiprintf_r>
 8009d0e:	bf00      	nop
 8009d10:	20000190 	.word	0x20000190

08009d14 <memset>:
 8009d14:	4402      	add	r2, r0
 8009d16:	4603      	mov	r3, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d100      	bne.n	8009d1e <memset+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d22:	e7f9      	b.n	8009d18 <memset+0x4>

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	; (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000190 	.word	0x20000190

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	4d0d      	ldr	r5, [pc, #52]	; (8009d68 <__libc_init_array+0x38>)
 8009d34:	4c0d      	ldr	r4, [pc, #52]	; (8009d6c <__libc_init_array+0x3c>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	4d0b      	ldr	r5, [pc, #44]	; (8009d70 <__libc_init_array+0x40>)
 8009d42:	4c0c      	ldr	r4, [pc, #48]	; (8009d74 <__libc_init_array+0x44>)
 8009d44:	f000 fc6a 	bl	800a61c <_init>
 8009d48:	1b64      	subs	r4, r4, r5
 8009d4a:	10a4      	asrs	r4, r4, #2
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	08010884 	.word	0x08010884
 8009d6c:	08010884 	.word	0x08010884
 8009d70:	08010884 	.word	0x08010884
 8009d74:	08010888 	.word	0x08010888

08009d78 <__retarget_lock_acquire_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <__retarget_lock_release_recursive>:
 8009d7a:	4770      	bx	lr

08009d7c <_free_r>:
 8009d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	d044      	beq.n	8009e0c <_free_r+0x90>
 8009d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d86:	9001      	str	r0, [sp, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d8e:	bfb8      	it	lt
 8009d90:	18e4      	addlt	r4, r4, r3
 8009d92:	f000 f8df 	bl	8009f54 <__malloc_lock>
 8009d96:	4a1e      	ldr	r2, [pc, #120]	; (8009e10 <_free_r+0x94>)
 8009d98:	9801      	ldr	r0, [sp, #4]
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	b933      	cbnz	r3, 8009dac <_free_r+0x30>
 8009d9e:	6063      	str	r3, [r4, #4]
 8009da0:	6014      	str	r4, [r2, #0]
 8009da2:	b003      	add	sp, #12
 8009da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009da8:	f000 b8da 	b.w	8009f60 <__malloc_unlock>
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	d908      	bls.n	8009dc2 <_free_r+0x46>
 8009db0:	6825      	ldr	r5, [r4, #0]
 8009db2:	1961      	adds	r1, r4, r5
 8009db4:	428b      	cmp	r3, r1
 8009db6:	bf01      	itttt	eq
 8009db8:	6819      	ldreq	r1, [r3, #0]
 8009dba:	685b      	ldreq	r3, [r3, #4]
 8009dbc:	1949      	addeq	r1, r1, r5
 8009dbe:	6021      	streq	r1, [r4, #0]
 8009dc0:	e7ed      	b.n	8009d9e <_free_r+0x22>
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b10b      	cbz	r3, 8009dcc <_free_r+0x50>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x46>
 8009dcc:	6811      	ldr	r1, [r2, #0]
 8009dce:	1855      	adds	r5, r2, r1
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x70>
 8009dd4:	6824      	ldr	r4, [r4, #0]
 8009dd6:	4421      	add	r1, r4
 8009dd8:	1854      	adds	r4, r2, r1
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	d1e0      	bne.n	8009da2 <_free_r+0x26>
 8009de0:	681c      	ldr	r4, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	6053      	str	r3, [r2, #4]
 8009de6:	440c      	add	r4, r1
 8009de8:	6014      	str	r4, [r2, #0]
 8009dea:	e7da      	b.n	8009da2 <_free_r+0x26>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x78>
 8009dee:	230c      	movs	r3, #12
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	e7d6      	b.n	8009da2 <_free_r+0x26>
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	428b      	cmp	r3, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6819      	ldreq	r1, [r3, #0]
 8009dfe:	685b      	ldreq	r3, [r3, #4]
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1949      	addeq	r1, r1, r5
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	6054      	str	r4, [r2, #4]
 8009e0a:	e7ca      	b.n	8009da2 <_free_r+0x26>
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bd30      	pop	{r4, r5, pc}
 8009e10:	2000210c 	.word	0x2000210c

08009e14 <sbrk_aligned>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4e0e      	ldr	r6, [pc, #56]	; (8009e50 <sbrk_aligned+0x3c>)
 8009e18:	460c      	mov	r4, r1
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	b911      	cbnz	r1, 8009e26 <sbrk_aligned+0x12>
 8009e20:	f000 fba6 	bl	800a570 <_sbrk_r>
 8009e24:	6030      	str	r0, [r6, #0]
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f000 fba1 	bl	800a570 <_sbrk_r>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d00a      	beq.n	8009e48 <sbrk_aligned+0x34>
 8009e32:	1cc4      	adds	r4, r0, #3
 8009e34:	f024 0403 	bic.w	r4, r4, #3
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d007      	beq.n	8009e4c <sbrk_aligned+0x38>
 8009e3c:	1a21      	subs	r1, r4, r0
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 fb96 	bl	800a570 <_sbrk_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	d101      	bne.n	8009e4c <sbrk_aligned+0x38>
 8009e48:	f04f 34ff 	mov.w	r4, #4294967295
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	20002110 	.word	0x20002110

08009e54 <_malloc_r>:
 8009e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	1ccd      	adds	r5, r1, #3
 8009e5a:	f025 0503 	bic.w	r5, r5, #3
 8009e5e:	3508      	adds	r5, #8
 8009e60:	2d0c      	cmp	r5, #12
 8009e62:	bf38      	it	cc
 8009e64:	250c      	movcc	r5, #12
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	4607      	mov	r7, r0
 8009e6a:	db01      	blt.n	8009e70 <_malloc_r+0x1c>
 8009e6c:	42a9      	cmp	r1, r5
 8009e6e:	d905      	bls.n	8009e7c <_malloc_r+0x28>
 8009e70:	230c      	movs	r3, #12
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	2600      	movs	r6, #0
 8009e76:	4630      	mov	r0, r6
 8009e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f50 <_malloc_r+0xfc>
 8009e80:	f000 f868 	bl	8009f54 <__malloc_lock>
 8009e84:	f8d8 3000 	ldr.w	r3, [r8]
 8009e88:	461c      	mov	r4, r3
 8009e8a:	bb5c      	cbnz	r4, 8009ee4 <_malloc_r+0x90>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff ffc0 	bl	8009e14 <sbrk_aligned>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	d155      	bne.n	8009f46 <_malloc_r+0xf2>
 8009e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009e9e:	4626      	mov	r6, r4
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	d145      	bne.n	8009f30 <_malloc_r+0xdc>
 8009ea4:	2c00      	cmp	r4, #0
 8009ea6:	d048      	beq.n	8009f3a <_malloc_r+0xe6>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4638      	mov	r0, r7
 8009eae:	eb04 0903 	add.w	r9, r4, r3
 8009eb2:	f000 fb5d 	bl	800a570 <_sbrk_r>
 8009eb6:	4581      	cmp	r9, r0
 8009eb8:	d13f      	bne.n	8009f3a <_malloc_r+0xe6>
 8009eba:	6821      	ldr	r1, [r4, #0]
 8009ebc:	1a6d      	subs	r5, r5, r1
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f7ff ffa7 	bl	8009e14 <sbrk_aligned>
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d037      	beq.n	8009f3a <_malloc_r+0xe6>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	442b      	add	r3, r5
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d038      	beq.n	8009f4a <_malloc_r+0xf6>
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	42a2      	cmp	r2, r4
 8009edc:	d12b      	bne.n	8009f36 <_malloc_r+0xe2>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	605a      	str	r2, [r3, #4]
 8009ee2:	e00f      	b.n	8009f04 <_malloc_r+0xb0>
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	1b52      	subs	r2, r2, r5
 8009ee8:	d41f      	bmi.n	8009f2a <_malloc_r+0xd6>
 8009eea:	2a0b      	cmp	r2, #11
 8009eec:	d917      	bls.n	8009f1e <_malloc_r+0xca>
 8009eee:	1961      	adds	r1, r4, r5
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	6025      	str	r5, [r4, #0]
 8009ef4:	bf18      	it	ne
 8009ef6:	6059      	strne	r1, [r3, #4]
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	bf08      	it	eq
 8009efc:	f8c8 1000 	streq.w	r1, [r8]
 8009f00:	5162      	str	r2, [r4, r5]
 8009f02:	604b      	str	r3, [r1, #4]
 8009f04:	4638      	mov	r0, r7
 8009f06:	f104 060b 	add.w	r6, r4, #11
 8009f0a:	f000 f829 	bl	8009f60 <__malloc_unlock>
 8009f0e:	f026 0607 	bic.w	r6, r6, #7
 8009f12:	1d23      	adds	r3, r4, #4
 8009f14:	1af2      	subs	r2, r6, r3
 8009f16:	d0ae      	beq.n	8009e76 <_malloc_r+0x22>
 8009f18:	1b9b      	subs	r3, r3, r6
 8009f1a:	50a3      	str	r3, [r4, r2]
 8009f1c:	e7ab      	b.n	8009e76 <_malloc_r+0x22>
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	6862      	ldr	r2, [r4, #4]
 8009f22:	d1dd      	bne.n	8009ee0 <_malloc_r+0x8c>
 8009f24:	f8c8 2000 	str.w	r2, [r8]
 8009f28:	e7ec      	b.n	8009f04 <_malloc_r+0xb0>
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	6864      	ldr	r4, [r4, #4]
 8009f2e:	e7ac      	b.n	8009e8a <_malloc_r+0x36>
 8009f30:	4634      	mov	r4, r6
 8009f32:	6876      	ldr	r6, [r6, #4]
 8009f34:	e7b4      	b.n	8009ea0 <_malloc_r+0x4c>
 8009f36:	4613      	mov	r3, r2
 8009f38:	e7cc      	b.n	8009ed4 <_malloc_r+0x80>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	603b      	str	r3, [r7, #0]
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f000 f80e 	bl	8009f60 <__malloc_unlock>
 8009f44:	e797      	b.n	8009e76 <_malloc_r+0x22>
 8009f46:	6025      	str	r5, [r4, #0]
 8009f48:	e7dc      	b.n	8009f04 <_malloc_r+0xb0>
 8009f4a:	605b      	str	r3, [r3, #4]
 8009f4c:	deff      	udf	#255	; 0xff
 8009f4e:	bf00      	nop
 8009f50:	2000210c 	.word	0x2000210c

08009f54 <__malloc_lock>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__malloc_lock+0x8>)
 8009f56:	f7ff bf0f 	b.w	8009d78 <__retarget_lock_acquire_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20002108 	.word	0x20002108

08009f60 <__malloc_unlock>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__malloc_unlock+0x8>)
 8009f62:	f7ff bf0a 	b.w	8009d7a <__retarget_lock_release_recursive>
 8009f66:	bf00      	nop
 8009f68:	20002108 	.word	0x20002108

08009f6c <__ssputs_r>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	688e      	ldr	r6, [r1, #8]
 8009f72:	461f      	mov	r7, r3
 8009f74:	42be      	cmp	r6, r7
 8009f76:	680b      	ldr	r3, [r1, #0]
 8009f78:	4682      	mov	sl, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	d82c      	bhi.n	8009fda <__ssputs_r+0x6e>
 8009f80:	898a      	ldrh	r2, [r1, #12]
 8009f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f86:	d026      	beq.n	8009fd6 <__ssputs_r+0x6a>
 8009f88:	6965      	ldr	r5, [r4, #20]
 8009f8a:	6909      	ldr	r1, [r1, #16]
 8009f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f90:	eba3 0901 	sub.w	r9, r3, r1
 8009f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f98:	1c7b      	adds	r3, r7, #1
 8009f9a:	444b      	add	r3, r9
 8009f9c:	106d      	asrs	r5, r5, #1
 8009f9e:	429d      	cmp	r5, r3
 8009fa0:	bf38      	it	cc
 8009fa2:	461d      	movcc	r5, r3
 8009fa4:	0553      	lsls	r3, r2, #21
 8009fa6:	d527      	bpl.n	8009ff8 <__ssputs_r+0x8c>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7ff ff53 	bl	8009e54 <_malloc_r>
 8009fae:	4606      	mov	r6, r0
 8009fb0:	b360      	cbz	r0, 800a00c <__ssputs_r+0xa0>
 8009fb2:	6921      	ldr	r1, [r4, #16]
 8009fb4:	464a      	mov	r2, r9
 8009fb6:	f000 faeb 	bl	800a590 <memcpy>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	6126      	str	r6, [r4, #16]
 8009fc8:	6165      	str	r5, [r4, #20]
 8009fca:	444e      	add	r6, r9
 8009fcc:	eba5 0509 	sub.w	r5, r5, r9
 8009fd0:	6026      	str	r6, [r4, #0]
 8009fd2:	60a5      	str	r5, [r4, #8]
 8009fd4:	463e      	mov	r6, r7
 8009fd6:	42be      	cmp	r6, r7
 8009fd8:	d900      	bls.n	8009fdc <__ssputs_r+0x70>
 8009fda:	463e      	mov	r6, r7
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	4632      	mov	r2, r6
 8009fe0:	4641      	mov	r1, r8
 8009fe2:	f000 faab 	bl	800a53c <memmove>
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	1b9b      	subs	r3, r3, r6
 8009fea:	60a3      	str	r3, [r4, #8]
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	4433      	add	r3, r6
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	f000 fad7 	bl	800a5ac <_realloc_r>
 8009ffe:	4606      	mov	r6, r0
 800a000:	2800      	cmp	r0, #0
 800a002:	d1e0      	bne.n	8009fc6 <__ssputs_r+0x5a>
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	4650      	mov	r0, sl
 800a008:	f7ff feb8 	bl	8009d7c <_free_r>
 800a00c:	230c      	movs	r3, #12
 800a00e:	f8ca 3000 	str.w	r3, [sl]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295
 800a01e:	e7e9      	b.n	8009ff4 <__ssputs_r+0x88>

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	4607      	mov	r7, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4614      	mov	r4, r2
 800a032:	d50e      	bpl.n	800a052 <_svfiprintf_r+0x32>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b963      	cbnz	r3, 800a052 <_svfiprintf_r+0x32>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	f7ff ff0b 	bl	8009e54 <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b920      	cbnz	r0, 800a04e <_svfiprintf_r+0x2e>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e0d0      	b.n	800a1f0 <_svfiprintf_r+0x1d0>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	616b      	str	r3, [r5, #20]
 800a052:	2300      	movs	r3, #0
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	2320      	movs	r3, #32
 800a058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a060:	2330      	movs	r3, #48	; 0x30
 800a062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a208 <_svfiprintf_r+0x1e8>
 800a066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	4623      	mov	r3, r4
 800a070:	469a      	mov	sl, r3
 800a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a076:	b10a      	cbz	r2, 800a07c <_svfiprintf_r+0x5c>
 800a078:	2a25      	cmp	r2, #37	; 0x25
 800a07a:	d1f9      	bne.n	800a070 <_svfiprintf_r+0x50>
 800a07c:	ebba 0b04 	subs.w	fp, sl, r4
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x7a>
 800a082:	465b      	mov	r3, fp
 800a084:	4622      	mov	r2, r4
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ff6f 	bl	8009f6c <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80a9 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a096:	445a      	add	r2, fp
 800a098:	9209      	str	r2, [sp, #36]	; 0x24
 800a09a:	f89a 3000 	ldrb.w	r3, [sl]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a1 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	4850      	ldr	r0, [pc, #320]	; (800a208 <_svfiprintf_r+0x1e8>)
 800a0c6:	f7f6 f883 	bl	80001d0 <memchr>
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_svfiprintf_r+0xe6>
 800a0ce:	06d0      	lsls	r0, r2, #27
 800a0d0:	bf44      	itt	mi
 800a0d2:	2320      	movmi	r3, #32
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	bf44      	itt	mi
 800a0dc:	232b      	movmi	r3, #43	; 0x2b
 800a0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d015      	beq.n	800a116 <_svfiprintf_r+0xf6>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d94d      	bls.n	800a19c <_svfiprintf_r+0x17c>
 800a100:	b1b0      	cbz	r0, 800a130 <_svfiprintf_r+0x110>
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	e014      	b.n	800a130 <_svfiprintf_r+0x110>
 800a106:	eba0 0308 	sub.w	r3, r0, r8
 800a10a:	fa09 f303 	lsl.w	r3, r9, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	46a2      	mov	sl, r4
 800a114:	e7d2      	b.n	800a0bc <_svfiprintf_r+0x9c>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9103      	str	r1, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfbb      	ittet	lt
 800a122:	425b      	neglt	r3, r3
 800a124:	f042 0202 	orrlt.w	r2, r2, #2
 800a128:	9307      	strge	r3, [sp, #28]
 800a12a:	9307      	strlt	r3, [sp, #28]
 800a12c:	bfb8      	it	lt
 800a12e:	9204      	strlt	r2, [sp, #16]
 800a130:	7823      	ldrb	r3, [r4, #0]
 800a132:	2b2e      	cmp	r3, #46	; 0x2e
 800a134:	d10c      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a136:	7863      	ldrb	r3, [r4, #1]
 800a138:	2b2a      	cmp	r3, #42	; 0x2a
 800a13a:	d134      	bne.n	800a1a6 <_svfiprintf_r+0x186>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	9203      	str	r2, [sp, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb8      	it	lt
 800a148:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14c:	3402      	adds	r4, #2
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a218 <_svfiprintf_r+0x1f8>
 800a154:	7821      	ldrb	r1, [r4, #0]
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	f7f6 f839 	bl	80001d0 <memchr>
 800a15e:	b138      	cbz	r0, 800a170 <_svfiprintf_r+0x150>
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	eba0 000a 	sub.w	r0, r0, sl
 800a166:	2240      	movs	r2, #64	; 0x40
 800a168:	4082      	lsls	r2, r0
 800a16a:	4313      	orrs	r3, r2
 800a16c:	3401      	adds	r4, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	4825      	ldr	r0, [pc, #148]	; (800a20c <_svfiprintf_r+0x1ec>)
 800a176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17a:	2206      	movs	r2, #6
 800a17c:	f7f6 f828 	bl	80001d0 <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d038      	beq.n	800a1f6 <_svfiprintf_r+0x1d6>
 800a184:	4b22      	ldr	r3, [pc, #136]	; (800a210 <_svfiprintf_r+0x1f0>)
 800a186:	bb1b      	cbnz	r3, 800a1d0 <_svfiprintf_r+0x1b0>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	3308      	adds	r3, #8
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a196:	4433      	add	r3, r6
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	e768      	b.n	800a06e <_svfiprintf_r+0x4e>
 800a19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7a6      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f04f 0c0a 	mov.w	ip, #10
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b8:	3a30      	subs	r2, #48	; 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_svfiprintf_r+0x1a6>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c6      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e7c4      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7f0      	b.n	800a1b2 <_svfiprintf_r+0x192>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a1d8:	a904      	add	r1, sp, #16
 800a1da:	4638      	mov	r0, r7
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	1c42      	adds	r2, r0, #1
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	d1d6      	bne.n	800a194 <_svfiprintf_r+0x174>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	065b      	lsls	r3, r3, #25
 800a1ea:	f53f af2d 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f0:	b01d      	add	sp, #116	; 0x74
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4638      	mov	r0, r7
 800a202:	f000 f879 	bl	800a2f8 <_printf_i>
 800a206:	e7eb      	b.n	800a1e0 <_svfiprintf_r+0x1c0>
 800a208:	08010848 	.word	0x08010848
 800a20c:	08010852 	.word	0x08010852
 800a210:	00000000 	.word	0x00000000
 800a214:	08009f6d 	.word	0x08009f6d
 800a218:	0801084e 	.word	0x0801084e

0800a21c <_printf_common>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	4616      	mov	r6, r2
 800a222:	4699      	mov	r9, r3
 800a224:	688a      	ldr	r2, [r1, #8]
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bfb8      	it	lt
 800a230:	4613      	movlt	r3, r2
 800a232:	6033      	str	r3, [r6, #0]
 800a234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a238:	4607      	mov	r7, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	b10a      	cbz	r2, 800a242 <_printf_common+0x26>
 800a23e:	3301      	adds	r3, #1
 800a240:	6033      	str	r3, [r6, #0]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	0699      	lsls	r1, r3, #26
 800a246:	bf42      	ittt	mi
 800a248:	6833      	ldrmi	r3, [r6, #0]
 800a24a:	3302      	addmi	r3, #2
 800a24c:	6033      	strmi	r3, [r6, #0]
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	f015 0506 	ands.w	r5, r5, #6
 800a254:	d106      	bne.n	800a264 <_printf_common+0x48>
 800a256:	f104 0a19 	add.w	sl, r4, #25
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	6832      	ldr	r2, [r6, #0]
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	42ab      	cmp	r3, r5
 800a262:	dc26      	bgt.n	800a2b2 <_printf_common+0x96>
 800a264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a268:	1e13      	subs	r3, r2, #0
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	2301      	movne	r3, #1
 800a270:	0692      	lsls	r2, r2, #26
 800a272:	d42b      	bmi.n	800a2cc <_printf_common+0xb0>
 800a274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a278:	4649      	mov	r1, r9
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c0      	blx	r8
 800a27e:	3001      	adds	r0, #1
 800a280:	d01e      	beq.n	800a2c0 <_printf_common+0xa4>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	f003 0306 	and.w	r3, r3, #6
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	bf02      	ittt	eq
 800a28e:	68e5      	ldreq	r5, [r4, #12]
 800a290:	6833      	ldreq	r3, [r6, #0]
 800a292:	1aed      	subeq	r5, r5, r3
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	bf0c      	ite	eq
 800a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a29c:	2500      	movne	r5, #0
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	bfc4      	itt	gt
 800a2a2:	1a9b      	subgt	r3, r3, r2
 800a2a4:	18ed      	addgt	r5, r5, r3
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	341a      	adds	r4, #26
 800a2aa:	42b5      	cmp	r5, r6
 800a2ac:	d11a      	bne.n	800a2e4 <_printf_common+0xc8>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e008      	b.n	800a2c4 <_printf_common+0xa8>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	47c0      	blx	r8
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d103      	bne.n	800a2c8 <_printf_common+0xac>
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	e7c6      	b.n	800a25a <_printf_common+0x3e>
 800a2cc:	18e1      	adds	r1, r4, r3
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	2030      	movs	r0, #48	; 0x30
 800a2d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d6:	4422      	add	r2, r4
 800a2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	e7c7      	b.n	800a274 <_printf_common+0x58>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	47c0      	blx	r8
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d0e6      	beq.n	800a2c0 <_printf_common+0xa4>
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	e7d9      	b.n	800a2aa <_printf_common+0x8e>
	...

0800a2f8 <_printf_i>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	7e0f      	ldrb	r7, [r1, #24]
 800a2fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a300:	2f78      	cmp	r7, #120	; 0x78
 800a302:	4691      	mov	r9, r2
 800a304:	4680      	mov	r8, r0
 800a306:	460c      	mov	r4, r1
 800a308:	469a      	mov	sl, r3
 800a30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a30e:	d807      	bhi.n	800a320 <_printf_i+0x28>
 800a310:	2f62      	cmp	r7, #98	; 0x62
 800a312:	d80a      	bhi.n	800a32a <_printf_i+0x32>
 800a314:	2f00      	cmp	r7, #0
 800a316:	f000 80d4 	beq.w	800a4c2 <_printf_i+0x1ca>
 800a31a:	2f58      	cmp	r7, #88	; 0x58
 800a31c:	f000 80c0 	beq.w	800a4a0 <_printf_i+0x1a8>
 800a320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a328:	e03a      	b.n	800a3a0 <_printf_i+0xa8>
 800a32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a32e:	2b15      	cmp	r3, #21
 800a330:	d8f6      	bhi.n	800a320 <_printf_i+0x28>
 800a332:	a101      	add	r1, pc, #4	; (adr r1, 800a338 <_printf_i+0x40>)
 800a334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a3a5 	.word	0x0800a3a5
 800a340:	0800a321 	.word	0x0800a321
 800a344:	0800a321 	.word	0x0800a321
 800a348:	0800a321 	.word	0x0800a321
 800a34c:	0800a321 	.word	0x0800a321
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a321 	.word	0x0800a321
 800a358:	0800a321 	.word	0x0800a321
 800a35c:	0800a321 	.word	0x0800a321
 800a360:	0800a321 	.word	0x0800a321
 800a364:	0800a4a9 	.word	0x0800a4a9
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a463 	.word	0x0800a463
 800a370:	0800a321 	.word	0x0800a321
 800a374:	0800a321 	.word	0x0800a321
 800a378:	0800a4cb 	.word	0x0800a4cb
 800a37c:	0800a321 	.word	0x0800a321
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a321 	.word	0x0800a321
 800a388:	0800a321 	.word	0x0800a321
 800a38c:	0800a46b 	.word	0x0800a46b
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	602a      	str	r2, [r5, #0]
 800a398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e09f      	b.n	800a4e4 <_printf_i+0x1ec>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	0607      	lsls	r7, r0, #24
 800a3aa:	f103 0104 	add.w	r1, r3, #4
 800a3ae:	6029      	str	r1, [r5, #0]
 800a3b0:	d501      	bpl.n	800a3b6 <_printf_i+0xbe>
 800a3b2:	681e      	ldr	r6, [r3, #0]
 800a3b4:	e003      	b.n	800a3be <_printf_i+0xc6>
 800a3b6:	0646      	lsls	r6, r0, #25
 800a3b8:	d5fb      	bpl.n	800a3b2 <_printf_i+0xba>
 800a3ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	da03      	bge.n	800a3ca <_printf_i+0xd2>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	4276      	negs	r6, r6
 800a3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ca:	485a      	ldr	r0, [pc, #360]	; (800a534 <_printf_i+0x23c>)
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	e012      	b.n	800a3f6 <_printf_i+0xfe>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	6029      	str	r1, [r5, #0]
 800a3d8:	0605      	lsls	r5, r0, #24
 800a3da:	d501      	bpl.n	800a3e0 <_printf_i+0xe8>
 800a3dc:	681e      	ldr	r6, [r3, #0]
 800a3de:	e002      	b.n	800a3e6 <_printf_i+0xee>
 800a3e0:	0641      	lsls	r1, r0, #25
 800a3e2:	d5fb      	bpl.n	800a3dc <_printf_i+0xe4>
 800a3e4:	881e      	ldrh	r6, [r3, #0]
 800a3e6:	4853      	ldr	r0, [pc, #332]	; (800a534 <_printf_i+0x23c>)
 800a3e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2308      	moveq	r3, #8
 800a3ee:	230a      	movne	r3, #10
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f6:	6865      	ldr	r5, [r4, #4]
 800a3f8:	60a5      	str	r5, [r4, #8]
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	bfa2      	ittt	ge
 800a3fe:	6821      	ldrge	r1, [r4, #0]
 800a400:	f021 0104 	bicge.w	r1, r1, #4
 800a404:	6021      	strge	r1, [r4, #0]
 800a406:	b90e      	cbnz	r6, 800a40c <_printf_i+0x114>
 800a408:	2d00      	cmp	r5, #0
 800a40a:	d04b      	beq.n	800a4a4 <_printf_i+0x1ac>
 800a40c:	4615      	mov	r5, r2
 800a40e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a412:	fb03 6711 	mls	r7, r3, r1, r6
 800a416:	5dc7      	ldrb	r7, [r0, r7]
 800a418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a41c:	4637      	mov	r7, r6
 800a41e:	42bb      	cmp	r3, r7
 800a420:	460e      	mov	r6, r1
 800a422:	d9f4      	bls.n	800a40e <_printf_i+0x116>
 800a424:	2b08      	cmp	r3, #8
 800a426:	d10b      	bne.n	800a440 <_printf_i+0x148>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	07de      	lsls	r6, r3, #31
 800a42c:	d508      	bpl.n	800a440 <_printf_i+0x148>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6861      	ldr	r1, [r4, #4]
 800a432:	4299      	cmp	r1, r3
 800a434:	bfde      	ittt	le
 800a436:	2330      	movle	r3, #48	; 0x30
 800a438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	6122      	str	r2, [r4, #16]
 800a444:	f8cd a000 	str.w	sl, [sp]
 800a448:	464b      	mov	r3, r9
 800a44a:	aa03      	add	r2, sp, #12
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f7ff fee4 	bl	800a21c <_printf_common>
 800a454:	3001      	adds	r0, #1
 800a456:	d14a      	bne.n	800a4ee <_printf_i+0x1f6>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	b004      	add	sp, #16
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	f043 0320 	orr.w	r3, r3, #32
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	4833      	ldr	r0, [pc, #204]	; (800a538 <_printf_i+0x240>)
 800a46c:	2778      	movs	r7, #120	; 0x78
 800a46e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6829      	ldr	r1, [r5, #0]
 800a476:	061f      	lsls	r7, r3, #24
 800a478:	f851 6b04 	ldr.w	r6, [r1], #4
 800a47c:	d402      	bmi.n	800a484 <_printf_i+0x18c>
 800a47e:	065f      	lsls	r7, r3, #25
 800a480:	bf48      	it	mi
 800a482:	b2b6      	uxthmi	r6, r6
 800a484:	07df      	lsls	r7, r3, #31
 800a486:	bf48      	it	mi
 800a488:	f043 0320 	orrmi.w	r3, r3, #32
 800a48c:	6029      	str	r1, [r5, #0]
 800a48e:	bf48      	it	mi
 800a490:	6023      	strmi	r3, [r4, #0]
 800a492:	b91e      	cbnz	r6, 800a49c <_printf_i+0x1a4>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	f023 0320 	bic.w	r3, r3, #32
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	2310      	movs	r3, #16
 800a49e:	e7a7      	b.n	800a3f0 <_printf_i+0xf8>
 800a4a0:	4824      	ldr	r0, [pc, #144]	; (800a534 <_printf_i+0x23c>)
 800a4a2:	e7e4      	b.n	800a46e <_printf_i+0x176>
 800a4a4:	4615      	mov	r5, r2
 800a4a6:	e7bd      	b.n	800a424 <_printf_i+0x12c>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	6826      	ldr	r6, [r4, #0]
 800a4ac:	6961      	ldr	r1, [r4, #20]
 800a4ae:	1d18      	adds	r0, r3, #4
 800a4b0:	6028      	str	r0, [r5, #0]
 800a4b2:	0635      	lsls	r5, r6, #24
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	d501      	bpl.n	800a4bc <_printf_i+0x1c4>
 800a4b8:	6019      	str	r1, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <_printf_i+0x1ca>
 800a4bc:	0670      	lsls	r0, r6, #25
 800a4be:	d5fb      	bpl.n	800a4b8 <_printf_i+0x1c0>
 800a4c0:	8019      	strh	r1, [r3, #0]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	4615      	mov	r5, r2
 800a4c8:	e7bc      	b.n	800a444 <_printf_i+0x14c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	602a      	str	r2, [r5, #0]
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7f5 fe7a 	bl	80001d0 <memchr>
 800a4dc:	b108      	cbz	r0, 800a4e2 <_printf_i+0x1ea>
 800a4de:	1b40      	subs	r0, r0, r5
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ec:	e7aa      	b.n	800a444 <_printf_i+0x14c>
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	47d0      	blx	sl
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d0ad      	beq.n	800a458 <_printf_i+0x160>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	079b      	lsls	r3, r3, #30
 800a500:	d413      	bmi.n	800a52a <_printf_i+0x232>
 800a502:	68e0      	ldr	r0, [r4, #12]
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	4298      	cmp	r0, r3
 800a508:	bfb8      	it	lt
 800a50a:	4618      	movlt	r0, r3
 800a50c:	e7a6      	b.n	800a45c <_printf_i+0x164>
 800a50e:	2301      	movs	r3, #1
 800a510:	4632      	mov	r2, r6
 800a512:	4649      	mov	r1, r9
 800a514:	4640      	mov	r0, r8
 800a516:	47d0      	blx	sl
 800a518:	3001      	adds	r0, #1
 800a51a:	d09d      	beq.n	800a458 <_printf_i+0x160>
 800a51c:	3501      	adds	r5, #1
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	9903      	ldr	r1, [sp, #12]
 800a522:	1a5b      	subs	r3, r3, r1
 800a524:	42ab      	cmp	r3, r5
 800a526:	dcf2      	bgt.n	800a50e <_printf_i+0x216>
 800a528:	e7eb      	b.n	800a502 <_printf_i+0x20a>
 800a52a:	2500      	movs	r5, #0
 800a52c:	f104 0619 	add.w	r6, r4, #25
 800a530:	e7f5      	b.n	800a51e <_printf_i+0x226>
 800a532:	bf00      	nop
 800a534:	08010859 	.word	0x08010859
 800a538:	0801086a 	.word	0x0801086a

0800a53c <memmove>:
 800a53c:	4288      	cmp	r0, r1
 800a53e:	b510      	push	{r4, lr}
 800a540:	eb01 0402 	add.w	r4, r1, r2
 800a544:	d902      	bls.n	800a54c <memmove+0x10>
 800a546:	4284      	cmp	r4, r0
 800a548:	4623      	mov	r3, r4
 800a54a:	d807      	bhi.n	800a55c <memmove+0x20>
 800a54c:	1e43      	subs	r3, r0, #1
 800a54e:	42a1      	cmp	r1, r4
 800a550:	d008      	beq.n	800a564 <memmove+0x28>
 800a552:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a55a:	e7f8      	b.n	800a54e <memmove+0x12>
 800a55c:	4402      	add	r2, r0
 800a55e:	4601      	mov	r1, r0
 800a560:	428a      	cmp	r2, r1
 800a562:	d100      	bne.n	800a566 <memmove+0x2a>
 800a564:	bd10      	pop	{r4, pc}
 800a566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a56a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a56e:	e7f7      	b.n	800a560 <memmove+0x24>

0800a570 <_sbrk_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d06      	ldr	r5, [pc, #24]	; (800a58c <_sbrk_r+0x1c>)
 800a574:	2300      	movs	r3, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	f7f6 fc7a 	bl	8000e74 <_sbrk>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d102      	bne.n	800a58a <_sbrk_r+0x1a>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	b103      	cbz	r3, 800a58a <_sbrk_r+0x1a>
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	20002104 	.word	0x20002104

0800a590 <memcpy>:
 800a590:	440a      	add	r2, r1
 800a592:	4291      	cmp	r1, r2
 800a594:	f100 33ff 	add.w	r3, r0, #4294967295
 800a598:	d100      	bne.n	800a59c <memcpy+0xc>
 800a59a:	4770      	bx	lr
 800a59c:	b510      	push	{r4, lr}
 800a59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	d1f9      	bne.n	800a59e <memcpy+0xe>
 800a5aa:	bd10      	pop	{r4, pc}

0800a5ac <_realloc_r>:
 800a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	4614      	mov	r4, r2
 800a5b4:	460e      	mov	r6, r1
 800a5b6:	b921      	cbnz	r1, 800a5c2 <_realloc_r+0x16>
 800a5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5bc:	4611      	mov	r1, r2
 800a5be:	f7ff bc49 	b.w	8009e54 <_malloc_r>
 800a5c2:	b92a      	cbnz	r2, 800a5d0 <_realloc_r+0x24>
 800a5c4:	f7ff fbda 	bl	8009d7c <_free_r>
 800a5c8:	4625      	mov	r5, r4
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d0:	f000 f81b 	bl	800a60a <_malloc_usable_size_r>
 800a5d4:	4284      	cmp	r4, r0
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	d802      	bhi.n	800a5e0 <_realloc_r+0x34>
 800a5da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5de:	d812      	bhi.n	800a606 <_realloc_r+0x5a>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	f7ff fc36 	bl	8009e54 <_malloc_r>
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0ed      	beq.n	800a5ca <_realloc_r+0x1e>
 800a5ee:	42bc      	cmp	r4, r7
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	bf28      	it	cs
 800a5f6:	463a      	movcs	r2, r7
 800a5f8:	f7ff ffca 	bl	800a590 <memcpy>
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4640      	mov	r0, r8
 800a600:	f7ff fbbc 	bl	8009d7c <_free_r>
 800a604:	e7e1      	b.n	800a5ca <_realloc_r+0x1e>
 800a606:	4635      	mov	r5, r6
 800a608:	e7df      	b.n	800a5ca <_realloc_r+0x1e>

0800a60a <_malloc_usable_size_r>:
 800a60a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60e:	1f18      	subs	r0, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	bfbc      	itt	lt
 800a614:	580b      	ldrlt	r3, [r1, r0]
 800a616:	18c0      	addlt	r0, r0, r3
 800a618:	4770      	bx	lr
	...

0800a61c <_init>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr

0800a628 <_fini>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr
