
407board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d43c  0800d43c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d444  0800d444  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d448  0800d448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800d44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001f80  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020fc  200020fc  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b5a4  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c5a  00000000  00000000  0003b793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001062  00000000  00000000  000419d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028599  00000000  00000000  00042a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f7dc  00000000  00000000  0006afd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6b88  00000000  00000000  0008a7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dc8  00000000  00000000  00161338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00167100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a830 	.word	0x0800a830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800a830 	.word	0x0800a830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <_ZL7TP_Readv>:
#include "ILI9341_Touchscreen.h"
#include "stm32f4xx_hal.h"

//Internal Touchpad command, do not call directly
static uint16_t TP_Read(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	80bb      	strh	r3, [r7, #4]

    while(i)
 8000b86:	e021      	b.n	8000bcc <_ZL7TP_Readv+0x54>
    {
        value <<= 1;
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <_ZL7TP_Readv+0x64>)
 8000b96:	f001 fea9 	bl	80028ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <_ZL7TP_Readv+0x64>)
 8000ba2:	f001 fea3 	bl	80028ec <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN))
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <_ZL7TP_Readv+0x64>)
 8000bac:	f001 fe86 	bl	80028bc <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <_ZL7TP_Readv+0x4e>
        {
            ++value;
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	80bb      	strh	r3, [r7, #4]
        }

        --i;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
    while(i)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1da      	bne.n	8000b88 <_ZL7TP_Readv+0x10>
    }

    return value;
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020400 	.word	0x40020400

08000be0 <_ZL8TP_Writeh>:

//Internal Touchpad command, do not call directly
static void TP_Write(uint8_t value)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000bea:	2308      	movs	r3, #8
 8000bec:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <_ZL8TP_Writeh+0x64>)
 8000bf6:	f001 fe79 	bl	80028ec <HAL_GPIO_WritePin>
	
    while(i)
 8000bfa:	e01a      	b.n	8000c32 <_ZL8TP_Writeh+0x52>
    {

        HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET );
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	09db      	lsrs	r3, r3, #7
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c08:	480e      	ldr	r0, [pc, #56]	; (8000c44 <_ZL8TP_Writeh+0x64>)
 8000c0a:	f001 fe6f 	bl	80028ec <HAL_GPIO_WritePin>

        value <<= 1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET); 	//  CLK pulse
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <_ZL8TP_Writeh+0x64>)
 8000c1c:	f001 fe66 	bl	80028ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <_ZL8TP_Writeh+0x64>)
 8000c28:	f001 fe60 	bl	80028ec <HAL_GPIO_WritePin>
        --i;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
    while(i)
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e1      	bne.n	8000bfc <_ZL8TP_Writeh+0x1c>
    }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020400 	.word	0x40020400

08000c48 <_Z19TP_Read_CoordinatesPt>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08b      	sub	sp, #44	; 0x2c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);			// CLK   - High
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4862      	ldr	r0, [pc, #392]	; (8000de0 <_Z19TP_Read_CoordinatesPt+0x198>)
 8000c58:	f001 fe48 	bl	80028ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);			// MOSI  - High
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c62:	485f      	ldr	r0, [pc, #380]	; (8000de0 <_Z19TP_Read_CoordinatesPt+0x198>)
 8000c64:	f001 fe42 	bl	80028ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);				// CS - High (inactively)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6e:	485c      	ldr	r0, [pc, #368]	; (8000de0 <_Z19TP_Read_CoordinatesPt+0x198>)
 8000c70:	f001 fe3c 	bl	80028ec <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
    uint16_t rawx, rawy = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81fb      	strh	r3, [r7, #14]
    uint32_t calculating_x, calculating_y = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = N_OF_POSITION_SAMPLES;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET); 			// CS - active
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8e:	4854      	ldr	r0, [pc, #336]	; (8000de0 <_Z19TP_Read_CoordinatesPt+0x198>)
 8000c90:	f001 fe2c 	bl	80028ec <HAL_GPIO_WritePin>

	
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 8000c94:	e023      	b.n	8000cde <_Z19TP_Read_CoordinatesPt+0x96>
    {			
        TP_Write(CMD_RDY);
 8000c96:	2090      	movs	r0, #144	; 0x90
 8000c98:	f7ff ffa2 	bl	8000be0 <_ZL8TP_Writeh>

				rawy = TP_Read();	
 8000c9c:	f7ff ff6c 	bl	8000b78 <_ZL7TP_Readv>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	6a3a      	ldr	r2, [r7, #32]
 8000ca8:	4413      	add	r3, r2
 8000caa:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8000cb4:	20d0      	movs	r0, #208	; 0xd0
 8000cb6:	f7ff ff93 	bl	8000be0 <_ZL8TP_Writeh>
        rawx = TP_Read();
 8000cba:	f7ff ff5d 	bl	8000b78 <_ZL7TP_Readv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8000cc2:	89bb      	ldrh	r3, [r7, #12]
 8000cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc6:	4413      	add	r3, r2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8000cca:	89bb      	ldrh	r3, [r7, #12]
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	4413      	add	r3, r2
 8000cd0:	61fb      	str	r3, [r7, #28]
        samples--;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <_Z19TP_Read_CoordinatesPt+0xae>
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	483f      	ldr	r0, [pc, #252]	; (8000de4 <_Z19TP_Read_CoordinatesPt+0x19c>)
 8000ce8:	f001 fde8 	bl	80028bc <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <_Z19TP_Read_CoordinatesPt+0xae>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <_Z19TP_Read_CoordinatesPt+0xb0>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1cc      	bne.n	8000c96 <_Z19TP_Read_CoordinatesPt+0x4e>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d02:	4837      	ldr	r0, [pc, #220]	; (8000de0 <_Z19TP_Read_CoordinatesPt+0x198>)
 8000d04:	f001 fdf2 	bl	80028ec <HAL_GPIO_WritePin>

		
		if((counted_samples == N_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b40      	cmp	r3, #64	; 0x40
 8000d0c:	d108      	bne.n	8000d20 <_Z19TP_Read_CoordinatesPt+0xd8>
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4834      	ldr	r0, [pc, #208]	; (8000de4 <_Z19TP_Read_CoordinatesPt+0x19c>)
 8000d12:	f001 fdd3 	bl	80028bc <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <_Z19TP_Read_CoordinatesPt+0xd8>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <_Z19TP_Read_CoordinatesPt+0xda>
 8000d20:	2300      	movs	r3, #0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d04c      	beq.n	8000dc0 <_Z19TP_Read_CoordinatesPt+0x178>
		{
		
		calculating_x /= counted_samples;
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d38:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	425b      	negs	r3, r3
 8000d46:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8000d4e:	89ba      	ldrh	r2, [r7, #12]
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <_Z19TP_Read_CoordinatesPt+0x1a0>)
 8000d52:	fba3 1302 	umull	r1, r3, r3, r2
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	0852      	lsrs	r2, r2, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcff 	bl	8000768 <__aeabi_i2d>
 8000d6a:	a31b      	add	r3, pc, #108	; (adr r3, 8000dd8 <_Z19TP_Read_CoordinatesPt+0x190>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fa7e 	bl	8000270 <__aeabi_dmul>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fd5e 	bl	800083c <__aeabi_d2uiz>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <_Z19TP_Read_CoordinatesPt+0x1a4>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	09db      	lsrs	r3, r3, #7
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3b0f      	subs	r3, #15
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fce6 	bl	8000768 <__aeabi_i2d>
 8000d9c:	a30e      	add	r3, pc, #56	; (adr r3, 8000dd8 <_Z19TP_Read_CoordinatesPt+0x190>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fa65 	bl	8000270 <__aeabi_dmul>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1c9c      	adds	r4, r3, #2
 8000db2:	f7ff fd43 	bl	800083c <__aeabi_d2uiz>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	8023      	strh	r3, [r4, #0]
		
		return TOUCHPAD_DATA_OK;			
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e007      	b.n	8000dd0 <_Z19TP_Read_CoordinatesPt+0x188>
		}
		else
		{
			Coordinates[0] = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8000dce:	2300      	movs	r3, #0
		}
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	372c      	adds	r7, #44	; 0x2c
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	28f5c28f 	.word	0x28f5c28f
 8000ddc:	3ff28f5c 	.word	0x3ff28f5c
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	e01e01e1 	.word	0xe01e01e1
 8000dec:	a0a0a0a1 	.word	0xa0a0a0a1

08000df0 <_Z19TP_Touchpad_Pressedv>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8000df4:	2120      	movs	r1, #32
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <_Z19TP_Touchpad_Pressedv+0x28>)
 8000df8:	f001 fd60 	bl	80028bc <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <_Z19TP_Touchpad_Pressedv+0x20>
	{
		return TOUCHPAD_PRESSED;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <_Z19TP_Touchpad_Pressedv+0x22>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8000e10:	2300      	movs	r3, #0
	}
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40020800 	.word	0x40020800

08000e1c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e36:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e3a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e3e:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <MX_FSMC_Init+0xbc>)
 8000e40:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000eac:	2311      	movs	r3, #17
 8000eae:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_FSMC_Init+0xb8>)
 8000ebc:	f004 f818 	bl	8004ef0 <HAL_SRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000ec6:	f000 feeb 	bl	8001ca0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000198 	.word	0x20000198
 8000ed8:	a0000104 	.word	0xa0000104

08000edc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_FSMC_MspInit+0xa8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d141      	bne.n	8000f7c <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_FSMC_MspInit+0xa8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_FSMC_MspInit+0xac>)
 8000f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f06:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <HAL_FSMC_MspInit+0xac>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_FSMC_MspInit+0xac>)
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f1a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <HAL_FSMC_MspInit+0xb0>)
 8000f36:	f001 fb25 	bl	8002584 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000f3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <HAL_FSMC_MspInit+0xb4>)
 8000f56:	f001 fb15 	bl	8002584 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f5a:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8000f5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <HAL_FSMC_MspInit+0xb4>)
 8000f76:	f001 fb05 	bl	8002584 <HAL_GPIO_Init>
 8000f7a:	e000      	b.n	8000f7e <HAL_FSMC_MspInit+0xa2>
    return;
 8000f7c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200001e8 	.word	0x200001e8
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000f9c:	f7ff ff9e 	bl	8000edc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a5a      	ldr	r2, [pc, #360]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b58      	ldr	r3, [pc, #352]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <MX_GPIO_Init+0x1a4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a53      	ldr	r2, [pc, #332]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b51      	ldr	r3, [pc, #324]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a4c      	ldr	r2, [pc, #304]	; (800114c <MX_GPIO_Init+0x1a4>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b4a      	ldr	r3, [pc, #296]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a45      	ldr	r2, [pc, #276]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a3e      	ldr	r2, [pc, #248]	; (800114c <MX_GPIO_Init+0x1a4>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <MX_GPIO_Init+0x1a4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	21c0      	movs	r1, #192	; 0xc0
 800106a:	4839      	ldr	r0, [pc, #228]	; (8001150 <MX_GPIO_Init+0x1a8>)
 800106c:	f001 fc3e 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2102      	movs	r1, #2
 8001074:	4837      	ldr	r0, [pc, #220]	; (8001154 <MX_GPIO_Init+0x1ac>)
 8001076:	f001 fc39 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CS_Pin|T_CLK_Pin|T_MOSI_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8001080:	4834      	ldr	r0, [pc, #208]	; (8001154 <MX_GPIO_Init+0x1ac>)
 8001082:	f001 fc33 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001086:	2318      	movs	r3, #24
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	482f      	ldr	r0, [pc, #188]	; (8001158 <MX_GPIO_Init+0x1b0>)
 800109a:	f001 fa73 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4826      	ldr	r0, [pc, #152]	; (8001150 <MX_GPIO_Init+0x1a8>)
 80010b6:	f001 fa65 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 80010ba:	2320      	movs	r3, #32
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <MX_GPIO_Init+0x1b4>)
 80010ce:	f001 fa59 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_GPIO_Init+0x1ac>)
 80010ea:	f001 fa4b 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010f4:	2311      	movs	r3, #17
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_GPIO_Init+0x1ac>)
 8001108:	f001 fa3c 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 800110c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0x1ac>)
 8001126:	f001 fa2d 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800112a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_GPIO_Init+0x1ac>)
 8001140:	f001 fa20 	bl	8002584 <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40021000 	.word	0x40021000
 800115c:	40020800 	.word	0x40020800

08001160 <_Z7lcdInitv>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2301      	movs	r3, #1
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fc27 	bl	80019c8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4bae      	ldr	r3, [pc, #696]	; (8001438 <_Z7lcdInitv+0x2d8>)
 8001180:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001182:	2300      	movs	r3, #0
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	2201      	movs	r2, #1
 800118e:	2100      	movs	r1, #0
 8001190:	2000      	movs	r0, #0
 8001192:	f000 fc19 	bl	80019c8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4ba8      	ldr	r3, [pc, #672]	; (800143c <_Z7lcdInitv+0x2dc>)
 800119c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800119e:	2300      	movs	r3, #0
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fc0b 	bl	80019c8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <_Z7lcdInitv+0x2e0>)
 80011b8:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80011ba:	2300      	movs	r3, #0
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2301      	movs	r3, #1
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	2201      	movs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 fbfd 	bl	80019c8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b9c      	ldr	r3, [pc, #624]	; (8001444 <_Z7lcdInitv+0x2e4>)
 80011d4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80011d6:	f000 fbcd 	bl	8001974 <_ZL8lcdResetv>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f000 fbd4 	bl	8001988 <_ZL15lcdWriteCommandh>

  lcdWriteCommand(0xCF);
 80011e0:	20cf      	movs	r0, #207	; 0xcf
 80011e2:	f000 fbd1 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fbde 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x83);
 80011ec:	2083      	movs	r0, #131	; 0x83
 80011ee:	f000 fbdb 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x30);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f000 fbd8 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xED);
 80011f8:	20ed      	movs	r0, #237	; 0xed
 80011fa:	f000 fbc5 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x64);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f000 fbd2 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x03);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 fbcf 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x12);
 800120a:	2012      	movs	r0, #18
 800120c:	f000 fbcc 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x81);
 8001210:	2081      	movs	r0, #129	; 0x81
 8001212:	f000 fbc9 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xE8);
 8001216:	20e8      	movs	r0, #232	; 0xe8
 8001218:	f000 fbb6 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x85);
 800121c:	2085      	movs	r0, #133	; 0x85
 800121e:	f000 fbc3 	bl	80019a8 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x01);
  lcdWriteData(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fbc0 	bl	80019a8 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x79);
  lcdWriteData(0x78);
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f000 fbbd 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xCB);
 800122e:	20cb      	movs	r0, #203	; 0xcb
 8001230:	f000 fbaa 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x39);
 8001234:	2039      	movs	r0, #57	; 0x39
 8001236:	f000 fbb7 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x2C);
 800123a:	202c      	movs	r0, #44	; 0x2c
 800123c:	f000 fbb4 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fbb1 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x34);
 8001246:	2034      	movs	r0, #52	; 0x34
 8001248:	f000 fbae 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 fbab 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF7);
 8001252:	20f7      	movs	r0, #247	; 0xf7
 8001254:	f000 fb98 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x20);
 8001258:	2020      	movs	r0, #32
 800125a:	f000 fba5 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xEA);
 800125e:	20ea      	movs	r0, #234	; 0xea
 8001260:	f000 fb92 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fb9f 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 fb9c 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8001270:	20c0      	movs	r0, #192	; 0xc0
 8001272:	f000 fb89 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x26);
 8001276:	2026      	movs	r0, #38	; 0x26
 8001278:	f000 fb96 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800127c:	20c1      	movs	r0, #193	; 0xc1
 800127e:	f000 fb83 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x11);
 8001282:	2011      	movs	r0, #17
 8001284:	f000 fb90 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8001288:	20c5      	movs	r0, #197	; 0xc5
 800128a:	f000 fb7d 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x35);
 800128e:	2035      	movs	r0, #53	; 0x35
 8001290:	f000 fb8a 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3E);
 8001294:	203e      	movs	r0, #62	; 0x3e
 8001296:	f000 fb87 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800129a:	20c7      	movs	r0, #199	; 0xc7
 800129c:	f000 fb74 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0xBE);
 80012a0:	20be      	movs	r0, #190	; 0xbe
 80012a2:	f000 fb81 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80012a6:	2036      	movs	r0, #54	; 0x36
 80012a8:	f000 fb6e 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(lcdPortraitConfig);
 80012ac:	4b62      	ldr	r3, [pc, #392]	; (8001438 <_Z7lcdInitv+0x2d8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fb78 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80012b8:	203a      	movs	r0, #58	; 0x3a
 80012ba:	f000 fb65 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x55);
 80012be:	2055      	movs	r0, #85	; 0x55
 80012c0:	f000 fb72 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80012c4:	20b1      	movs	r0, #177	; 0xb1
 80012c6:	f000 fb5f 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fb6c 	bl	80019a8 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x1B);
  lcdWriteData(0x18);
 80012d0:	2018      	movs	r0, #24
 80012d2:	f000 fb69 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF2);
 80012d6:	20f2      	movs	r0, #242	; 0xf2
 80012d8:	f000 fb56 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x08);
 80012dc:	2008      	movs	r0, #8
 80012de:	f000 fb63 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_GAMMASET);
 80012e2:	2026      	movs	r0, #38	; 0x26
 80012e4:	f000 fb50 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x01);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 fb5d 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80012ee:	20e0      	movs	r0, #224	; 0xe0
 80012f0:	f000 fb4a 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x1F);
 80012f4:	201f      	movs	r0, #31
 80012f6:	f000 fb57 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1A);
 80012fa:	201a      	movs	r0, #26
 80012fc:	f000 fb54 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8001300:	2018      	movs	r0, #24
 8001302:	f000 fb51 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8001306:	200a      	movs	r0, #10
 8001308:	f000 fb4e 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0F);
 800130c:	200f      	movs	r0, #15
 800130e:	f000 fb4b 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x06);
 8001312:	2006      	movs	r0, #6
 8001314:	f000 fb48 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x45);
 8001318:	2045      	movs	r0, #69	; 0x45
 800131a:	f000 fb45 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x87);
 800131e:	2087      	movs	r0, #135	; 0x87
 8001320:	f000 fb42 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x32);
 8001324:	2032      	movs	r0, #50	; 0x32
 8001326:	f000 fb3f 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 800132a:	200a      	movs	r0, #10
 800132c:	f000 fb3c 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8001330:	2007      	movs	r0, #7
 8001332:	f000 fb39 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8001336:	2002      	movs	r0, #2
 8001338:	f000 fb36 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 800133c:	2007      	movs	r0, #7
 800133e:	f000 fb33 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8001342:	2005      	movs	r0, #5
 8001344:	f000 fb30 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8001348:	2000      	movs	r0, #0
 800134a:	f000 fb2d 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 800134e:	20e1      	movs	r0, #225	; 0xe1
 8001350:	f000 fb1a 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f000 fb27 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x25);
 800135a:	2025      	movs	r0, #37	; 0x25
 800135c:	f000 fb24 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8001360:	2027      	movs	r0, #39	; 0x27
 8001362:	f000 fb21 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8001366:	2005      	movs	r0, #5
 8001368:	f000 fb1e 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x10);
 800136c:	2010      	movs	r0, #16
 800136e:	f000 fb1b 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x09);
 8001372:	2009      	movs	r0, #9
 8001374:	f000 fb18 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8001378:	203a      	movs	r0, #58	; 0x3a
 800137a:	f000 fb15 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 800137e:	2078      	movs	r0, #120	; 0x78
 8001380:	f000 fb12 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x4D);
 8001384:	204d      	movs	r0, #77	; 0x4d
 8001386:	f000 fb0f 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 800138a:	2005      	movs	r0, #5
 800138c:	f000 fb0c 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8001390:	2018      	movs	r0, #24
 8001392:	f000 fb09 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0D);
 8001396:	200d      	movs	r0, #13
 8001398:	f000 fb06 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x38);
 800139c:	2038      	movs	r0, #56	; 0x38
 800139e:	f000 fb03 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 80013a2:	203a      	movs	r0, #58	; 0x3a
 80013a4:	f000 fb00 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1F);
 80013a8:	201f      	movs	r0, #31
 80013aa:	f000 fafd 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80013ae:	202a      	movs	r0, #42	; 0x2a
 80013b0:	f000 faea 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 faf7 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 faf4 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 faf1 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0xEF);
 80013c6:	20ef      	movs	r0, #239	; 0xef
 80013c8:	f000 faee 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80013cc:	202b      	movs	r0, #43	; 0x2b
 80013ce:	f000 fadb 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 fae8 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 fae5 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x01);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 fae2 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3F);
 80013e4:	203f      	movs	r0, #63	; 0x3f
 80013e6:	f000 fadf 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80013ea:	20b7      	movs	r0, #183	; 0xb7
 80013ec:	f000 facc 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x07);
 80013f0:	2007      	movs	r0, #7
 80013f2:	f000 fad9 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80013f6:	20b6      	movs	r0, #182	; 0xb6
 80013f8:	f000 fac6 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x0A);
 80013fc:	200a      	movs	r0, #10
 80013fe:	f000 fad3 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x82);
 8001402:	2082      	movs	r0, #130	; 0x82
 8001404:	f000 fad0 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f000 facd 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 faca 	bl	80019a8 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8001414:	2011      	movs	r0, #17
 8001416:	f000 fab7 	bl	8001988 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f000 feea 	bl	80021f4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8001420:	2029      	movs	r0, #41	; 0x29
 8001422:	f000 fab1 	bl	8001988 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f000 fee4 	bl	80021f4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800142c:	202c      	movs	r0, #44	; 0x2c
 800142e:	f000 faab 	bl	8001988 <_ZL15lcdWriteCommandh>
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001f0 	.word	0x200001f0
 800143c:	200001f1 	.word	0x200001f1
 8001440:	200001f2 	.word	0x200001f2
 8001444:	200001f3 	.word	0x200001f3

08001448 <_Z10lcdFillRGBt>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <_Z10lcdFillRGBt+0x5c>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3b01      	subs	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <_Z10lcdFillRGBt+0x5c>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	3b01      	subs	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fa29 	bl	80018bc <_Z12lcdSetWindowtttt>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <_Z10lcdFillRGBt+0x5c>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <_Z10lcdFillRGBt+0x5c>)
 8001472:	885b      	ldrh	r3, [r3, #2]
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800147a:	e003      	b.n	8001484 <_Z10lcdFillRGBt+0x3c>
  {
    lcdWriteData(color);
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fa92 	bl	80019a8 <_ZL12lcdWriteDatat>
  while(dimensions--)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	60fa      	str	r2, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f1      	bne.n	800147c <_Z10lcdFillRGBt+0x34>
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000018 	.word	0x20000018

080014a8 <_Z12lcdDrawPixelttt>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	460b      	mov	r3, r1
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <_Z12lcdDrawPixelttt+0x44>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d20f      	bcs.n	80014e4 <_Z12lcdDrawPixelttt+0x3c>
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <_Z12lcdDrawPixelttt+0x44>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	88ba      	ldrh	r2, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20a      	bcs.n	80014e4 <_Z12lcdDrawPixelttt+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	88b9      	ldrh	r1, [r7, #4]
 80014d4:	88f8      	ldrh	r0, [r7, #6]
 80014d6:	f000 f9f1 	bl	80018bc <_Z12lcdSetWindowtttt>
    lcdWriteData(color);
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa63 	bl	80019a8 <_ZL12lcdWriteDatat>
 80014e2:	e000      	b.n	80014e6 <_Z12lcdDrawPixelttt+0x3e>
        return;
 80014e4:	bf00      	nop
}
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000018 	.word	0x20000018

080014f0 <_Z11lcdDrawCharsshtt>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	4603      	mov	r3, r0
 8001504:	80bb      	strh	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	70fb      	strb	r3, [r7, #3]
 800150a:	4613      	mov	r3, r2
 800150c:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	4a4a      	ldr	r2, [pc, #296]	; (800163c <_Z11lcdDrawCharsshtt+0x14c>)
 8001514:	8812      	ldrh	r2, [r2, #0]
 8001516:	4293      	cmp	r3, r2
 8001518:	f280 808b 	bge.w	8001632 <_Z11lcdDrawCharsshtt+0x142>
			(y >= lcdProperties.height) || 		// Clip bottom
 800151c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001520:	4a46      	ldr	r2, [pc, #280]	; (800163c <_Z11lcdDrawCharsshtt+0x14c>)
 8001522:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001524:	4293      	cmp	r3, r2
 8001526:	f280 8084 	bge.w	8001632 <_Z11lcdDrawCharsshtt+0x142>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	4a44      	ldr	r2, [pc, #272]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 8001530:	6892      	ldr	r2, [r2, #8]
 8001532:	8892      	ldrh	r2, [r2, #4]
 8001534:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8001536:	2b00      	cmp	r3, #0
 8001538:	db7b      	blt.n	8001632 <_Z11lcdDrawCharsshtt+0x142>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 800153a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800153e:	4a40      	ldr	r2, [pc, #256]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 8001540:	6892      	ldr	r2, [r2, #8]
 8001542:	88d2      	ldrh	r2, [r2, #6]
 8001544:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001546:	2b00      	cmp	r3, #0
 8001548:	db73      	blt.n	8001632 <_Z11lcdDrawCharsshtt+0x142>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	88db      	ldrh	r3, [r3, #6]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	b29b      	uxth	r3, r3
 8001554:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	73bb      	strb	r3, [r7, #14]
 800155e:	e061      	b.n	8001624 <_Z11lcdDrawCharsshtt+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8001560:	2300      	movs	r3, #0
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	e055      	b.n	8001612 <_Z11lcdDrawCharsshtt+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	3a20      	subs	r2, #32
 8001570:	4933      	ldr	r1, [pc, #204]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 8001572:	6889      	ldr	r1, [r1, #8]
 8001574:	88c9      	ldrh	r1, [r1, #6]
 8001576:	fb01 f202 	mul.w	r2, r1, r2
 800157a:	7ab9      	ldrb	r1, [r7, #10]
 800157c:	fb02 f101 	mul.w	r1, r2, r1
 8001580:	7bba      	ldrb	r2, [r7, #14]
 8001582:	7ab8      	ldrb	r0, [r7, #10]
 8001584:	fb00 f202 	mul.w	r2, r0, r2
 8001588:	4411      	add	r1, r2
 800158a:	7b3a      	ldrb	r2, [r7, #12]
 800158c:	440a      	add	r2, r1
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001594:	2300      	movs	r3, #0
 8001596:	72fb      	strb	r3, [r7, #11]
 8001598:	e032      	b.n	8001600 <_Z11lcdDrawCharsshtt+0x110>
			{
				if((line & 0x80) == 0x80)
 800159a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da12      	bge.n	80015c8 <_Z11lcdDrawCharsshtt+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4413      	add	r3, r2
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b298      	uxth	r0, r3
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	883a      	ldrh	r2, [r7, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff ff71 	bl	80014a8 <_Z12lcdDrawPixelttt>
 80015c6:	e015      	b.n	80015f4 <_Z11lcdDrawCharsshtt+0x104>
				}
				else if (bg != color)
 80015c8:	8c3a      	ldrh	r2, [r7, #32]
 80015ca:	883b      	ldrh	r3, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d011      	beq.n	80015f4 <_Z11lcdDrawCharsshtt+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4413      	add	r3, r2
 80015d8:	b29a      	uxth	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	b298      	uxth	r0, r3
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	8c3a      	ldrh	r2, [r7, #32]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff ff5a 	bl	80014a8 <_Z12lcdDrawPixelttt>
				}
				line <<= 1;
 80015f4:	7b7b      	ldrb	r3, [r7, #13]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80015fa:	7afb      	ldrb	r3, [r7, #11]
 80015fc:	3301      	adds	r3, #1
 80015fe:	72fb      	strb	r3, [r7, #11]
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	2b07      	cmp	r3, #7
 8001604:	d9c9      	bls.n	800159a <_Z11lcdDrawCharsshtt+0xaa>
			}

			xP += 8;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3308      	adds	r3, #8
 800160a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800160c:	7b3b      	ldrb	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	733b      	strb	r3, [r7, #12]
 8001612:	7b3a      	ldrb	r2, [r7, #12]
 8001614:	7abb      	ldrb	r3, [r7, #10]
 8001616:	429a      	cmp	r2, r3
 8001618:	d3a5      	bcc.n	8001566 <_Z11lcdDrawCharsshtt+0x76>
		}

		xP = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	3301      	adds	r3, #1
 8001622:	73bb      	strb	r3, [r7, #14]
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <_Z11lcdDrawCharsshtt+0x150>)
 8001628:	6892      	ldr	r2, [r2, #8]
 800162a:	88d2      	ldrh	r2, [r2, #6]
 800162c:	4293      	cmp	r3, r2
 800162e:	db97      	blt.n	8001560 <_Z11lcdDrawCharsshtt+0x70>
 8001630:	e000      	b.n	8001634 <_Z11lcdDrawCharsshtt+0x144>
		return;
 8001632:	bf00      	nop
	}
}
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	20000018 	.word	0x20000018
 8001640:	20000020 	.word	0x20000020

08001644 <_Z9lcdPrintfPKcz>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001644:	b40f      	push	{r0, r1, r2, r3}
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b085      	sub	sp, #20
 800164a:	af02      	add	r7, sp, #8
	static char buf[256];

	char *p;
	va_list lst;

	va_start(lst, fmt);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	69b9      	ldr	r1, [r7, #24]
 8001656:	483e      	ldr	r0, [pc, #248]	; (8001750 <_Z9lcdPrintfPKcz+0x10c>)
 8001658:	f008 fc5c 	bl	8009f14 <vsiprintf>
	va_end(lst);

	p = buf;
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <_Z9lcdPrintfPKcz+0x10c>)
 800165e:	607b      	str	r3, [r7, #4]
	while (*p)
 8001660:	e069      	b.n	8001736 <_Z9lcdPrintfPKcz+0xf2>
	{
		if (*p == '\n')
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d10e      	bne.n	8001688 <_Z9lcdPrintfPKcz+0x44>
		{
			cursorXY.y += lcdFont.pFont->Height + 1;
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 800166c:	885a      	ldrh	r2, [r3, #2]
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	88db      	ldrh	r3, [r3, #6]
 8001674:	4413      	add	r3, r2
 8001676:	b29b      	uxth	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 800167e:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	e04a      	b.n	800171e <_Z9lcdPrintfPKcz+0xda>
		}
		else if (*p == '\r')
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b0d      	cmp	r3, #13
 800168e:	d046      	beq.n	800171e <_Z9lcdPrintfPKcz+0xda>
		{
			// skip em
		}
		else if (*p == '\t')
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b09      	cmp	r3, #9
 8001696:	d10b      	bne.n	80016b0 <_Z9lcdPrintfPKcz+0x6c>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	e036      	b.n	800171e <_Z9lcdPrintfPKcz+0xda>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b218      	sxth	r0, r3
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	b219      	sxth	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29c      	uxth	r4, r3
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	4623      	mov	r3, r4
 80016d0:	f7ff ff0e 	bl	80014f0 <_Z11lcdDrawCharsshtt>
			cursorXY.x += lcdFont.pFont->Width;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016e4:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d017      	beq.n	800171e <_Z9lcdPrintfPKcz+0xda>
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <_Z9lcdPrintfPKcz+0x118>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	889b      	ldrh	r3, [r3, #4]
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	429a      	cmp	r2, r3
 8001704:	dd0b      	ble.n	800171e <_Z9lcdPrintfPKcz+0xda>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 8001708:	885a      	ldrh	r2, [r3, #2]
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_Z9lcdPrintfPKcz+0x114>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	88db      	ldrh	r3, [r3, #6]
 8001710:	4413      	add	r3, r2
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 8001716:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 8001726:	885a      	ldrh	r2, [r3, #2]
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <_Z9lcdPrintfPKcz+0x118>)
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	429a      	cmp	r2, r3
 800172e:	d302      	bcc.n	8001736 <_Z9lcdPrintfPKcz+0xf2>
		{
			cursorXY.y = 0;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_Z9lcdPrintfPKcz+0x110>)
 8001732:	2200      	movs	r2, #0
 8001734:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d191      	bne.n	8001662 <_Z9lcdPrintfPKcz+0x1e>
		}
	}

}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800174a:	b004      	add	sp, #16
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001f4 	.word	0x200001f4
 8001754:	200001ec 	.word	0x200001ec
 8001758:	20000020 	.word	0x20000020
 800175c:	20000018 	.word	0x20000018

08001760 <_Z14lcdSetTextFontP6_tFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <_Z14lcdSetTextFontP6_tFont+0x1c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6093      	str	r3, [r2, #8]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000020 	.word	0x20000020

08001780 <_Z15lcdSetTextColortt>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	4613      	mov	r3, r2
 800178e:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_Z15lcdSetTextColortt+0x28>)
 8001794:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <_Z15lcdSetTextColortt+0x28>)
 800179a:	6053      	str	r3, [r2, #4]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000020 	.word	0x20000020

080017ac <_Z17lcdSetOrientation21lcdOrientationTypeDef>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 80017b6:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 80017bc:	2036      	movs	r0, #54	; 0x36
 80017be:	f000 f8e3 	bl	8001988 <_ZL15lcdWriteCommandh>

	switch (lcdProperties.orientation)
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d842      	bhi.n	8001850 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa4>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0x24>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	08001819 	.word	0x08001819
 80017d8:	080017fd 	.word	0x080017fd
 80017dc:	08001835 	.word	0x08001835
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xcc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f8de 	bl	80019a8 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80017ee:	22f0      	movs	r2, #240	; 0xf0
 80017f0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80017f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017f8:	805a      	strh	r2, [r3, #2]
			break;
 80017fa:	e02a      	b.n	8001852 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f8d0 	bl	80019a8 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800180a:	22f0      	movs	r2, #240	; 0xf0
 800180c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001810:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001814:	805a      	strh	r2, [r3, #2]
			break;
 8001816:	e01c      	b.n	8001852 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f8c2 	bl	80019a8 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001826:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800182a:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800182e:	22f0      	movs	r2, #240	; 0xf0
 8001830:	805a      	strh	r2, [r3, #2]
			break;
 8001832:	e00e      	b.n	8001852 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd8>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8b4 	bl	80019a8 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001842:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001846:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800184a:	22f0      	movs	r2, #240	; 0xf0
 800184c:	805a      	strh	r2, [r3, #2]
			break;
 800184e:	e000      	b.n	8001852 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		default:
			break;
 8001850:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800185c:	885b      	ldrh	r3, [r3, #2]
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	2100      	movs	r1, #0
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f829 	bl	80018bc <_Z12lcdSetWindowtttt>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000018 	.word	0x20000018
 8001878:	200001f0 	.word	0x200001f0
 800187c:	200001f2 	.word	0x200001f2
 8001880:	200001f1 	.word	0x200001f1
 8001884:	200001f3 	.word	0x200001f3

08001888 <_Z12lcdSetCursortt>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <_Z12lcdSetCursortt+0x30>)
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <_Z12lcdSetCursortt+0x30>)
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	88b9      	ldrh	r1, [r7, #4]
 80018aa:	88f8      	ldrh	r0, [r7, #6]
 80018ac:	f000 f806 	bl	80018bc <_Z12lcdSetWindowtttt>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001ec 	.word	0x200001ec

080018bc <_Z12lcdSetWindowtttt>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]
//  lcdWriteData((y0 >> 8) & 0xFF);
//  lcdWriteData(y0 & 0xFF);
//  lcdWriteData((y1 >> 8) & 0xFF);
//  lcdWriteData(y1 & 0xFF);
//  lcdWriteCommand(ILI9341_MEMORYWRITE);
  lcdWriteCommand(ILI9341_COLADDRSET);
 80018da:	202a      	movs	r0, #42	; 0x2a
 80018dc:	f000 f854 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(x0 >> 8) ;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f85e 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(x0 );
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f85a 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(x1 >> 8);
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f854 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(x1);
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f850 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001908:	202b      	movs	r0, #43	; 0x2b
 800190a:	f000 f83d 	bl	8001988 <_ZL15lcdWriteCommandh>
  lcdWriteData(y0 >> 8);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f847 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(y0);
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f843 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(y1 >> 8);
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f000 f83d 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteData(y1);
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f839 	bl	80019a8 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	f000 f826 	bl	8001988 <_ZL15lcdWriteCommandh>
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <_Z12lcdGetHeightv>:
{
  return lcdProperties.width;
}

uint16_t lcdGetHeight(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <_Z12lcdGetHeightv+0x14>)
 800194a:	885b      	ldrh	r3, [r3, #2]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000018 	.word	0x20000018

0800195c <_Z14lcdGetTextFontv>:
{
  return lcdProperties.orientation;
}

sFONT* lcdGetTextFont(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <_Z14lcdGetTextFontv+0x14>)
 8001962:	689b      	ldr	r3, [r3, #8]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000020 	.word	0x20000020

08001974 <_ZL8lcdResetv>:

  while(i < sizeof(*data)/ sizeof(data[1]));
}

static void lcdReset(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001978:	2001      	movs	r0, #1
 800197a:	f000 f805 	bl	8001988 <_ZL15lcdWriteCommandh>
	HAL_Delay(5);
 800197e:	2005      	movs	r0, #5
 8001980:	f000 fc38 	bl	80021f4 <HAL_Delay>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZL15lcdWriteCommandh>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001992:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	b292      	uxth	r2, r2
 800199a:	801a      	strh	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_ZL12lcdWriteDatat>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <_ZL12lcdWriteDatat+0x1c>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	8013      	strh	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	60080000 	.word	0x60080000

080019c8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 80019c8:	b490      	push	{r4, r7}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4603      	mov	r3, r0
 80019dc:	71bb      	strb	r3, [r7, #6]
 80019de:	460b      	mov	r3, r1
 80019e0:	717b      	strb	r3, [r7, #5]
 80019e2:	4613      	mov	r3, r2
 80019e4:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) 	value 	|= ILI9341_MADCTL_MH;
 80019ea:	7f3b      	ldrb	r3, [r7, #28]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x30>
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) 		value 	|= ILI9341_MADCTL_BGR;
 80019f8:	7e3b      	ldrb	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x3e>
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) 	value 	|= ILI9341_MADCTL_ML;
 8001a06:	793b      	ldrb	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x4c>
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) 	value 	|= ILI9341_MADCTL_MV;
 8001a14:	797b      	ldrb	r3, [r7, #5]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x5a>
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) 	value 	|= ILI9341_MADCTL_MX;
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x68>
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) 		value 	|= ILI9341_MADCTL_MY;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x76>
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3c:	73fb      	strb	r3, [r7, #15]
  return value;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc90      	pop	{r4, r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a52:	f000 fb5d 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a56:	f000 f879 	bl	8001b4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5a:	f7ff faa5 	bl	8000fa8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001a5e:	f7ff f9dd 	bl	8000e1c <MX_FSMC_Init>
  MX_RTC_Init();
 8001a62:	f000 f923 	bl	8001cac <MX_RTC_Init>
  MX_SPI1_Init();
 8001a66:	f000 f971 	bl	8001d4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a6a:	f000 faad 	bl	8001fc8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001a6e:	f007 fd47 	bl	8009500 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  time.Hours = 22;
//  time.Minutes = 59;
//  time.Seconds = 00;
//  HAL_RTC_SetTime(&rtc, &time , RTC_HOURFORMAT_24);
  LCD_BL_ON();
 8001a72:	2201      	movs	r2, #1
 8001a74:	2102      	movs	r1, #2
 8001a76:	4831      	ldr	r0, [pc, #196]	; (8001b3c <main+0xf0>)
 8001a78:	f000 ff38 	bl	80028ec <HAL_GPIO_WritePin>
   lcdInit();
 8001a7c:	f7ff fb70 	bl	8001160 <_Z7lcdInitv>
   int i = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
   lcdSetOrientation((lcdOrientationTypeDef)i);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fe8f 	bl	80017ac <_Z17lcdSetOrientation21lcdOrientationTypeDef>
   // TpadInit();
   HAL_Delay(100);
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f000 fbb0 	bl	80021f4 <HAL_Delay>
  // HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
   lcdFillRGB(COLOR_BLACK);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fcd7 	bl	8001448 <_Z10lcdFillRGBt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
bool refil = false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  {

//      	if(TpadGetCoordinates(penX, penY)){
//      	}

      if(TP_Touchpad_Pressed() == 1){
 8001a9e:	f7ff f9a7 	bl	8000df0 <_Z19TP_Touchpad_Pressedv>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01b      	beq.n	8001aea <main+0x9e>
	  uint16_t Coordinates[2] ={0};
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
	  refil = true;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
	  TP_Read_Coordinates(Coordinates);
 8001aba:	463b      	mov	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f8c3 	bl	8000c48 <_Z19TP_Read_CoordinatesPt>
      		lcdSetTextFont(&Font16);
 8001ac2:	481f      	ldr	r0, [pc, #124]	; (8001b40 <main+0xf4>)
 8001ac4:	f7ff fe4c 	bl	8001760 <_Z14lcdSetTextFontP6_tFont>
      	      	lcdSetCursor(1 , 1);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fedc 	bl	8001888 <_Z12lcdSetCursortt>
      	      	lcdSetTextColor(COLOR_GREENYELLOW, COLOR_BLACK);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 8001ad6:	f7ff fe53 	bl	8001780 <_Z15lcdSetTextColortt>
      	      	lcdPrintf("PEN: X %5i  Y %5i", Coordinates[0], Coordinates[1]);
 8001ada:	883b      	ldrh	r3, [r7, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <main+0xf8>)
 8001ae4:	f7ff fdae 	bl	8001644 <_Z9lcdPrintfPKcz>
 8001ae8:	e007      	b.n	8001afa <main+0xae>

      } else {
	  if (refil){
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <main+0xae>
	  refil = false;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	  lcdFillRGB(COLOR_BLACK);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fca7 	bl	8001448 <_Z10lcdFillRGBt>
	  }
      }
    unsigned long t = testText();
 8001afa:	f000 f89d 	bl	8001c38 <_Z8testTextv>
 8001afe:	6078      	str	r0, [r7, #4]
    lcdSetTextFont(&Font16);
 8001b00:	480f      	ldr	r0, [pc, #60]	; (8001b40 <main+0xf4>)
 8001b02:	f7ff fe2d 	bl	8001760 <_Z14lcdSetTextFontP6_tFont>
    lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8001b06:	f7ff ff1d 	bl	8001944 <_Z12lcdGetHeightv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	f7ff ff25 	bl	800195c <_Z14lcdGetTextFontv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	88db      	ldrh	r3, [r3, #6]
 8001b16:	1ae3      	subs	r3, r4, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4619      	mov	r1, r3
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff feb1 	bl	8001888 <_Z12lcdSetCursortt>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8001b26:	2100      	movs	r1, #0
 8001b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b2c:	f7ff fe28 	bl	8001780 <_Z15lcdSetTextColortt>
    lcdPrintf("Time: %4lu ms", t);
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <main+0xfc>)
 8001b34:	f7ff fd86 	bl	8001644 <_Z9lcdPrintfPKcz>
      		// HAL_Delay(_delay);

//      demoLCD(i);
//    	  i++;
      }
 8001b38:	e7b1      	b.n	8001a9e <main+0x52>
 8001b3a:	bf00      	nop
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	20000008 	.word	0x20000008
 8001b44:	0800a848 	.word	0x0800a848
 8001b48:	0800a85c 	.word	0x0800a85c

08001b4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b094      	sub	sp, #80	; 0x50
 8001b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	2230      	movs	r2, #48	; 0x30
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 f9e4 	bl	8009f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <_Z18SystemClock_Configv+0xe4>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <_Z18SystemClock_Configv+0xe4>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <_Z18SystemClock_Configv+0xe4>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <_Z18SystemClock_Configv+0xe8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <_Z18SystemClock_Configv+0xe8>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <_Z18SystemClock_Configv+0xe8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bc4:	23a8      	movs	r3, #168	; 0xa8
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 f8f3 	bl	8003dc0 <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001bea:	f000 f859 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	230f      	movs	r3, #15
 8001bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fb4f 	bl	80042b0 <HAL_RCC_ClockConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001c22:	f000 f83d 	bl	8001ca0 <Error_Handler>
  }
}
 8001c26:	bf00      	nop
 8001c28:	3750      	adds	r7, #80	; 0x50
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <_Z8testTextv>:
	lcdFillRGB(COLOR_BLACK);
	return t += HAL_GetTick() - start;
}

unsigned long testText()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick();
 8001c3e:	f000 facd 	bl	80021dc <HAL_GetTick>
 8001c42:	6078      	str	r0, [r7, #4]
	//lcdFillRGB(COLOR_BLACK);
	HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
 8001c44:	2200      	movs	r2, #0
 8001c46:	4912      	ldr	r1, [pc, #72]	; (8001c90 <_Z8testTextv+0x58>)
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <_Z8testTextv+0x5c>)
 8001c4a:	f002 feb6 	bl	80049ba <HAL_RTC_GetTime>
	lcdSetCursor(50, 60);
 8001c4e:	213c      	movs	r1, #60	; 0x3c
 8001c50:	2032      	movs	r0, #50	; 0x32
 8001c52:	f7ff fe19 	bl	8001888 <_Z12lcdSetCursortt>
//	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
//	lcdSetTextFont(&Font16);
//	lcdPrintf("Hello World!\r\n\n\n");
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8001c56:	2100      	movs	r1, #0
 8001c58:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001c5c:	f7ff fd90 	bl	8001780 <_Z15lcdSetTextColortt>
	lcdSetTextFont(&Font24);
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <_Z8testTextv+0x60>)
 8001c62:	f7ff fd7d 	bl	8001760 <_Z14lcdSetTextFontP6_tFont>
	lcdPrintf("%02i : %02i : %02i ", time.Hours, time.Minutes, time.Seconds);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <_Z8testTextv+0x58>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_Z8testTextv+0x58>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_Z8testTextv+0x58>)
 8001c74:	789b      	ldrb	r3, [r3, #2]
 8001c76:	4809      	ldr	r0, [pc, #36]	; (8001c9c <_Z8testTextv+0x64>)
 8001c78:	f7ff fce4 	bl	8001644 <_Z9lcdPrintfPKcz>
//	lcdPrintf("O, HO, HO! \r\n");
//	lcdPrintf("Furry cat coming\r\n");
//	lcdPrintf("Miauuuu!\r\n");
//	lcdPrintf("MUUUURRRRR,\r\n");
//	lcdPrintf("murrr\r\n");
	return HAL_GetTick() - start;
 8001c7c:	f000 faae 	bl	80021dc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002f4 	.word	0x200002f4
 8001c94:	20000308 	.word	0x20000308
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	0800a888 	.word	0x0800a888

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <MX_RTC_Init+0x48>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cbe:	227f      	movs	r2, #127	; 0x7f
 8001cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_RTC_Init+0x44>)
 8001cdc:	f002 fdea 	bl	80048b4 <HAL_RTC_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ce6:	f7ff ffdb 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000308 	.word	0x20000308
 8001cf4:	40002800 	.word	0x40002800

08001cf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_RTC_MspInit+0x4c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fce2 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d32:	f7ff ffb5 	bl	8001ca0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_RTC_MspInit+0x50>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40002800 	.word	0x40002800
 8001d48:	42470e3c 	.word	0x42470e3c

08001d4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <MX_SPI1_Init+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d98:	220a      	movs	r2, #10
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_SPI1_Init+0x64>)
 8001d9e:	f002 ff0b 	bl	8004bb8 <HAL_SPI_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001da8:	f7ff ff7a 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000328 	.word	0x20000328
 8001db4:	40013000 	.word	0x40013000

08001db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_SPI_MspInit+0x94>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d133      	bne.n	8001e42 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_SPI_MspInit+0x98>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e12:	2338      	movs	r3, #56	; 0x38
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_SPI_MspInit+0x9c>)
 8001e2e:	f000 fba9 	bl	8002584 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2023      	movs	r0, #35	; 0x23
 8001e38:	f000 fadb 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e3c:	2023      	movs	r0, #35	; 0x23
 8001e3e:	f000 faf4 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40013000 	.word	0x40013000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef4:	f000 f95e 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <SPI1_IRQHandler+0x10>)
 8001f02:	f002 fee3 	bl	8004ccc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000328 	.word	0x20000328

08001f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <USART1_IRQHandler+0x10>)
 8001f16:	f003 f883 	bl	8005020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000384 	.word	0x20000384

08001f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <OTG_FS_IRQHandler+0x10>)
 8001f2a:	f000 fe3c 	bl	8002ba6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200018b0 	.word	0x200018b0

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f007 ffe6 	bl	8009f38 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20020000 	.word	0x20020000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000380 	.word	0x20000380
 8001fa0:	20002100 	.word	0x20002100

08001fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_USART1_UART_Init+0x50>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8002000:	f002 ffbe 	bl	8004f80 <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800200a:	f7ff fe49 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000384 	.word	0x20000384
 8002018:	40011000 	.word	0x40011000

0800201c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_UART_MspInit+0x94>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d134      	bne.n	80020a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_UART_MspInit+0x98>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_UART_MspInit+0x98>)
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_UART_MspInit+0x98>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_UART_MspInit+0x98>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_UART_MspInit+0x98>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_UART_MspInit+0x98>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002076:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002088:	2307      	movs	r3, #7
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <HAL_UART_MspInit+0x9c>)
 8002094:	f000 fa76 	bl	8002584 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	2025      	movs	r0, #37	; 0x25
 800209e:	f000 f9a8 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a2:	2025      	movs	r0, #37	; 0x25
 80020a4:	f000 f9c1 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c0:	f7ff ff70 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ea:	f007 ff2b 	bl	8009f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff fcad 	bl	8001a4c <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002100:	0800d44c 	.word	0x0800d44c
  ldr r2, =_sbss
 8002104:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002108:	200020fc 	.word	0x200020fc

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f94f 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fe88 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f967 	bl	8002446 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f92f 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000030 	.word	0x20000030
 80021ac:	20000038 	.word	0x20000038
 80021b0:	20000034 	.word	0x20000034

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000038 	.word	0x20000038
 80021d8:	200003cc 	.word	0x200003cc

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200003cc 	.word	0x200003cc

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000038 	.word	0x20000038

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff feb6 	bl	80021dc <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e052      	b.n	8002536 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0216 	bic.w	r2, r2, #22
 800249e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <HAL_DMA_Abort+0x62>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0208 	bic.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e0:	e013      	b.n	800250a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e2:	f7ff fe7b 	bl	80021dc <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d90c      	bls.n	800250a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2203      	movs	r2, #3
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e015      	b.n	8002536 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e4      	bne.n	80024e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	223f      	movs	r2, #63	; 0x3f
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e00c      	b.n	8002576 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2205      	movs	r2, #5
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e16b      	b.n	8002878 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 815a 	bne.w	8002872 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d005      	beq.n	80025d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d130      	bne.n	8002638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0201 	and.w	r2, r3, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d017      	beq.n	8002674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80b4 	beq.w	8002872 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b60      	ldr	r3, [pc, #384]	; (8002890 <HAL_GPIO_Init+0x30c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_GPIO_Init+0x30c>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <HAL_GPIO_Init+0x30c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_GPIO_Init+0x310>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_GPIO_Init+0x314>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <HAL_GPIO_Init+0x318>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_GPIO_Init+0x31c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4f      	ldr	r2, [pc, #316]	; (80028a4 <HAL_GPIO_Init+0x320>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x21a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4e      	ldr	r2, [pc, #312]	; (80028a8 <HAL_GPIO_Init+0x324>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x216>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4d      	ldr	r2, [pc, #308]	; (80028ac <HAL_GPIO_Init+0x328>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x212>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_GPIO_Init+0x32c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_GPIO_Init+0x330>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x20a>
 800278a:	2307      	movs	r3, #7
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800278e:	2308      	movs	r3, #8
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x228>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x228>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027aa:	2300      	movs	r3, #0
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027bc:	4935      	ldr	r1, [pc, #212]	; (8002894 <HAL_GPIO_Init+0x310>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_GPIO_Init+0x334>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ee:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <HAL_GPIO_Init+0x334>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_GPIO_Init+0x334>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_GPIO_Init+0x334>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_GPIO_Init+0x334>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_GPIO_Init+0x334>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_GPIO_Init+0x334>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_GPIO_Init+0x334>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	f67f ae90 	bls.w	80025a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40013800 	.word	0x40013800
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40021400 	.word	0x40021400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40021c00 	.word	0x40021c00
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e001      	b.n	80028de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af02      	add	r7, sp, #8
 8002924:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e101      	b.n	8002b34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f006 ffb8 	bl	80098c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295e:	d102      	bne.n	8002966 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fc15 	bl	800619a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7c1a      	ldrb	r2, [r3, #16]
 8002978:	f88d 2000 	strb.w	r2, [sp]
 800297c:	3304      	adds	r3, #4
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	f003 faf4 	bl	8005f6c <USB_CoreInit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0ce      	b.n	8002b34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fc0d 	bl	80061bc <USB_SetCurrentMode>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0bf      	b.n	8002b34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e04a      	b.n	8002a50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3315      	adds	r3, #21
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3314      	adds	r3, #20
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	b298      	uxth	r0, r3
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	332e      	adds	r3, #46	; 0x2e
 80029f6:	4602      	mov	r2, r0
 80029f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3318      	adds	r3, #24
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	331c      	adds	r3, #28
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3320      	adds	r3, #32
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3324      	adds	r3, #36	; 0x24
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3af      	bcc.n	80029ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e044      	b.n	8002aea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3b5      	bcc.n	8002a60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7c1a      	ldrb	r2, [r3, #16]
 8002afc:	f88d 2000 	strb.w	r2, [sp]
 8002b00:	3304      	adds	r3, #4
 8002b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b04:	f003 fba6 	bl	8006254 <USB_DevInit>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00c      	b.n	8002b34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 fbea 	bl	8007306 <USB_DevDisconnect>

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_PCD_Start+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e022      	b.n	8002b9e <HAL_PCD_Start+0x62>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 faf7 	bl	8006178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fb98 	bl	80072c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ba6:	b590      	push	{r4, r7, lr}
 8002ba8:	b08d      	sub	sp, #52	; 0x34
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fc56 	bl	800746e <USB_GetMode>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 848c 	bne.w	80034e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fbba 	bl	8007348 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8482 	beq.w	80034e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 fba7 	bl	8007348 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d107      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f002 0202 	and.w	r2, r2, #2
 8002c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f004 fb95 	bl	8007348 <USB_ReadInterrupts>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d161      	bne.n	8002cec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0210 	bic.w	r2, r2, #16
 8002c36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	0c5b      	lsrs	r3, r3, #17
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d124      	bne.n	8002cae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d035      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6a38      	ldr	r0, [r7, #32]
 8002c84:	f004 f9cc 	bl	8007020 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c94:	441a      	add	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca6:	441a      	add	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	615a      	str	r2, [r3, #20]
 8002cac:	e016      	b.n	8002cdc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	0c5b      	lsrs	r3, r3, #17
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d110      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6a38      	ldr	r0, [r7, #32]
 8002cc6:	f004 f9ab 	bl	8007020 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd6:	441a      	add	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0210 	orr.w	r2, r2, #16
 8002cea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 fb29 	bl	8007348 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d00:	f040 80a7 	bne.w	8002e52 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fb2e 	bl	800736e <USB_ReadDevAllOutEpInterrupt>
 8002d12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d14:	e099      	b.n	8002e4a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 808e 	beq.w	8002e3e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f004 fb52 	bl	80073d6 <USB_ReadDevOutEPInterrupt>
 8002d32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fea2 	bl	8003a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2308      	movs	r3, #8
 8002d72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 ff78 	bl	8003c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d92:	461a      	mov	r2, r3
 8002d94:	2310      	movs	r3, #16
 8002d96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d030      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d109      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	78db      	ldrb	r3, [r3, #3]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2200      	movs	r2, #0
 8002de4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f006 fe6d 	bl	8009acc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2302      	movs	r3, #2
 8002e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	3301      	adds	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f af62 	bne.w	8002d16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fa76 	bl	8007348 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e66:	f040 80db 	bne.w	8003020 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fa97 	bl	80073a2 <USB_ReadDevAllInEpInterrupt>
 8002e74:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e7a:	e0cd      	b.n	8003018 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80c2 	beq.w	800300c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fabd 	bl	8007412 <USB_ReadDevInEPInterrupt>
 8002e98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d057      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	2201      	movs	r2, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69f9      	ldr	r1, [r7, #28]
 8002ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d132      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3320      	adds	r3, #32
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4403      	add	r3, r0
 8002f02:	331c      	adds	r3, #28
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4419      	add	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4403      	add	r3, r0
 8002f16:	3320      	adds	r3, #32
 8002f18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d113      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x3a2>
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f40:	461a      	mov	r2, r3
 8002f42:	2101      	movs	r1, #1
 8002f44:	f004 fac4 	bl	80074d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f006 fd37 	bl	80099c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	2310      	movs	r3, #16
 8002f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2340      	movs	r3, #64	; 0x40
 8002fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb4:	6a38      	ldr	r0, [r7, #32]
 8002fb6:	f003 fab1 	bl	800651c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f006 fd84 	bl	8009af0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fcbb 	bl	8003982 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	3301      	adds	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f af2e 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f004 f98f 	bl	8007348 <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003034:	d122      	bne.n	800307c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003050:	2b01      	cmp	r3, #1
 8003052:	d108      	bne.n	8003066 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800305c:	2100      	movs	r1, #0
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fea2 	bl	8003da8 <HAL_PCDEx_LPM_Callback>
 8003064:	e002      	b.n	800306c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f006 fd22 	bl	8009ab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800307a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 f961 	bl	8007348 <USB_ReadInterrupts>
 8003086:	4603      	mov	r3, r0
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003090:	d112      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f006 fcde 	bl	8009a64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 f943 	bl	8007348 <USB_ReadInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	f040 80b7 	bne.w	800323e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2110      	movs	r1, #16
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fa16 	bl	800651c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f4:	e046      	b.n	8003184 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003108:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	440a      	add	r2, r1
 8003120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003128:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800313c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	440a      	add	r2, r1
 8003154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003158:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800315c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316e:	0151      	lsls	r1, r2, #5
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	440a      	add	r2, r1
 8003174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800317c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	3301      	adds	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	461a      	mov	r2, r3
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	4293      	cmp	r3, r2
 800318e:	d3b2      	bcc.n	80030f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7bdb      	ldrb	r3, [r3, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031bc:	f043 030b 	orr.w	r3, r3, #11
 80031c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f043 030b 	orr.w	r3, r3, #11
 80031d6:	6453      	str	r3, [r2, #68]	; 0x44
 80031d8:	e015      	b.n	8003206 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003200:	f043 030b 	orr.w	r3, r3, #11
 8003204:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003214:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003218:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003228:	461a      	mov	r2, r3
 800322a:	f004 f951 	bl	80074d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800323c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 f880 	bl	8007348 <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	d123      	bne.n	800329c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f004 f916 	bl	800748a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 f9d3 	bl	800660e <USB_GetDevSpeed>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681c      	ldr	r4, [r3, #0]
 8003274:	f001 fa08 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 8003278:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800327e:	461a      	mov	r2, r3
 8003280:	4620      	mov	r0, r4
 8003282:	f002 fed7 	bl	8006034 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f006 fbc3 	bl	8009a12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800329a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 f851 	bl	8007348 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d10a      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f006 fba0 	bl	80099f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f002 0208 	and.w	r2, r2, #8
 80032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 f83c 	bl	8007348 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d123      	bne.n	8003322 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e6:	2301      	movs	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e014      	b.n	8003316 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	f203 2357 	addw	r3, r3, #599	; 0x257
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fb08 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	3301      	adds	r3, #1
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	791b      	ldrb	r3, [r3, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	4293      	cmp	r3, r2
 8003320:	d3e4      	bcc.n	80032ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 f80e 	bl	8007348 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003336:	d13c      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003338:	2301      	movs	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e02b      	b.n	8003396 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3318      	adds	r3, #24
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d115      	bne.n	8003390 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003364:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	da12      	bge.n	8003390 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3317      	adds	r3, #23
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fac8 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	3301      	adds	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	4293      	cmp	r3, r2
 80033a0:	d3cd      	bcc.n	800333e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 ffc6 	bl	8007348 <USB_ReadInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c6:	d156      	bne.n	8003476 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	e045      	b.n	800345a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d12e      	bne.n	8003454 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da2b      	bge.n	8003454 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003408:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800340c:	429a      	cmp	r2, r3
 800340e:	d121      	bne.n	8003454 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003450:	6053      	str	r3, [r2, #4]
            break;
 8003452:	e008      	b.n	8003466 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	3301      	adds	r3, #1
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	791b      	ldrb	r3, [r3, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	4293      	cmp	r3, r2
 8003464:	d3b3      	bcc.n	80033ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f003 ff64 	bl	8007348 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d10a      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f006 fb41 	bl	8009b14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 ff4e 	bl	8007348 <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d115      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f006 fb31 	bl	8009b30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	e000      	b.n	80034e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80034e0:	bf00      	nop
    }
  }
}
 80034e2:	3734      	adds	r7, #52	; 0x34
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}

080034e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_PCD_SetAddress+0x1a>
 80034fe:	2302      	movs	r3, #2
 8003500:	e012      	b.n	8003528 <HAL_PCD_SetAddress+0x40>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f003 fead 	bl	8007278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	70fb      	strb	r3, [r7, #3]
 8003542:	460b      	mov	r3, r1
 8003544:	803b      	strh	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800354e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0f      	bge.n	8003576 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3310      	adds	r3, #16
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	705a      	strb	r2, [r3, #1]
 8003574:	e00f      	b.n	8003596 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035a2:	883a      	ldrh	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	78ba      	ldrb	r2, [r7, #2]
 80035ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035c0:	78bb      	ldrb	r3, [r7, #2]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d102      	bne.n	80035cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_PCD_EP_Open+0xaa>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_Open+0xc8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 f835 	bl	8006658 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80035f6:	7afb      	ldrb	r3, [r7, #11]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	da0f      	bge.n	8003634 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	3310      	adds	r3, #16
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	705a      	strb	r2, [r3, #1]
 8003632:	e00f      	b.n	8003654 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 020f 	and.w	r2, r3, #15
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_EP_Close+0x6e>
 800366a:	2302      	movs	r3, #2
 800366c:	e00e      	b.n	800368c <HAL_PCD_EP_Close+0x8c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 f873 	bl	8006768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	460b      	mov	r3, r1
 80036a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	7afb      	ldrb	r3, [r7, #11]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	799b      	ldrb	r3, [r3, #6]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	799b      	ldrb	r3, [r3, #6]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	f003 f910 	bl	8006920 <USB_EPStartXfer>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800372c:	681b      	ldr	r3, [r3, #0]
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	460b      	mov	r3, r1
 8003748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374a:	7afb      	ldrb	r3, [r7, #11]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	3310      	adds	r3, #16
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2201      	movs	r2, #1
 8003778:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	799b      	ldrb	r3, [r3, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	799b      	ldrb	r3, [r3, #6]
 800379c:	461a      	mov	r2, r3
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	f003 f8be 	bl	8006920 <USB_EPStartXfer>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	7912      	ldrb	r2, [r2, #4]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04f      	b.n	800386c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0f      	bge.n	80037f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3310      	adds	r3, #16
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00d      	b.n	8003810 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_SetStall+0x82>
 800382c:	2302      	movs	r3, #2
 800382e:	e01d      	b.n	800386c <HAL_PCD_EP_SetStall+0xbe>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f003 fc46 	bl	80070d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7999      	ldrb	r1, [r3, #6]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800385c:	461a      	mov	r2, r3
 800385e:	f003 fe37 	bl	80074d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	7912      	ldrb	r2, [r2, #4]
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e042      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da0f      	bge.n	80038ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3310      	adds	r3, #16
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	705a      	strb	r2, [r3, #1]
 80038b8:	e00f      	b.n	80038da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_EP_ClrStall+0x86>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e00e      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f003 fc4f 	bl	80071ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800392c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da0c      	bge.n	800394e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3310      	adds	r3, #16
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00c      	b.n	8003968 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fa6e 	bl	8006e50 <USB_EPStopXfer>
 8003974:	4603      	mov	r3, r0
 8003976:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003978:	7afb      	ldrb	r3, [r7, #11]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	; 0x28
 8003986:	af02      	add	r7, sp, #8
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3310      	adds	r3, #16
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d901      	bls.n	80039ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06b      	b.n	8003a92 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3303      	adds	r3, #3
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039de:	e02a      	b.n	8003a36 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d902      	bls.n	80039fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3303      	adds	r3, #3
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68d9      	ldr	r1, [r3, #12]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f003 fac3 	bl	8006fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	441a      	add	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d809      	bhi.n	8003a60 <PCD_WriteEmptyTxFifo+0xde>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d203      	bcs.n	8003a60 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1bf      	bne.n	80039e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d811      	bhi.n	8003a90 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	2201      	movs	r2, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	333c      	adds	r3, #60	; 0x3c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d17b      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a61      	ldr	r2, [pc, #388]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f240 80b9 	bls.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80b3 	beq.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e0a7      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2320      	movs	r3, #32
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e098      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d90f      	bls.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e07e      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f003 fc92 	bl	80074d0 <USB_EP0_OutStart>
 8003bac:	e006      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f005 fee2 	bl	800998c <HAL_PCD_DataOutStageCallback>
 8003bc8:	e046      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d124      	bne.n	8003c1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e032      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f005 feb9 	bl	800998c <HAL_PCD_DataOutStageCallback>
 8003c1a:	e01d      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d114      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c44:	461a      	mov	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f003 fc42 	bl	80074d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f005 fe9a 	bl	800998c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a
 8003c68:	4f54310a 	.word	0x4f54310a

08003c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	333c      	adds	r3, #60	; 0x3c
 8003c84:	3304      	adds	r3, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90e      	bls.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f005 fe51 	bl	8009968 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90c      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	799b      	ldrb	r3, [r3, #6]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f003 fbf4 	bl	80074d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4f54300a 	.word	0x4f54300a

08003cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	0419      	lsls	r1, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
 8003d24:	e028      	b.n	8003d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e00d      	b.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	3340      	adds	r3, #64	; 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3ec      	bcc.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	0418      	lsls	r0, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	3340      	adds	r3, #64	; 0x40
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e267      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b7e      	ldr	r3, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e242      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6f      	ldr	r2, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a68      	ldr	r2, [pc, #416]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe f9b0 	bl	80021dc <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe f9ac 	bl	80021dc <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e207      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f99c 	bl	80021dc <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe f998 	bl	80021dc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f3      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c7      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4937      	ldr	r1, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fe f951 	bl	80021dc <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fe f94d 	bl	80021dc <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a8      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4925      	ldr	r1, [pc, #148]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe f930 	bl	80021dc <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fe f92c 	bl	80021dc <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e187      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fe f910 	bl	80021dc <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fe f90c 	bl	80021dc <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e167      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe f8f9 	bl	80021dc <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00e      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fe f8f5 	bl	80021dc <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d907      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e150      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ea      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8097 	beq.w	8004154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b7d      	ldr	r3, [pc, #500]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a7c      	ldr	r2, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b77      	ldr	r3, [pc, #476]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b74      	ldr	r3, [pc, #464]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fe f8b5 	bl	80021dc <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fe f8b1 	bl	80021dc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e10c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x2ea>
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a63      	ldr	r2, [pc, #396]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x30c>
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a5e      	ldr	r2, [pc, #376]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a5b      	ldr	r2, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040cc:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a57      	ldr	r2, [pc, #348]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b55      	ldr	r3, [pc, #340]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a54      	ldr	r2, [pc, #336]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fe f876 	bl	80021dc <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe f872 	bl	80021dc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b49      	ldr	r3, [pc, #292]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x334>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fe f860 	bl	80021dc <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fe f85c 	bl	80021dc <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b5      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ee      	bne.n	8004120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a1 	beq.w	80042a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d05c      	beq.n	8004224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d141      	bne.n	80041f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe f830 	bl	80021dc <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe f82c 	bl	80021dc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e087      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	491b      	ldr	r1, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fe f805 	bl	80021dc <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fe f801 	bl	80021dc <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e05c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x416>
 80041f4:	e054      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd ffee 	bl	80021dc <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004204:	f7fd ffea 	bl	80021dc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e045      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
 8004222:	e03d      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
 8004238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d028      	beq.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d121      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd ff1c 	bl	80021dc <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd ff18 	bl	80021dc <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fe7c 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800d3f0 	.word	0x0800d3f0
 8004474:	20000030 	.word	0x20000030
 8004478:	20000034 	.word	0x20000034

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b094      	sub	sp, #80	; 0x50
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	647b      	str	r3, [r7, #68]	; 0x44
 8004488:	2300      	movs	r3, #0
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	2300      	movs	r3, #0
 800448e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b79      	ldr	r3, [pc, #484]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80e1 	bhi.w	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0db      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b73      	ldr	r3, [pc, #460]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 80044b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044b4:	e0db      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_GetSysClockFreq+0x208>)
 80044b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ba:	e0d8      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b6d      	ldr	r3, [pc, #436]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
 80044dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4621      	mov	r1, r4
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	6139      	str	r1, [r7, #16]
 800450c:	4629      	mov	r1, r5
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	ebb2 0801 	subs.w	r8, r2, r1
 8004534:	4659      	mov	r1, fp
 8004536:	eb63 0901 	sbc.w	r9, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454e:	4690      	mov	r8, r2
 8004550:	4699      	mov	r9, r3
 8004552:	4623      	mov	r3, r4
 8004554:	eb18 0303 	adds.w	r3, r8, r3
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	462b      	mov	r3, r5
 800455c:	eb49 0303 	adc.w	r3, r9, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800456e:	4629      	mov	r1, r5
 8004570:	024b      	lsls	r3, r1, #9
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004578:	4621      	mov	r1, r4
 800457a:	024a      	lsls	r2, r1, #9
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004582:	2200      	movs	r2, #0
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800458c:	f7fc f976 	bl	800087c <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004598:	e058      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	4611      	mov	r1, r2
 80045a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c6:	0150      	lsls	r0, r2, #5
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4641      	mov	r1, r8
 80045ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ec:	ebb2 040a 	subs.w	r4, r2, sl
 80045f0:	eb63 050b 	sbc.w	r5, r3, fp
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	464b      	mov	r3, r9
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004622:	4629      	mov	r1, r5
 8004624:	028b      	lsls	r3, r1, #10
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800462c:	4621      	mov	r1, r4
 800462e:	028a      	lsls	r2, r1, #10
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2200      	movs	r2, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	61fa      	str	r2, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	f7fc f91c 	bl	800087c <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800465c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004670:	4618      	mov	r0, r3
 8004672:	3750      	adds	r7, #80	; 0x50
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	00f42400 	.word	0x00f42400
 8004684:	007a1200 	.word	0x007a1200

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000030 	.word	0x20000030

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800d400 	.word	0x0800d400

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffdc 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0b5b      	lsrs	r3, r3, #13
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800d400 	.word	0x0800d400

080046f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004714:	2b00      	cmp	r3, #0
 8004716:	d035      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004718:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fd fd5d 	bl	80021dc <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004726:	f7fd fd59 	bl	80021dc <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0b0      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004738:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	019a      	lsls	r2, r3, #6
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	071b      	lsls	r3, r3, #28
 8004750:	4955      	ldr	r1, [pc, #340]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004758:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800475e:	f7fd fd3d 	bl	80021dc <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004766:	f7fd fd39 	bl	80021dc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e090      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004778:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8083 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b44      	ldr	r3, [pc, #272]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a43      	ldr	r2, [pc, #268]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3e      	ldr	r2, [pc, #248]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ba:	f7fd fd0f 	bl	80021dc <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7fd fd0b 	bl	80021dc <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e062      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047e0:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02f      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d028      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004806:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800480e:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004814:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d114      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004826:	f7fd fcd9 	bl	80021dc <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fd fcd5 	bl	80021dc <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e02a      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800486e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004872:	490d      	ldr	r1, [pc, #52]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004880:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	4905      	ldr	r1, [pc, #20]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	42470068 	.word	0x42470068
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40007000 	.word	0x40007000
 80048b0:	42470e40 	.word	0x42470e40

080048b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e073      	b.n	80049b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7f5b      	ldrb	r3, [r3, #29]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fa0c 	bl	8001cf8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d055      	beq.n	80049a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	22ca      	movs	r2, #202	; 0xca
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2253      	movs	r2, #83	; 0x53
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8dd 	bl	8004ac4 <RTC_EnterInitMode>
 800490a:	4603      	mov	r3, r0
 800490c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d12c      	bne.n	800496e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004926:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6899      	ldr	r1, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6919      	ldr	r1, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	041a      	lsls	r2, r3, #16
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8e4 	bl	8004b32 <RTC_ExitInitMode>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	22ff      	movs	r2, #255	; 0xff
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
 800499e:	e001      	b.n	80049a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	0d9b      	lsrs	r3, r3, #22
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11a      	bne.n	8004a6c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f89e 	bl	8004b7c <RTC_Bcd2ToByte>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f895 	bl	8004b7c <RTC_Bcd2ToByte>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f88c 	bl	8004b7c <RTC_Bcd2ToByte>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <HAL_RTC_WaitForSynchro+0x48>)
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a8c:	f7fd fba6 	bl	80021dc <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a92:	e009      	b.n	8004aa8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a94:	f7fd fba2 	bl	80021dc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e007      	b.n	8004ab8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ee      	beq.n	8004a94 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00017f5f 	.word	0x00017f5f

08004ac4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d122      	bne.n	8004b28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fd fb73 	bl	80021dc <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004af8:	e00c      	b.n	8004b14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004afa:	f7fd fb6f 	bl	80021dc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	d904      	bls.n	8004b14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <RTC_EnterInitMode+0x64>
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d1e8      	bne.n	8004afa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff8b 	bl	8004a78 <HAL_RTC_WaitForSynchro>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	b2db      	uxtb	r3, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07b      	b.n	8004cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d009      	beq.n	8004bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd f8d4 	bl	8001db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0104 	and.w	r1, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0210 	and.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
    return;
 8004d0a:	e0ce      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_SPI_IRQHandler+0x5e>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
    return;
 8004d28:	e0bf      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <HAL_SPI_IRQHandler+0x7e>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80b0 	beq.w	8004eaa <HAL_SPI_IRQHandler+0x1de>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80aa 	beq.w	8004eaa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d011      	beq.n	8004d90 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	f043 0204 	orr.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e00b      	b.n	8004da8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]
        return;
 8004da6:	e080      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d014      	beq.n	8004ddc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f043 0208 	orr.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d04f      	beq.n	8004ea8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <HAL_SPI_IRQHandler+0x168>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d034      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0203 	bic.w	r2, r2, #3
 8004e42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_SPI_IRQHandler+0x1e4>)
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd fb70 	bl	800253e <HAL_DMA_Abort_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d016      	beq.n	8004ea6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <HAL_SPI_IRQHandler+0x1e4>)
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd fb5a 	bl	800253e <HAL_DMA_Abort_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e9c:	e003      	b.n	8004ea6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f808 	bl	8004eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ea4:	e000      	b.n	8004ea8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004ea6:	bf00      	nop
    return;
 8004ea8:	bf00      	nop
  }
}
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08004ec9 	.word	0x08004ec9

08004eb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ffe6 	bl	8004eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e038      	b.n	8004f78 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7fc f83a 	bl	8000f94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3308      	adds	r3, #8
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 ff46 	bl	8005dbc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	f000 ffa8 	bl	8005e90 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6858      	ldr	r0, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	f000 ffd5 	bl	8005efc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	6892      	ldr	r2, [r2, #8]
 8004f66:	f041 0101 	orr.w	r1, r1, #1
 8004f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e042      	b.n	8005018 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fd f838 	bl	800201c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	; 0x24
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fc85 	bl	80058d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b0ba      	sub	sp, #232	; 0xe8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800505e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_UART_IRQHandler+0x66>
 8005072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fb69 	bl	8005756 <UART_Receive_IT>
      return;
 8005084:	e25b      	b.n	800553e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80de 	beq.w	800524c <HAL_UART_IRQHandler+0x22c>
 8005090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80d1 	beq.w	800524c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_UART_IRQHandler+0xae>
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0xd2>
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f043 0202 	orr.w	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_UART_IRQHandler+0xf6>
 80050fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	f043 0204 	orr.w	r2, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <HAL_UART_IRQHandler+0x126>
 8005122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f043 0208 	orr.w	r2, r3, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 81f2 	beq.w	8005534 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x14e>
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 faf4 	bl	8005756 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <HAL_UART_IRQHandler+0x17a>
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04f      	beq.n	800523a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9fc 	bl	8005598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d141      	bne.n	8005232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1d9      	bne.n	80051ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d013      	beq.n	800522a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	4a7e      	ldr	r2, [pc, #504]	; (8005400 <HAL_UART_IRQHandler+0x3e0>)
 8005208:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd f995 	bl	800253e <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e00e      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f99e 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00a      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f99a 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e006      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f996 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005246:	e175      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	bf00      	nop
    return;
 800524a:	e173      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 814f 	bne.w	80054f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8148 	beq.w	80054f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8141 	beq.w	80054f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	f040 80b6 	bne.w	8005404 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8145 	beq.w	8005538 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f080 813e 	bcs.w	8005538 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	f000 8088 	beq.w	80053e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800530a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1d9      	bne.n	80052d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800532e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800534a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e1      	bne.n	800531e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800536a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800537e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800538c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e3      	bne.n	800535a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b2:	f023 0310 	bic.w	r3, r3, #16
 80053b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80053c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e3      	bne.n	80053a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd f83e 	bl	800245e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8c1 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053fe:	e09b      	b.n	8005538 <HAL_UART_IRQHandler+0x518>
 8005400:	0800565f 	.word	0x0800565f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540c:	b29b      	uxth	r3, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808e 	beq.w	800553c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8089 	beq.w	800553c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800544e:	647a      	str	r2, [r7, #68]	; 0x44
 8005450:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800545c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e3      	bne.n	800542a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	623b      	str	r3, [r7, #32]
   return(result);
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005486:	633a      	str	r2, [r7, #48]	; 0x30
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e3      	bne.n	8005462 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054cc:	61fa      	str	r2, [r7, #28]
 80054ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	617b      	str	r3, [r7, #20]
   return(result);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e3      	bne.n	80054a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f847 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f2:	e023      	b.n	800553c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_UART_IRQHandler+0x4f4>
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8ba 	bl	8005686 <UART_Transmit_IT>
    return;
 8005512:	e014      	b.n	800553e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <HAL_UART_IRQHandler+0x51e>
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8fa 	bl	8005726 <UART_EndTransmit_IT>
    return;
 8005532:	e004      	b.n	800553e <HAL_UART_IRQHandler+0x51e>
    return;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <HAL_UART_IRQHandler+0x51e>
      return;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_UART_IRQHandler+0x51e>
      return;
 800553c:	bf00      	nop
  }
}
 800553e:	37e8      	adds	r7, #232	; 0xe8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b095      	sub	sp, #84	; 0x54
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055c0:	643a      	str	r2, [r7, #64]	; 0x40
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b01      	cmp	r3, #1
 800560e:	d119      	bne.n	8005644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005630:	61ba      	str	r2, [r7, #24]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005652:	bf00      	nop
 8005654:	3754      	adds	r7, #84	; 0x54
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ff77 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b21      	cmp	r3, #33	; 0x21
 8005698:	d13e      	bne.n	8005718 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	d114      	bne.n	80056ce <UART_Transmit_IT+0x48>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d110      	bne.n	80056ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	1c9a      	adds	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]
 80056cc:	e008      	b.n	80056e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	1c59      	adds	r1, r3, #1
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6211      	str	r1, [r2, #32]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4619      	mov	r1, r3
 80056ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005702:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005712:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e000      	b.n	800571a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fefc 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b08c      	sub	sp, #48	; 0x30
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b22      	cmp	r3, #34	; 0x22
 8005768:	f040 80ae 	bne.w	80058c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d117      	bne.n	80057a6 <UART_Receive_IT+0x50>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d113      	bne.n	80057a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005794:	b29a      	uxth	r2, r3
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
 80057a4:	e026      	b.n	80057f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b8:	d007      	beq.n	80057ca <UART_Receive_IT+0x74>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <UART_Receive_IT+0x82>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e008      	b.n	80057ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4619      	mov	r1, r3
 8005802:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005804:	2b00      	cmp	r3, #0
 8005806:	d15d      	bne.n	80058c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0220 	bic.w	r2, r2, #32
 8005816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	2b01      	cmp	r3, #1
 800584c:	d135      	bne.n	80058ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	613b      	str	r3, [r7, #16]
   return(result);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005874:	623a      	str	r2, [r7, #32]
 8005876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	69f9      	ldr	r1, [r7, #28]
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	61bb      	str	r3, [r7, #24]
   return(result);
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d10a      	bne.n	80058ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fe64 	bl	8005580 <HAL_UARTEx_RxEventCallback>
 80058b8:	e002      	b.n	80058c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fe4c 	bl	8005558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e002      	b.n	80058ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b0c0      	sub	sp, #256	; 0x100
 80058da:	af00      	add	r7, sp, #0
 80058dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	68d9      	ldr	r1, [r3, #12]
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	ea40 0301 	orr.w	r3, r0, r1
 80058fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	431a      	orrs	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	431a      	orrs	r2, r3
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800592c:	f021 010c 	bic.w	r1, r1, #12
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800593a:	430b      	orrs	r3, r1
 800593c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594e:	6999      	ldr	r1, [r3, #24]
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	ea40 0301 	orr.w	r3, r0, r1
 800595a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b8f      	ldr	r3, [pc, #572]	; (8005ba0 <UART_SetConfig+0x2cc>)
 8005964:	429a      	cmp	r2, r3
 8005966:	d005      	beq.n	8005974 <UART_SetConfig+0xa0>
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <UART_SetConfig+0x2d0>)
 8005970:	429a      	cmp	r2, r3
 8005972:	d104      	bne.n	800597e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7fe fea8 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8005978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800597c:	e003      	b.n	8005986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800597e:	f7fe fe8f 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8005982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005990:	f040 810c 	bne.w	8005bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800599e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	1891      	adds	r1, r2, r2
 80059ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80059ae:	415b      	adcs	r3, r3
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059b6:	4621      	mov	r1, r4
 80059b8:	eb12 0801 	adds.w	r8, r2, r1
 80059bc:	4629      	mov	r1, r5
 80059be:	eb43 0901 	adc.w	r9, r3, r1
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059d6:	4690      	mov	r8, r2
 80059d8:	4699      	mov	r9, r3
 80059da:	4623      	mov	r3, r4
 80059dc:	eb18 0303 	adds.w	r3, r8, r3
 80059e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059e4:	462b      	mov	r3, r5
 80059e6:	eb49 0303 	adc.w	r3, r9, r3
 80059ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a02:	460b      	mov	r3, r1
 8005a04:	18db      	adds	r3, r3, r3
 8005a06:	653b      	str	r3, [r7, #80]	; 0x50
 8005a08:	4613      	mov	r3, r2
 8005a0a:	eb42 0303 	adc.w	r3, r2, r3
 8005a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a18:	f7fa ff30 	bl	800087c <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <UART_SetConfig+0x2d4>)
 8005a22:	fba3 2302 	umull	r2, r3, r3, r2
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	011c      	lsls	r4, r3, #4
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	1891      	adds	r1, r2, r2
 8005a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a44:	415b      	adcs	r3, r3
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a52:	4649      	mov	r1, r9
 8005a54:	eb43 0b01 	adc.w	fp, r3, r1
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a6c:	4692      	mov	sl, r2
 8005a6e:	469b      	mov	fp, r3
 8005a70:	4643      	mov	r3, r8
 8005a72:	eb1a 0303 	adds.w	r3, sl, r3
 8005a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	18db      	adds	r3, r3, r3
 8005a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aae:	f7fa fee5 	bl	800087c <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <UART_SetConfig+0x2d4>)
 8005aba:	fba3 2301 	umull	r2, r3, r3, r1
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	2264      	movs	r2, #100	; 0x64
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	1acb      	subs	r3, r1, r3
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <UART_SetConfig+0x2d4>)
 8005ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005adc:	441c      	add	r4, r3
 8005ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005af0:	4642      	mov	r2, r8
 8005af2:	464b      	mov	r3, r9
 8005af4:	1891      	adds	r1, r2, r2
 8005af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005af8:	415b      	adcs	r3, r3
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b00:	4641      	mov	r1, r8
 8005b02:	1851      	adds	r1, r2, r1
 8005b04:	6339      	str	r1, [r7, #48]	; 0x30
 8005b06:	4649      	mov	r1, r9
 8005b08:	414b      	adcs	r3, r1
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b18:	4659      	mov	r1, fp
 8005b1a:	00cb      	lsls	r3, r1, #3
 8005b1c:	4651      	mov	r1, sl
 8005b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b22:	4651      	mov	r1, sl
 8005b24:	00ca      	lsls	r2, r1, #3
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b34:	464b      	mov	r3, r9
 8005b36:	460a      	mov	r2, r1
 8005b38:	eb42 0303 	adc.w	r3, r2, r3
 8005b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b54:	460b      	mov	r3, r1
 8005b56:	18db      	adds	r3, r3, r3
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b6a:	f7fa fe87 	bl	800087c <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <UART_SetConfig+0x2d4>)
 8005b74:	fba3 1302 	umull	r1, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2164      	movs	r1, #100	; 0x64
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	3332      	adds	r3, #50	; 0x32
 8005b86:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <UART_SetConfig+0x2d4>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 0207 	and.w	r2, r3, #7
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4422      	add	r2, r4
 8005b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b9c:	e106      	b.n	8005dac <UART_SetConfig+0x4d8>
 8005b9e:	bf00      	nop
 8005ba0:	40011000 	.word	0x40011000
 8005ba4:	40011400 	.word	0x40011400
 8005ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	1891      	adds	r1, r2, r2
 8005bc4:	6239      	str	r1, [r7, #32]
 8005bc6:	415b      	adcs	r3, r3
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bce:	4641      	mov	r1, r8
 8005bd0:	1854      	adds	r4, r2, r1
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	eb43 0501 	adc.w	r5, r3, r1
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	00eb      	lsls	r3, r5, #3
 8005be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be6:	00e2      	lsls	r2, r4, #3
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	4643      	mov	r3, r8
 8005bee:	18e3      	adds	r3, r4, r3
 8005bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	eb45 0303 	adc.w	r3, r5, r3
 8005bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	008b      	lsls	r3, r1, #2
 8005c1e:	4621      	mov	r1, r4
 8005c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c24:	4621      	mov	r1, r4
 8005c26:	008a      	lsls	r2, r1, #2
 8005c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c2c:	f7fa fe26 	bl	800087c <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4b60      	ldr	r3, [pc, #384]	; (8005db8 <UART_SetConfig+0x4e4>)
 8005c36:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	011c      	lsls	r4, r3, #4
 8005c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	1891      	adds	r1, r2, r2
 8005c56:	61b9      	str	r1, [r7, #24]
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c60:	4641      	mov	r1, r8
 8005c62:	1851      	adds	r1, r2, r1
 8005c64:	6139      	str	r1, [r7, #16]
 8005c66:	4649      	mov	r1, r9
 8005c68:	414b      	adcs	r3, r1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c78:	4659      	mov	r1, fp
 8005c7a:	00cb      	lsls	r3, r1, #3
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c82:	4651      	mov	r1, sl
 8005c84:	00ca      	lsls	r2, r1, #3
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c94:	464b      	mov	r3, r9
 8005c96:	460a      	mov	r2, r1
 8005c98:	eb42 0303 	adc.w	r3, r2, r3
 8005c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cb8:	4649      	mov	r1, r9
 8005cba:	008b      	lsls	r3, r1, #2
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	008a      	lsls	r2, r1, #2
 8005cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cca:	f7fa fdd7 	bl	800087c <__aeabi_uldivmod>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4b38      	ldr	r3, [pc, #224]	; (8005db8 <UART_SetConfig+0x4e4>)
 8005cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	2264      	movs	r2, #100	; 0x64
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	1acb      	subs	r3, r1, r3
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	3332      	adds	r3, #50	; 0x32
 8005ce8:	4a33      	ldr	r2, [pc, #204]	; (8005db8 <UART_SetConfig+0x4e4>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf4:	441c      	add	r4, r3
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8005cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8005d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	1891      	adds	r1, r2, r2
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	415b      	adcs	r3, r3
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d14:	4641      	mov	r1, r8
 8005d16:	1851      	adds	r1, r2, r1
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	414b      	adcs	r3, r1
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	00cb      	lsls	r3, r1, #3
 8005d30:	4651      	mov	r1, sl
 8005d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d36:	4651      	mov	r1, sl
 8005d38:	00ca      	lsls	r2, r1, #3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4642      	mov	r2, r8
 8005d42:	189b      	adds	r3, r3, r2
 8005d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d46:	464b      	mov	r3, r9
 8005d48:	460a      	mov	r2, r1
 8005d4a:	eb42 0303 	adc.w	r3, r2, r3
 8005d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
 8005d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d68:	4649      	mov	r1, r9
 8005d6a:	008b      	lsls	r3, r1, #2
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d72:	4641      	mov	r1, r8
 8005d74:	008a      	lsls	r2, r1, #2
 8005d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d7a:	f7fa fd7f 	bl	800087c <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <UART_SetConfig+0x4e4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <UART_SetConfig+0x4e4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 020f 	and.w	r2, r3, #15
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4422      	add	r2, r4
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005db2:	46bd      	mov	sp, r7
 8005db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db8:	51eb851f 	.word	0x51eb851f

08005dbc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	f023 0101 	bic.w	r1, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d102      	bne.n	8005dec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005de6:	2340      	movs	r3, #64	; 0x40
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	e001      	b.n	8005df0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005dfc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005e02:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005e08:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005e0e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005e14:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005e1a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005e20:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005e26:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005e2c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005e4a:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <FSMC_NORSRAM_Init+0xd0>)
 8005e4c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e54:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005e5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	ea02 0103 	and.w	r1, r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4319      	orrs	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	0008fb7f 	.word	0x0008fb7f

08005e90 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	051b      	lsls	r3, r3, #20
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	3b02      	subs	r3, #2
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	3201      	adds	r2, #1
 8005ee4:	4319      	orrs	r1, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f10:	d11d      	bne.n	8005f4e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f1a:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	6852      	ldr	r2, [r2, #4]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	4311      	orrs	r1, r2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	6892      	ldr	r2, [r2, #8]
 8005f2e:	0212      	lsls	r2, r2, #8
 8005f30:	4311      	orrs	r1, r2
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	6992      	ldr	r2, [r2, #24]
 8005f36:	4311      	orrs	r1, r2
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	68d2      	ldr	r2, [r2, #12]
 8005f3c:	0412      	lsls	r2, r2, #16
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	ea43 0102 	orr.w	r1, r3, r2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f4c:	e005      	b.n	8005f5a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	cff00000 	.word	0xcff00000

08005f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	f107 001c 	add.w	r0, r7, #28
 8005f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d123      	bne.n	8005fce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fae2 	bl	800758c <USB_CoreReset>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	e01b      	b.n	8006006 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fad6 	bl	800758c <USB_CoreReset>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff8:	e005      	b.n	8006006 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006006:	7fbb      	ldrb	r3, [r7, #30]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10b      	bne.n	8006024 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f043 0206 	orr.w	r2, r3, #6
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006030:	b004      	add	sp, #16
 8006032:	4770      	bx	lr

08006034 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d165      	bne.n	8006114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a41      	ldr	r2, [pc, #260]	; (8006150 <USB_SetTurnaroundTime+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d906      	bls.n	800605e <USB_SetTurnaroundTime+0x2a>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a40      	ldr	r2, [pc, #256]	; (8006154 <USB_SetTurnaroundTime+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d202      	bcs.n	800605e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006058:	230f      	movs	r3, #15
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	e062      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <USB_SetTurnaroundTime+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d306      	bcc.n	8006074 <USB_SetTurnaroundTime+0x40>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a3b      	ldr	r2, [pc, #236]	; (8006158 <USB_SetTurnaroundTime+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d202      	bcs.n	8006074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800606e:	230e      	movs	r3, #14
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e057      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a38      	ldr	r2, [pc, #224]	; (8006158 <USB_SetTurnaroundTime+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d306      	bcc.n	800608a <USB_SetTurnaroundTime+0x56>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a37      	ldr	r2, [pc, #220]	; (800615c <USB_SetTurnaroundTime+0x128>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d202      	bcs.n	800608a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006084:	230d      	movs	r3, #13
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e04c      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <USB_SetTurnaroundTime+0x128>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d306      	bcc.n	80060a0 <USB_SetTurnaroundTime+0x6c>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4a32      	ldr	r2, [pc, #200]	; (8006160 <USB_SetTurnaroundTime+0x12c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d802      	bhi.n	80060a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800609a:	230c      	movs	r3, #12
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e041      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <USB_SetTurnaroundTime+0x12c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d906      	bls.n	80060b6 <USB_SetTurnaroundTime+0x82>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a2e      	ldr	r2, [pc, #184]	; (8006164 <USB_SetTurnaroundTime+0x130>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d802      	bhi.n	80060b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060b0:	230b      	movs	r3, #11
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e036      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <USB_SetTurnaroundTime+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d906      	bls.n	80060cc <USB_SetTurnaroundTime+0x98>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a29      	ldr	r2, [pc, #164]	; (8006168 <USB_SetTurnaroundTime+0x134>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d802      	bhi.n	80060cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060c6:	230a      	movs	r3, #10
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e02b      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <USB_SetTurnaroundTime+0x134>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d906      	bls.n	80060e2 <USB_SetTurnaroundTime+0xae>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a25      	ldr	r2, [pc, #148]	; (800616c <USB_SetTurnaroundTime+0x138>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d202      	bcs.n	80060e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060dc:	2309      	movs	r3, #9
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e020      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a21      	ldr	r2, [pc, #132]	; (800616c <USB_SetTurnaroundTime+0x138>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d306      	bcc.n	80060f8 <USB_SetTurnaroundTime+0xc4>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <USB_SetTurnaroundTime+0x13c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d802      	bhi.n	80060f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060f2:	2308      	movs	r3, #8
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e015      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <USB_SetTurnaroundTime+0x13c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d906      	bls.n	800610e <USB_SetTurnaroundTime+0xda>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <USB_SetTurnaroundTime+0x140>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d202      	bcs.n	800610e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006108:	2307      	movs	r3, #7
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e00a      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800610e:	2306      	movs	r3, #6
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e007      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800611a:	2309      	movs	r3, #9
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e001      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006120:	2309      	movs	r3, #9
 8006122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	00d8acbf 	.word	0x00d8acbf
 8006154:	00e4e1c0 	.word	0x00e4e1c0
 8006158:	00f42400 	.word	0x00f42400
 800615c:	01067380 	.word	0x01067380
 8006160:	011a499f 	.word	0x011a499f
 8006164:	01312cff 	.word	0x01312cff
 8006168:	014ca43f 	.word	0x014ca43f
 800616c:	016e3600 	.word	0x016e3600
 8006170:	01a6ab1f 	.word	0x01a6ab1f
 8006174:	01e84800 	.word	0x01e84800

08006178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d115      	bne.n	800620a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ea:	200a      	movs	r0, #10
 80061ec:	f7fc f802 	bl	80021f4 <HAL_Delay>
      ms += 10U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	330a      	adds	r3, #10
 80061f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 f939 	bl	800746e <USB_GetMode>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d01e      	beq.n	8006240 <USB_SetCurrentMode+0x84>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2bc7      	cmp	r3, #199	; 0xc7
 8006206:	d9f0      	bls.n	80061ea <USB_SetCurrentMode+0x2e>
 8006208:	e01a      	b.n	8006240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d115      	bne.n	800623c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800621c:	200a      	movs	r0, #10
 800621e:	f7fb ffe9 	bl	80021f4 <HAL_Delay>
      ms += 10U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	330a      	adds	r3, #10
 8006226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f920 	bl	800746e <USB_GetMode>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <USB_SetCurrentMode+0x84>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2bc7      	cmp	r3, #199	; 0xc7
 8006238:	d9f0      	bls.n	800621c <USB_SetCurrentMode+0x60>
 800623a:	e001      	b.n	8006240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e005      	b.n	800624c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2bc8      	cmp	r3, #200	; 0xc8
 8006244:	d101      	bne.n	800624a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006254:	b084      	sub	sp, #16
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e009      	b.n	8006288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	3340      	adds	r3, #64	; 0x40
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3301      	adds	r3, #1
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b0e      	cmp	r3, #14
 800628c:	d9f2      	bls.n	8006274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800628e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11c      	bne.n	80062d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a4:	f043 0302 	orr.w	r3, r3, #2
 80062a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
 80062ce:	e00b      	b.n	80062e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062ee:	461a      	mov	r2, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d10d      	bne.n	8006318 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006304:	2100      	movs	r1, #0
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f968 	bl	80065dc <USB_SetDevSpeed>
 800630c:	e008      	b.n	8006320 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800630e:	2101      	movs	r1, #1
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f963 	bl	80065dc <USB_SetDevSpeed>
 8006316:	e003      	b.n	8006320 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006318:	2103      	movs	r1, #3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f95e 	bl	80065dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006320:	2110      	movs	r1, #16
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8fa 	bl	800651c <USB_FlushTxFifo>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f924 	bl	8006580 <USB_FlushRxFifo>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006348:	461a      	mov	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	461a      	mov	r2, r3
 8006356:	2300      	movs	r3, #0
 8006358:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006360:	461a      	mov	r2, r3
 8006362:	2300      	movs	r3, #0
 8006364:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	e043      	b.n	80063f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006382:	d118      	bne.n	80063b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	461a      	mov	r2, r3
 8006398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e013      	b.n	80063c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	461a      	mov	r2, r3
 80063ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e008      	b.n	80063c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	461a      	mov	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	461a      	mov	r2, r3
 80063e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3301      	adds	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063f8:	461a      	mov	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d3b5      	bcc.n	800636c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	e043      	b.n	800648e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800641c:	d118      	bne.n	8006450 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	461a      	mov	r2, r3
 8006432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e013      	b.n	8006462 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	461a      	mov	r2, r3
 8006448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e008      	b.n	8006462 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	461a      	mov	r2, r3
 800645e:	2300      	movs	r3, #0
 8006460:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	461a      	mov	r2, r3
 8006470:	2300      	movs	r3, #0
 8006472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	461a      	mov	r2, r3
 8006482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3301      	adds	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006492:	461a      	mov	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4293      	cmp	r3, r2
 8006498:	d3b5      	bcc.n	8006406 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f043 0210 	orr.w	r2, r3, #16
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <USB_DevInit+0x2c4>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f043 0208 	orr.w	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d107      	bne.n	8006508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006500:	f043 0304 	orr.w	r3, r3, #4
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006514:	b004      	add	sp, #16
 8006516:	4770      	bx	lr
 8006518:	803c3800 	.word	0x803c3800

0800651c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006536:	d901      	bls.n	800653c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e01b      	b.n	8006574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	daf2      	bge.n	800652a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	019b      	lsls	r3, r3, #6
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006560:	d901      	bls.n	8006566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e006      	b.n	8006574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	d0f0      	beq.n	8006554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006598:	d901      	bls.n	800659e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e018      	b.n	80065d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	daf2      	bge.n	800658c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2210      	movs	r2, #16
 80065ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065bc:	d901      	bls.n	80065c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e006      	b.n	80065d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d0f0      	beq.n	80065b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065fc:	4313      	orrs	r3, r2
 80065fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
 8006632:	e00a      	b.n	800664a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d002      	beq.n	8006640 <USB_GetDevSpeed+0x32>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b06      	cmp	r3, #6
 800663e:	d102      	bne.n	8006646 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006640:	2302      	movs	r3, #2
 8006642:	75fb      	strb	r3, [r7, #23]
 8006644:	e001      	b.n	800664a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006646:	230f      	movs	r3, #15
 8006648:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d13a      	bne.n	80066ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	2101      	movs	r1, #1
 8006686:	fa01 f303 	lsl.w	r3, r1, r3
 800668a:	b29b      	uxth	r3, r3
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006692:	4313      	orrs	r3, r2
 8006694:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d155      	bne.n	8006758 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	791b      	ldrb	r3, [r3, #4]
 80066c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	059b      	lsls	r3, r3, #22
 80066ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066d0:	4313      	orrs	r3, r2
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	e036      	b.n	8006758 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	2101      	movs	r1, #1
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006708:	4313      	orrs	r3, r2
 800670a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11a      	bne.n	8006758 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	791b      	ldrb	r3, [r3, #4]
 800673c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800673e:	430b      	orrs	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006756:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d161      	bne.n	8006848 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679a:	d11f      	bne.n	80067dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	2101      	movs	r1, #1
 80067ee:	fa01 f303 	lsl.w	r3, r1, r3
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	43db      	mvns	r3, r3
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067fc:	4013      	ands	r3, r2
 80067fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	43db      	mvns	r3, r3
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006820:	4013      	ands	r3, r2
 8006822:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	0159      	lsls	r1, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	440b      	add	r3, r1
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	4619      	mov	r1, r3
 8006840:	4b35      	ldr	r3, [pc, #212]	; (8006918 <USB_DeactivateEndpoint+0x1b0>)
 8006842:	4013      	ands	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
 8006846:	e060      	b.n	800690a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800685a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685e:	d11f      	bne.n	80068a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800687e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800689e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f303 	lsl.w	r3, r1, r3
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	43db      	mvns	r3, r3
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c0:	4013      	ands	r3, r2
 80068c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f303 	lsl.w	r3, r1, r3
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	43db      	mvns	r3, r3
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e4:	4013      	ands	r3, r2
 80068e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	0159      	lsls	r1, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	440b      	add	r3, r1
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	4619      	mov	r1, r3
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <USB_DeactivateEndpoint+0x1b4>)
 8006906:	4013      	ands	r3, r2
 8006908:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	ec337800 	.word	0xec337800
 800691c:	eff37800 	.word	0xeff37800

08006920 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b01      	cmp	r3, #1
 800693e:	f040 817a 	bne.w	8006c36 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d132      	bne.n	80069b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800696c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800698c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a8:	0cdb      	lsrs	r3, r3, #19
 80069aa:	04db      	lsls	r3, r3, #19
 80069ac:	6113      	str	r3, [r2, #16]
 80069ae:	e092      	b.n	8006ad6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ca:	0cdb      	lsrs	r3, r3, #19
 80069cc:	04db      	lsls	r3, r3, #19
 80069ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11a      	bne.n	8006a30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d903      	bls.n	8006a0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a2c:	6113      	str	r3, [r2, #16]
 8006a2e:	e01b      	b.n	8006a68 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6919      	ldr	r1, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	440b      	add	r3, r1
 8006a48:	1e59      	subs	r1, r3, #1
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a52:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a54:	4ba2      	ldr	r3, [pc, #648]	; (8006ce0 <USB_EPStartXfer+0x3c0>)
 8006a56:	400b      	ands	r3, r1
 8006a58:	69b9      	ldr	r1, [r7, #24]
 8006a5a:	0148      	lsls	r0, r1, #5
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	4401      	add	r1, r0
 8006a60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a64:	4313      	orrs	r3, r2
 8006a66:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a7e:	69b9      	ldr	r1, [r7, #24]
 8006a80:	0148      	lsls	r0, r1, #5
 8006a82:	69f9      	ldr	r1, [r7, #28]
 8006a84:	4401      	add	r1, r0
 8006a86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d11f      	bne.n	8006ad6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ab4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d14b      	bne.n	8006b74 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af0:	461a      	mov	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	791b      	ldrb	r3, [r3, #4]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d128      	bne.n	8006b52 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d110      	bne.n	8006b32 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	e00f      	b.n	8006b52 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e165      	b.n	8006e40 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d015      	beq.n	8006bc8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 814d 	beq.w	8006e40 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	634b      	str	r3, [r1, #52]	; 0x34
 8006bc6:	e13b      	b.n	8006e40 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d110      	bne.n	8006bfa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e00f      	b.n	8006c1a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68d9      	ldr	r1, [r3, #12]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	b298      	uxth	r0, r3
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f9b8 	bl	8006fa4 <USB_WritePacket>
 8006c34:	e104      	b.n	8006e40 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	0cdb      	lsrs	r3, r3, #19
 8006c52:	04db      	lsls	r3, r3, #19
 8006c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c78:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d131      	bne.n	8006ce4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	0148      	lsls	r0, r1, #5
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	4401      	add	r1, r0
 8006cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cdc:	6113      	str	r3, [r2, #16]
 8006cde:	e061      	b.n	8006da4 <USB_EPStartXfer+0x484>
 8006ce0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d123      	bne.n	8006d34 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	69b9      	ldr	r1, [r7, #24]
 8006d04:	0148      	lsls	r0, r1, #5
 8006d06:	69f9      	ldr	r1, [r7, #28]
 8006d08:	4401      	add	r1, r0
 8006d0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d30:	6113      	str	r3, [r2, #16]
 8006d32:	e037      	b.n	8006da4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	8afa      	ldrh	r2, [r7, #22]
 8006d50:	fb03 f202 	mul.w	r2, r3, r2
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	8afb      	ldrh	r3, [r7, #22]
 8006d68:	04d9      	lsls	r1, r3, #19
 8006d6a:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <USB_EPStartXfer+0x52c>)
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	0148      	lsls	r0, r1, #5
 8006d72:	69f9      	ldr	r1, [r7, #28]
 8006d74:	4401      	add	r1, r0
 8006d76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d94:	69b9      	ldr	r1, [r7, #24]
 8006d96:	0148      	lsls	r0, r1, #5
 8006d98:	69f9      	ldr	r1, [r7, #28]
 8006d9a:	4401      	add	r1, r0
 8006d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006da0:	4313      	orrs	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10d      	bne.n	8006dc6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	68d9      	ldr	r1, [r3, #12]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	791b      	ldrb	r3, [r3, #4]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d128      	bne.n	8006e20 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d110      	bne.n	8006e00 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00f      	b.n	8006e20 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	1ff80000 	.word	0x1ff80000

08006e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d14a      	bne.n	8006f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e86:	f040 8086 	bne.w	8006f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d902      	bls.n	8006ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee6:	e056      	b.n	8006f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f00:	d0e7      	beq.n	8006ed2 <USB_EPStopXfer+0x82>
 8006f02:	e048      	b.n	8006f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1c:	d13b      	bne.n	8006f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d902      	bls.n	8006f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7a:	e00c      	b.n	8006f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f94:	d0e7      	beq.n	8006f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b089      	sub	sp, #36	; 0x24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	71fb      	strb	r3, [r7, #7]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d123      	bne.n	8007012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fca:	88bb      	ldrh	r3, [r7, #4]
 8006fcc:	3303      	adds	r3, #3
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e018      	b.n	800700a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	031a      	lsls	r2, r3, #12
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	3301      	adds	r3, #1
 8007002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	3301      	adds	r3, #1
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3e2      	bcc.n	8006fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3724      	adds	r7, #36	; 0x24
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007020:	b480      	push	{r7}
 8007022:	b08b      	sub	sp, #44	; 0x2c
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	089b      	lsrs	r3, r3, #2
 800703a:	b29b      	uxth	r3, r3
 800703c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	e014      	b.n	8007076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	601a      	str	r2, [r3, #0]
    pDest++;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	3301      	adds	r3, #1
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	3301      	adds	r3, #1
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	3301      	adds	r3, #1
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	3301      	adds	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3301      	adds	r3, #1
 8007074:	623b      	str	r3, [r7, #32]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	429a      	cmp	r2, r3
 800707c:	d3e6      	bcc.n	800704c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800707e:	8bfb      	ldrh	r3, [r7, #30]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01e      	beq.n	80070c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708e:	461a      	mov	r2, r3
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	701a      	strb	r2, [r3, #0]
      i++;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	3301      	adds	r3, #1
 80070ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	3301      	adds	r3, #1
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070bc:	8bfb      	ldrh	r3, [r7, #30]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1ea      	bne.n	8007098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	372c      	adds	r7, #44	; 0x2c
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d12c      	bne.n	8007146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	db12      	blt.n	8007124 <USB_EPSetStall+0x54>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00f      	beq.n	8007124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e02b      	b.n	800719e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	db12      	blt.n	800717e <USB_EPSetStall+0xae>
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00f      	beq.n	800717e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007178:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800717c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800719c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d128      	bne.n	800721a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	791b      	ldrb	r3, [r3, #4]
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d003      	beq.n	80071f8 <USB_EPClearStall+0x4c>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	791b      	ldrb	r3, [r3, #4]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d138      	bne.n	800726a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	e027      	b.n	800726a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	791b      	ldrb	r3, [r3, #4]
 800723e:	2b03      	cmp	r3, #3
 8007240:	d003      	beq.n	800724a <USB_EPClearStall+0x9e>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d10f      	bne.n	800726a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007296:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800729a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b2:	4313      	orrs	r3, r2
 80072b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f2:	f023 0302 	bic.w	r3, r3, #2
 80072f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007320:	f023 0303 	bic.w	r3, r3, #3
 8007324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	0c1b      	lsrs	r3, r3, #16
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4013      	ands	r3, r2
 80073c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	b29b      	uxth	r3, r3
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4013      	ands	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007404:	68bb      	ldr	r3, [r7, #8]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007434:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	fa22 f303 	lsr.w	r3, r2, r3
 8007442:	01db      	lsls	r3, r3, #7
 8007444:	b2db      	uxtb	r3, r3
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4013      	ands	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007460:	68bb      	ldr	r3, [r7, #8]
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0301 	and.w	r3, r3, #1
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074a8:	f023 0307 	bic.w	r3, r3, #7
 80074ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	460b      	mov	r3, r1
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	333c      	adds	r3, #60	; 0x3c
 80074e6:	3304      	adds	r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	4a26      	ldr	r2, [pc, #152]	; (8007588 <USB_EP0_OutStart+0xb8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d90a      	bls.n	800750a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007504:	d101      	bne.n	800750a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	e037      	b.n	800757a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	461a      	mov	r2, r3
 8007512:	2300      	movs	r3, #0
 8007514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	f043 0318 	orr.w	r3, r3, #24
 800753c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007550:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d10f      	bne.n	8007578 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007572:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	4f54300a 	.word	0x4f54300a

0800758c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075a4:	d901      	bls.n	80075aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e01b      	b.n	80075e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	daf2      	bge.n	8007598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075ce:	d901      	bls.n	80075d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e006      	b.n	80075e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d0f0      	beq.n	80075c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007600:	f002 fc2e 	bl	8009e60 <USBD_static_malloc>
 8007604:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32b0      	adds	r2, #176	; 0xb0
 8007616:	2100      	movs	r1, #0
 8007618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800761c:	2302      	movs	r3, #2
 800761e:	e0d4      	b.n	80077ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007620:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f002 fc7e 	bl	8009f28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32b0      	adds	r2, #176	; 0xb0
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32b0      	adds	r2, #176	; 0xb0
 8007646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7c1b      	ldrb	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d138      	bne.n	80076ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007658:	4b5e      	ldr	r3, [pc, #376]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007660:	2202      	movs	r2, #2
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 fad9 	bl	8009c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007668:	4b5a      	ldr	r3, [pc, #360]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	2201      	movs	r2, #1
 8007680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007684:	7819      	ldrb	r1, [r3, #0]
 8007686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768a:	2202      	movs	r2, #2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f002 fac4 	bl	8009c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007692:	4b51      	ldr	r3, [pc, #324]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076aa:	2201      	movs	r2, #1
 80076ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076ae:	4b4b      	ldr	r3, [pc, #300]	; (80077dc <USBD_CDC_Init+0x1ec>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	3326      	adds	r3, #38	; 0x26
 80076c4:	2210      	movs	r2, #16
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e035      	b.n	8007736 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076ca:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 80076cc:	7819      	ldrb	r1, [r3, #0]
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	2202      	movs	r2, #2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f002 faa1 	bl	8009c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	2201      	movs	r2, #1
 80076f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80076f4:	7819      	ldrb	r1, [r3, #0]
 80076f6:	2340      	movs	r3, #64	; 0x40
 80076f8:	2202      	movs	r2, #2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f002 fa8d 	bl	8009c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007700:	4b35      	ldr	r3, [pc, #212]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007718:	2201      	movs	r2, #1
 800771a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800771c:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <USBD_CDC_Init+0x1ec>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 020f 	and.w	r2, r3, #15
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	3326      	adds	r3, #38	; 0x26
 8007732:	2210      	movs	r2, #16
 8007734:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007736:	4b29      	ldr	r3, [pc, #164]	; (80077dc <USBD_CDC_Init+0x1ec>)
 8007738:	7819      	ldrb	r1, [r3, #0]
 800773a:	2308      	movs	r3, #8
 800773c:	2203      	movs	r2, #3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f002 fa6b 	bl	8009c1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <USBD_CDC_Init+0x1ec>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	2201      	movs	r2, #1
 800775c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	33b0      	adds	r3, #176	; 0xb0
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007794:	2302      	movs	r3, #2
 8007796:	e018      	b.n	80077ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7c1b      	ldrb	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077a0:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80077a2:	7819      	ldrb	r1, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f002 fb22 	bl	8009df8 <USBD_LL_PrepareReceive>
 80077b4:	e008      	b.n	80077c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80077b8:	7819      	ldrb	r1, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f002 fb18 	bl	8009df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200000c3 	.word	0x200000c3
 80077d8:	200000c4 	.word	0x200000c4
 80077dc:	200000c5 	.word	0x200000c5

080077e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <USBD_CDC_DeInit+0xf8>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f002 fa37 	bl	8009c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077f8:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <USBD_CDC_DeInit+0xf8>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3324      	adds	r3, #36	; 0x24
 800780e:	2200      	movs	r2, #0
 8007810:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007812:	4b32      	ldr	r3, [pc, #200]	; (80078dc <USBD_CDC_DeInit+0xfc>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f002 fa24 	bl	8009c66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800781e:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <USBD_CDC_DeInit+0xfc>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 020f 	and.w	r2, r3, #15
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007836:	2200      	movs	r2, #0
 8007838:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800783a:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 fa10 	bl	8009c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007846:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	3324      	adds	r3, #36	; 0x24
 800785c:	2200      	movs	r2, #0
 800785e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3326      	adds	r3, #38	; 0x26
 8007876:	2200      	movs	r2, #0
 8007878:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	32b0      	adds	r2, #176	; 0xb0
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01f      	beq.n	80078cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	33b0      	adds	r3, #176	; 0xb0
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32b0      	adds	r2, #176	; 0xb0
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f002 fae4 	bl	8009e7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32b0      	adds	r2, #176	; 0xb0
 80078be:	2100      	movs	r1, #0
 80078c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200000c3 	.word	0x200000c3
 80078dc:	200000c4 	.word	0x200000c4
 80078e0:	200000c5 	.word	0x200000c5

080078e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32b0      	adds	r2, #176	; 0xb0
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e0bf      	b.n	8007a94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800791c:	2b00      	cmp	r3, #0
 800791e:	d050      	beq.n	80079c2 <USBD_CDC_Setup+0xde>
 8007920:	2b20      	cmp	r3, #32
 8007922:	f040 80af 	bne.w	8007a84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d03a      	beq.n	80079a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b25b      	sxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	da1b      	bge.n	8007970 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	33b0      	adds	r3, #176	; 0xb0
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800794e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	88d2      	ldrh	r2, [r2, #6]
 8007954:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b07      	cmp	r3, #7
 800795c:	bf28      	it	cs
 800795e:	2307      	movcs	r3, #7
 8007960:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	89fa      	ldrh	r2, [r7, #14]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fd49 	bl	8009400 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800796e:	e090      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	785a      	ldrb	r2, [r3, #1]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	88db      	ldrh	r3, [r3, #6]
 800797e:	2b3f      	cmp	r3, #63	; 0x3f
 8007980:	d803      	bhi.n	800798a <USBD_CDC_Setup+0xa6>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	e000      	b.n	800798c <USBD_CDC_Setup+0xa8>
 800798a:	2240      	movs	r2, #64	; 0x40
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800799a:	461a      	mov	r2, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fd5b 	bl	8009458 <USBD_CtlPrepareRx>
      break;
 80079a2:	e076      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	33b0      	adds	r3, #176	; 0xb0
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	7850      	ldrb	r0, [r2, #1]
 80079ba:	2200      	movs	r2, #0
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	4798      	blx	r3
      break;
 80079c0:	e067      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b0b      	cmp	r3, #11
 80079c8:	d851      	bhi.n	8007a6e <USBD_CDC_Setup+0x18a>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <USBD_CDC_Setup+0xec>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	08007a7d 	.word	0x08007a7d
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007a6f 	.word	0x08007a6f
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a6f 	.word	0x08007a6f
 80079ec:	08007a6f 	.word	0x08007a6f
 80079f0:	08007a6f 	.word	0x08007a6f
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d107      	bne.n	8007a1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a0c:	f107 030a 	add.w	r3, r7, #10
 8007a10:	2202      	movs	r2, #2
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fcf3 	bl	8009400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a1a:	e032      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fc7d 	bl	800931e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a24:	2303      	movs	r3, #3
 8007a26:	75fb      	strb	r3, [r7, #23]
          break;
 8007a28:	e02b      	b.n	8007a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d107      	bne.n	8007a46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a36:	f107 030d 	add.w	r3, r7, #13
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fcde 	bl	8009400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a44:	e01d      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fc68 	bl	800931e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e016      	b.n	8007a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d00f      	beq.n	8007a80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fc5b 	bl	800931e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a6c:	e008      	b.n	8007a80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fc54 	bl	800931e <USBD_CtlError>
          ret = USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e002      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
          break;
 8007a7c:	bf00      	nop
 8007a7e:	e008      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
          break;
 8007a80:	bf00      	nop
      }
      break;
 8007a82:	e006      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fc49 	bl	800931e <USBD_CtlError>
      ret = USBD_FAIL;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	32b0      	adds	r2, #176	; 0xb0
 8007aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e065      	b.n	8007b92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	32b0      	adds	r2, #176	; 0xb0
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3318      	adds	r3, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02f      	beq.n	8007b50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	3318      	adds	r3, #24
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 010f 	and.w	r1, r3, #15
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	440b      	add	r3, r1
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4403      	add	r3, r0
 8007b18:	331c      	adds	r3, #28
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d112      	bne.n	8007b50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b42:	78f9      	ldrb	r1, [r7, #3]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f002 f934 	bl	8009db6 <USBD_LL_Transmit>
 8007b4e:	e01f      	b.n	8007b90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	33b0      	adds	r3, #176	; 0xb0
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d010      	beq.n	8007b90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	33b0      	adds	r3, #176	; 0xb0
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32b0      	adds	r2, #176	; 0xb0
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	32b0      	adds	r2, #176	; 0xb0
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e01a      	b.n	8007c02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f002 f932 	bl	8009e3a <USBD_LL_GetRxDataSize>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	33b0      	adds	r3, #176	; 0xb0
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	32b0      	adds	r2, #176	; 0xb0
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e025      	b.n	8007c78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	33b0      	adds	r3, #176	; 0xb0
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <USBD_CDC_EP0_RxReady+0x6c>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c46:	2bff      	cmp	r3, #255	; 0xff
 8007c48:	d015      	beq.n	8007c76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	33b0      	adds	r3, #176	; 0xb0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	22ff      	movs	r2, #255	; 0xff
 8007c72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c88:	2182      	movs	r1, #130	; 0x82
 8007c8a:	4818      	ldr	r0, [pc, #96]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c8c:	f000 fd0f 	bl	80086ae <USBD_GetEpDesc>
 8007c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c92:	2101      	movs	r1, #1
 8007c94:	4815      	ldr	r0, [pc, #84]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c96:	f000 fd0a 	bl	80086ae <USBD_GetEpDesc>
 8007c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c9c:	2181      	movs	r1, #129	; 0x81
 8007c9e:	4813      	ldr	r0, [pc, #76]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ca0:	f000 fd05 	bl	80086ae <USBD_GetEpDesc>
 8007ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2210      	movs	r2, #16
 8007cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d006      	beq.n	8007cc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc0:	711a      	strb	r2, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd4:	711a      	strb	r2, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2243      	movs	r2, #67	; 0x43
 8007cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000080 	.word	0x20000080

08007cf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cf8:	2182      	movs	r1, #130	; 0x82
 8007cfa:	4818      	ldr	r0, [pc, #96]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cfc:	f000 fcd7 	bl	80086ae <USBD_GetEpDesc>
 8007d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d02:	2101      	movs	r1, #1
 8007d04:	4815      	ldr	r0, [pc, #84]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d06:	f000 fcd2 	bl	80086ae <USBD_GetEpDesc>
 8007d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d0c:	2181      	movs	r1, #129	; 0x81
 8007d0e:	4813      	ldr	r0, [pc, #76]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d10:	f000 fccd 	bl	80086ae <USBD_GetEpDesc>
 8007d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	711a      	strb	r2, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f042 0202 	orr.w	r2, r2, #2
 8007d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d006      	beq.n	8007d4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	711a      	strb	r2, [r3, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f042 0202 	orr.w	r2, r2, #2
 8007d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2243      	movs	r2, #67	; 0x43
 8007d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000080 	.word	0x20000080

08007d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d68:	2182      	movs	r1, #130	; 0x82
 8007d6a:	4818      	ldr	r0, [pc, #96]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d6c:	f000 fc9f 	bl	80086ae <USBD_GetEpDesc>
 8007d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d72:	2101      	movs	r1, #1
 8007d74:	4815      	ldr	r0, [pc, #84]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d76:	f000 fc9a 	bl	80086ae <USBD_GetEpDesc>
 8007d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d7c:	2181      	movs	r1, #129	; 0x81
 8007d7e:	4813      	ldr	r0, [pc, #76]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d80:	f000 fc95 	bl	80086ae <USBD_GetEpDesc>
 8007d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da0:	711a      	strb	r2, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db4:	711a      	strb	r2, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2243      	movs	r2, #67	; 0x43
 8007dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dc0:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000080 	.word	0x20000080

08007dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220a      	movs	r2, #10
 8007ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dde:	4b03      	ldr	r3, [pc, #12]	; (8007dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000003c 	.word	0x2000003c

08007df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e009      	b.n	8007e18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	33b0      	adds	r3, #176	; 0xb0
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	32b0      	adds	r2, #176	; 0xb0
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e008      	b.n	8007e5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32b0      	adds	r2, #176	; 0xb0
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e004      	b.n	8007e96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
	...

08007ea4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32b0      	adds	r2, #176	; 0xb0
 8007eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32b0      	adds	r2, #176	; 0xb0
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e018      	b.n	8007f04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <USBD_CDC_ReceivePacket+0x68>)
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 ff85 	bl	8009df8 <USBD_LL_PrepareReceive>
 8007eee:	e008      	b.n	8007f02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ef0:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <USBD_CDC_ReceivePacket+0x68>)
 8007ef2:	7819      	ldrb	r1, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007efa:	2340      	movs	r3, #64	; 0x40
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 ff7b 	bl	8009df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	200000c4 	.word	0x200000c4

08007f10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e01f      	b.n	8007f68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	79fa      	ldrb	r2, [r7, #7]
 8007f5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 fdf5 	bl	8009b4c <USBD_LL_Init>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e025      	b.n	8007fd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32ae      	adds	r2, #174	; 0xae
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32ae      	adds	r2, #174	; 0xae
 8007fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	f107 020e 	add.w	r2, r7, #14
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fdfd 	bl	8009be4 <USBD_LL_Start>
 8007fea:	4603      	mov	r3, r0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	4611      	mov	r1, r2
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	4611      	mov	r1, r2
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f001 f90e 	bl	80092aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800809c:	461a      	mov	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d01a      	beq.n	80080e8 <USBD_LL_SetupStage+0x72>
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d822      	bhi.n	80080fc <USBD_LL_SetupStage+0x86>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <USBD_LL_SetupStage+0x4a>
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d00a      	beq.n	80080d4 <USBD_LL_SetupStage+0x5e>
 80080be:	e01d      	b.n	80080fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fb65 	bl	8008798 <USBD_StdDevReq>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]
      break;
 80080d2:	e020      	b.n	8008116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fbcd 	bl	800887c <USBD_StdItfReq>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
      break;
 80080e6:	e016      	b.n	8008116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fc2f 	bl	8008954 <USBD_StdEPReq>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
      break;
 80080fa:	e00c      	b.n	8008116 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008102:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008106:	b2db      	uxtb	r3, r3
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fdca 	bl	8009ca4 <USBD_LL_StallEP>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
      break;
 8008114:	bf00      	nop
  }

  return ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	460b      	mov	r3, r1
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d16e      	bne.n	8008216 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800813e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008146:	2b03      	cmp	r3, #3
 8008148:	f040 8098 	bne.w	800827c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	429a      	cmp	r2, r3
 8008156:	d913      	bls.n	8008180 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	1ad2      	subs	r2, r2, r3
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	4293      	cmp	r3, r2
 8008170:	bf28      	it	cs
 8008172:	4613      	movcs	r3, r2
 8008174:	461a      	mov	r2, r3
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f001 f98a 	bl	8009492 <USBD_CtlContinueRx>
 800817e:	e07d      	b.n	800827c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2b02      	cmp	r3, #2
 800818c:	d014      	beq.n	80081b8 <USBD_LL_DataOutStage+0x98>
 800818e:	2b02      	cmp	r3, #2
 8008190:	d81d      	bhi.n	80081ce <USBD_LL_DataOutStage+0xae>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <USBD_LL_DataOutStage+0x7c>
 8008196:	2b01      	cmp	r3, #1
 8008198:	d003      	beq.n	80081a2 <USBD_LL_DataOutStage+0x82>
 800819a:	e018      	b.n	80081ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	75bb      	strb	r3, [r7, #22]
            break;
 80081a0:	e018      	b.n	80081d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 fa64 	bl	800867a <USBD_CoreFindIF>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75bb      	strb	r3, [r7, #22]
            break;
 80081b6:	e00d      	b.n	80081d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fa66 	bl	8008694 <USBD_CoreFindEP>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75bb      	strb	r3, [r7, #22]
            break;
 80081cc:	e002      	b.n	80081d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75bb      	strb	r3, [r7, #22]
            break;
 80081d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081d4:	7dbb      	ldrb	r3, [r7, #22]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d119      	bne.n	800820e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d113      	bne.n	800820e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081e6:	7dba      	ldrb	r2, [r7, #22]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	32ae      	adds	r2, #174	; 0xae
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081f6:	7dba      	ldrb	r2, [r7, #22]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081fe:	7dba      	ldrb	r2, [r7, #22]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	32ae      	adds	r2, #174	; 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f001 f950 	bl	80094b4 <USBD_CtlSendStatus>
 8008214:	e032      	b.n	800827c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821c:	b2db      	uxtb	r3, r3
 800821e:	4619      	mov	r1, r3
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fa37 	bl	8008694 <USBD_CoreFindEP>
 8008226:	4603      	mov	r3, r0
 8008228:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800822a:	7dbb      	ldrb	r3, [r7, #22]
 800822c:	2bff      	cmp	r3, #255	; 0xff
 800822e:	d025      	beq.n	800827c <USBD_LL_DataOutStage+0x15c>
 8008230:	7dbb      	ldrb	r3, [r7, #22]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d122      	bne.n	800827c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d117      	bne.n	8008272 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008242:	7dba      	ldrb	r2, [r7, #22]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	32ae      	adds	r2, #174	; 0xae
 8008248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00f      	beq.n	8008272 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008252:	7dba      	ldrb	r2, [r7, #22]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800825a:	7dba      	ldrb	r2, [r7, #22]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	32ae      	adds	r2, #174	; 0xae
 8008260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	7afa      	ldrb	r2, [r7, #11]
 8008268:	4611      	mov	r1, r2
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	4798      	blx	r3
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	e000      	b.n	800827e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	460b      	mov	r3, r1
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d16f      	bne.n	800837a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3314      	adds	r3, #20
 800829e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d15a      	bne.n	8008360 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d914      	bls.n	80082e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 f8b2 	bl	8009436 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082d2:	2300      	movs	r3, #0
 80082d4:	2200      	movs	r2, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 fd8d 	bl	8009df8 <USBD_LL_PrepareReceive>
 80082de:	e03f      	b.n	8008360 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d11c      	bne.n	8008326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d316      	bcc.n	8008326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008302:	429a      	cmp	r2, r3
 8008304:	d20f      	bcs.n	8008326 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 f893 	bl	8009436 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008318:	2300      	movs	r3, #0
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f001 fd6a 	bl	8009df8 <USBD_LL_PrepareReceive>
 8008324:	e01c      	b.n	8008360 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d10f      	bne.n	8008352 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008352:	2180      	movs	r1, #128	; 0x80
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f001 fca5 	bl	8009ca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f001 f8bd 	bl	80094da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d03a      	beq.n	80083e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fe42 	bl	8007ff4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008378:	e032      	b.n	80083e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008380:	b2db      	uxtb	r3, r3
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f985 	bl	8008694 <USBD_CoreFindEP>
 800838a:	4603      	mov	r3, r0
 800838c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	2bff      	cmp	r3, #255	; 0xff
 8008392:	d025      	beq.n	80083e0 <USBD_LL_DataInStage+0x15a>
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d122      	bne.n	80083e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d11c      	bne.n	80083e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083a6:	7dfa      	ldrb	r2, [r7, #23]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	32ae      	adds	r2, #174	; 0xae
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d014      	beq.n	80083e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80083b6:	7dfa      	ldrb	r2, [r7, #23]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80083be:	7dfa      	ldrb	r2, [r7, #23]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	32ae      	adds	r2, #174	; 0xae
 80083c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	7afa      	ldrb	r2, [r7, #11]
 80083cc:	4611      	mov	r1, r2
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083d6:	7dbb      	ldrb	r3, [r7, #22]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083dc:	7dbb      	ldrb	r3, [r7, #22]
 80083de:	e000      	b.n	80083e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00e      	beq.n	8008450 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	6852      	ldr	r2, [r2, #4]
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	4611      	mov	r1, r2
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fbdf 	bl	8009c1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2240      	movs	r2, #64	; 0x40
 8008468:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	2200      	movs	r2, #0
 8008470:	2180      	movs	r1, #128	; 0x80
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fbd1 	bl	8009c1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2240      	movs	r2, #64	; 0x40
 8008482:	621a      	str	r2, [r3, #32]

  return ret;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d006      	beq.n	80084d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2204      	movs	r2, #4
 80084d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d106      	bne.n	8008508 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008500:	b2da      	uxtb	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b03      	cmp	r3, #3
 8008528:	d110      	bne.n	800854c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32ae      	adds	r2, #174	; 0xae
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	e01c      	b.n	80085b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b03      	cmp	r3, #3
 8008582:	d115      	bne.n	80085b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32ae      	adds	r2, #174	; 0xae
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	32ae      	adds	r2, #174	; 0xae
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	e01c      	b.n	8008616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d115      	bne.n	8008614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	32ae      	adds	r2, #174	; 0xae
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32ae      	adds	r2, #174	; 0xae
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	4611      	mov	r1, r2
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6852      	ldr	r2, [r2, #4]
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	4611      	mov	r1, r2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	885b      	ldrh	r3, [r3, #2]
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d920      	bls.n	8008718 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80086de:	e013      	b.n	8008708 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086e0:	f107 030a 	add.w	r3, r7, #10
 80086e4:	4619      	mov	r1, r3
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f000 f81b 	bl	8008722 <USBD_GetNextDesc>
 80086ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	785b      	ldrb	r3, [r3, #1]
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	d108      	bne.n	8008708 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	789b      	ldrb	r3, [r3, #2]
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	429a      	cmp	r2, r3
 8008702:	d008      	beq.n	8008716 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	885b      	ldrh	r3, [r3, #2]
 800870c:	b29a      	uxth	r2, r3
 800870e:	897b      	ldrh	r3, [r7, #10]
 8008710:	429a      	cmp	r2, r3
 8008712:	d8e5      	bhi.n	80086e0 <USBD_GetEpDesc+0x32>
 8008714:	e000      	b.n	8008718 <USBD_GetEpDesc+0x6a>
          break;
 8008716:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008718:	693b      	ldr	r3, [r7, #16]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	881a      	ldrh	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	4413      	add	r3, r2
 800873c:	b29a      	uxth	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3301      	adds	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800877a:	8a3b      	ldrh	r3, [r7, #16]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	b21a      	sxth	r2, r3
 8008780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008784:	4313      	orrs	r3, r2
 8008786:	b21b      	sxth	r3, r3
 8008788:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800878a:	89fb      	ldrh	r3, [r7, #14]
}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d005      	beq.n	80087be <USBD_StdDevReq+0x26>
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d857      	bhi.n	8008866 <USBD_StdDevReq+0xce>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00f      	beq.n	80087da <USBD_StdDevReq+0x42>
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d153      	bne.n	8008866 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	32ae      	adds	r2, #174	; 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]
      break;
 80087d8:	e04a      	b.n	8008870 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b09      	cmp	r3, #9
 80087e0:	d83b      	bhi.n	800885a <USBD_StdDevReq+0xc2>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_StdDevReq+0x50>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	0800883d 	.word	0x0800883d
 80087ec:	08008851 	.word	0x08008851
 80087f0:	0800885b 	.word	0x0800885b
 80087f4:	08008847 	.word	0x08008847
 80087f8:	0800885b 	.word	0x0800885b
 80087fc:	0800881b 	.word	0x0800881b
 8008800:	08008811 	.word	0x08008811
 8008804:	0800885b 	.word	0x0800885b
 8008808:	08008833 	.word	0x08008833
 800880c:	08008825 	.word	0x08008825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa3c 	bl	8008c90 <USBD_GetDescriptor>
          break;
 8008818:	e024      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fba1 	bl	8008f64 <USBD_SetAddress>
          break;
 8008822:	e01f      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fbe0 	bl	8008fec <USBD_SetConfig>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
          break;
 8008830:	e018      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc83 	bl	8009140 <USBD_GetConfig>
          break;
 800883a:	e013      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fcb4 	bl	80091ac <USBD_GetStatus>
          break;
 8008844:	e00e      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fce3 	bl	8009214 <USBD_SetFeature>
          break;
 800884e:	e009      	b.n	8008864 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fd07 	bl	8009266 <USBD_ClrFeature>
          break;
 8008858:	e004      	b.n	8008864 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fd5e 	bl	800931e <USBD_CtlError>
          break;
 8008862:	bf00      	nop
      }
      break;
 8008864:	e004      	b.n	8008870 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fd58 	bl	800931e <USBD_CtlError>
      break;
 800886e:	bf00      	nop
  }

  return ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop

0800887c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d005      	beq.n	80088a2 <USBD_StdItfReq+0x26>
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d852      	bhi.n	8008940 <USBD_StdItfReq+0xc4>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <USBD_StdItfReq+0x26>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d14e      	bne.n	8008940 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d840      	bhi.n	8008932 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	889b      	ldrh	r3, [r3, #4]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d836      	bhi.n	8008928 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	889b      	ldrh	r3, [r3, #4]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff fed9 	bl	800867a <USBD_CoreFindIF>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2bff      	cmp	r3, #255	; 0xff
 80088d0:	d01d      	beq.n	800890e <USBD_StdItfReq+0x92>
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d11a      	bne.n	800890e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088d8:	7bba      	ldrb	r2, [r7, #14]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32ae      	adds	r2, #174	; 0xae
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00f      	beq.n	8008908 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088e8:	7bba      	ldrb	r2, [r7, #14]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088f0:	7bba      	ldrb	r2, [r7, #14]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	32ae      	adds	r2, #174	; 0xae
 80088f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	4798      	blx	r3
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008906:	e004      	b.n	8008912 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008908:	2303      	movs	r3, #3
 800890a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800890c:	e001      	b.n	8008912 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d110      	bne.n	800893c <USBD_StdItfReq+0xc0>
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10d      	bne.n	800893c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fdc7 	bl	80094b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008926:	e009      	b.n	800893c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fcf7 	bl	800931e <USBD_CtlError>
          break;
 8008930:	e004      	b.n	800893c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fcf2 	bl	800931e <USBD_CtlError>
          break;
 800893a:	e000      	b.n	800893e <USBD_StdItfReq+0xc2>
          break;
 800893c:	bf00      	nop
      }
      break;
 800893e:	e004      	b.n	800894a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fceb 	bl	800931e <USBD_CtlError>
      break;
 8008948:	bf00      	nop
  }

  return ret;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	889b      	ldrh	r3, [r3, #4]
 8008966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d007      	beq.n	8008984 <USBD_StdEPReq+0x30>
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	f200 817f 	bhi.w	8008c78 <USBD_StdEPReq+0x324>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d02a      	beq.n	80089d4 <USBD_StdEPReq+0x80>
 800897e:	2b20      	cmp	r3, #32
 8008980:	f040 817a 	bne.w	8008c78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe83 	bl	8008694 <USBD_CoreFindEP>
 800898e:	4603      	mov	r3, r0
 8008990:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008992:	7b7b      	ldrb	r3, [r7, #13]
 8008994:	2bff      	cmp	r3, #255	; 0xff
 8008996:	f000 8174 	beq.w	8008c82 <USBD_StdEPReq+0x32e>
 800899a:	7b7b      	ldrb	r3, [r7, #13]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 8170 	bne.w	8008c82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089a2:	7b7a      	ldrb	r2, [r7, #13]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089aa:	7b7a      	ldrb	r2, [r7, #13]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	32ae      	adds	r2, #174	; 0xae
 80089b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8163 	beq.w	8008c82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80089bc:	7b7a      	ldrb	r2, [r7, #13]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	32ae      	adds	r2, #174	; 0xae
 80089c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089d2:	e156      	b.n	8008c82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d008      	beq.n	80089ee <USBD_StdEPReq+0x9a>
 80089dc:	2b03      	cmp	r3, #3
 80089de:	f300 8145 	bgt.w	8008c6c <USBD_StdEPReq+0x318>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 809b 	beq.w	8008b1e <USBD_StdEPReq+0x1ca>
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d03c      	beq.n	8008a66 <USBD_StdEPReq+0x112>
 80089ec:	e13e      	b.n	8008c6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d002      	beq.n	8008a00 <USBD_StdEPReq+0xac>
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d016      	beq.n	8008a2c <USBD_StdEPReq+0xd8>
 80089fe:	e02c      	b.n	8008a5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <USBD_StdEPReq+0xce>
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b80      	cmp	r3, #128	; 0x80
 8008a0a:	d00a      	beq.n	8008a22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f947 	bl	8009ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a16:	2180      	movs	r1, #128	; 0x80
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 f943 	bl	8009ca4 <USBD_LL_StallEP>
 8008a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a20:	e020      	b.n	8008a64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc7a 	bl	800931e <USBD_CtlError>
              break;
 8008a2a:	e01b      	b.n	8008a64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	885b      	ldrh	r3, [r3, #2]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10e      	bne.n	8008a52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <USBD_StdEPReq+0xfe>
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b80      	cmp	r3, #128	; 0x80
 8008a3e:	d008      	beq.n	8008a52 <USBD_StdEPReq+0xfe>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	88db      	ldrh	r3, [r3, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f929 	bl	8009ca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fd2e 	bl	80094b4 <USBD_CtlSendStatus>

              break;
 8008a58:	e004      	b.n	8008a64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc5e 	bl	800931e <USBD_CtlError>
              break;
 8008a62:	bf00      	nop
          }
          break;
 8008a64:	e107      	b.n	8008c76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d002      	beq.n	8008a78 <USBD_StdEPReq+0x124>
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d016      	beq.n	8008aa4 <USBD_StdEPReq+0x150>
 8008a76:	e04b      	b.n	8008b10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <USBD_StdEPReq+0x146>
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d00a      	beq.n	8008a9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f90b 	bl	8009ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a8e:	2180      	movs	r1, #128	; 0x80
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f907 	bl	8009ca4 <USBD_LL_StallEP>
 8008a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a98:	e040      	b.n	8008b1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc3e 	bl	800931e <USBD_CtlError>
              break;
 8008aa2:	e03b      	b.n	8008b1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	885b      	ldrh	r3, [r3, #2]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d136      	bne.n	8008b1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 f911 	bl	8009ce2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fcf7 	bl	80094b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff fde2 	bl	8008694 <USBD_CoreFindEP>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ad4:	7b7b      	ldrb	r3, [r7, #13]
 8008ad6:	2bff      	cmp	r3, #255	; 0xff
 8008ad8:	d01f      	beq.n	8008b1a <USBD_StdEPReq+0x1c6>
 8008ada:	7b7b      	ldrb	r3, [r7, #13]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11c      	bne.n	8008b1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ae0:	7b7a      	ldrb	r2, [r7, #13]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ae8:	7b7a      	ldrb	r2, [r7, #13]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32ae      	adds	r2, #174	; 0xae
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d010      	beq.n	8008b1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008af8:	7b7a      	ldrb	r2, [r7, #13]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	32ae      	adds	r2, #174	; 0xae
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b0e:	e004      	b.n	8008b1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fc03 	bl	800931e <USBD_CtlError>
              break;
 8008b18:	e000      	b.n	8008b1c <USBD_StdEPReq+0x1c8>
              break;
 8008b1a:	bf00      	nop
          }
          break;
 8008b1c:	e0ab      	b.n	8008c76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d002      	beq.n	8008b30 <USBD_StdEPReq+0x1dc>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d032      	beq.n	8008b94 <USBD_StdEPReq+0x240>
 8008b2e:	e097      	b.n	8008c60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <USBD_StdEPReq+0x1f2>
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	2b80      	cmp	r3, #128	; 0x80
 8008b3a:	d004      	beq.n	8008b46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fbed 	bl	800931e <USBD_CtlError>
                break;
 8008b44:	e091      	b.n	8008c6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da0b      	bge.n	8008b66 <USBD_StdEPReq+0x212>
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	3310      	adds	r3, #16
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	3304      	adds	r3, #4
 8008b64:	e00b      	b.n	8008b7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc37 	bl	8009400 <USBD_CtlSendData>
              break;
 8008b92:	e06a      	b.n	8008c6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da11      	bge.n	8008bc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	f003 020f 	and.w	r2, r3, #15
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d117      	bne.n	8008be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fbb0 	bl	800931e <USBD_CtlError>
                  break;
 8008bbe:	e054      	b.n	8008c6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	f003 020f 	and.w	r2, r3, #15
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fb9d 	bl	800931e <USBD_CtlError>
                  break;
 8008be4:	e041      	b.n	8008c6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da0b      	bge.n	8008c06 <USBD_StdEPReq+0x2b2>
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	3310      	adds	r3, #16
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	3304      	adds	r3, #4
 8008c04:	e00b      	b.n	8008c1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <USBD_StdEPReq+0x2d8>
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b80      	cmp	r3, #128	; 0x80
 8008c2a:	d103      	bne.n	8008c34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e00e      	b.n	8008c52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f871 	bl	8009d20 <USBD_LL_IsStallEP>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2201      	movs	r2, #1
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2202      	movs	r2, #2
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fbd1 	bl	8009400 <USBD_CtlSendData>
              break;
 8008c5e:	e004      	b.n	8008c6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fb5b 	bl	800931e <USBD_CtlError>
              break;
 8008c68:	bf00      	nop
          }
          break;
 8008c6a:	e004      	b.n	8008c76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb55 	bl	800931e <USBD_CtlError>
          break;
 8008c74:	bf00      	nop
      }
      break;
 8008c76:	e005      	b.n	8008c84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fb4f 	bl	800931e <USBD_CtlError>
      break;
 8008c80:	e000      	b.n	8008c84 <USBD_StdEPReq+0x330>
      break;
 8008c82:	bf00      	nop
  }

  return ret;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	0a1b      	lsrs	r3, r3, #8
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	2b06      	cmp	r3, #6
 8008cb2:	f200 8128 	bhi.w	8008f06 <USBD_GetDescriptor+0x276>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <USBD_GetDescriptor+0x2c>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	08008cf1 	.word	0x08008cf1
 8008cc4:	08008d31 	.word	0x08008d31
 8008cc8:	08008f07 	.word	0x08008f07
 8008ccc:	08008f07 	.word	0x08008f07
 8008cd0:	08008ea7 	.word	0x08008ea7
 8008cd4:	08008ed3 	.word	0x08008ed3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	7c12      	ldrb	r2, [r2, #16]
 8008ce4:	f107 0108 	add.w	r1, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
      break;
 8008cee:	e112      	b.n	8008f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7c1b      	ldrb	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10d      	bne.n	8008d14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	f107 0208 	add.w	r2, r7, #8
 8008d04:	4610      	mov	r0, r2
 8008d06:	4798      	blx	r3
 8008d08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	2202      	movs	r2, #2
 8008d10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d12:	e100      	b.n	8008f16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	f107 0208 	add.w	r2, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	701a      	strb	r2, [r3, #0]
      break;
 8008d2e:	e0f2      	b.n	8008f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	885b      	ldrh	r3, [r3, #2]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	f200 80ac 	bhi.w	8008e94 <USBD_GetDescriptor+0x204>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <USBD_GetDescriptor+0xb4>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d91 	.word	0x08008d91
 8008d4c:	08008dc5 	.word	0x08008dc5
 8008d50:	08008df9 	.word	0x08008df9
 8008d54:	08008e2d 	.word	0x08008e2d
 8008d58:	08008e61 	.word	0x08008e61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7c12      	ldrb	r2, [r2, #16]
 8008d74:	f107 0108 	add.w	r1, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7e:	e091      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 facb 	bl	800931e <USBD_CtlError>
            err++;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8e:	e089      	b.n	8008ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	7c12      	ldrb	r2, [r2, #16]
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008db2:	e077      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fab1 	bl	800931e <USBD_CtlError>
            err++;
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dc2:	e06f      	b.n	8008ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	7c12      	ldrb	r2, [r2, #16]
 8008ddc:	f107 0108 	add.w	r1, r7, #8
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
 8008de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de6:	e05d      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa97 	bl	800931e <USBD_CtlError>
            err++;
 8008df0:	7afb      	ldrb	r3, [r7, #11]
 8008df2:	3301      	adds	r3, #1
 8008df4:	72fb      	strb	r3, [r7, #11]
          break;
 8008df6:	e055      	b.n	8008ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1a:	e043      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa7d 	bl	800931e <USBD_CtlError>
            err++;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	3301      	adds	r3, #1
 8008e28:	72fb      	strb	r3, [r7, #11]
          break;
 8008e2a:	e03b      	b.n	8008ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e029      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa63 	bl	800931e <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e021      	b.n	8008ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e00f      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa49 	bl	800931e <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e007      	b.n	8008ea4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa41 	bl	800931e <USBD_CtlError>
          err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ea2:	bf00      	nop
      }
      break;
 8008ea4:	e037      	b.n	8008f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7c1b      	ldrb	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb6:	f107 0208 	add.w	r2, r7, #8
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4798      	blx	r3
 8008ebe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ec0:	e029      	b.n	8008f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa2a 	bl	800931e <USBD_CtlError>
        err++;
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed0:	e021      	b.n	8008f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	7c1b      	ldrb	r3, [r3, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10d      	bne.n	8008ef6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f107 0208 	add.w	r2, r7, #8
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4798      	blx	r3
 8008eea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ef4:	e00f      	b.n	8008f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa10 	bl	800931e <USBD_CtlError>
        err++;
 8008efe:	7afb      	ldrb	r3, [r7, #11]
 8008f00:	3301      	adds	r3, #1
 8008f02:	72fb      	strb	r3, [r7, #11]
      break;
 8008f04:	e007      	b.n	8008f16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa08 	bl	800931e <USBD_CtlError>
      err++;
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	3301      	adds	r3, #1
 8008f12:	72fb      	strb	r3, [r7, #11]
      break;
 8008f14:	bf00      	nop
  }

  if (err != 0U)
 8008f16:	7afb      	ldrb	r3, [r7, #11]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11e      	bne.n	8008f5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d016      	beq.n	8008f52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f24:	893b      	ldrh	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00e      	beq.n	8008f48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	88da      	ldrh	r2, [r3, #6]
 8008f2e:	893b      	ldrh	r3, [r7, #8]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bf28      	it	cs
 8008f34:	4613      	movcs	r3, r2
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f3a:	893b      	ldrh	r3, [r7, #8]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	68f9      	ldr	r1, [r7, #12]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa5d 	bl	8009400 <USBD_CtlSendData>
 8008f46:	e009      	b.n	8008f5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9e7 	bl	800931e <USBD_CtlError>
 8008f50:	e004      	b.n	8008f5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 faae 	bl	80094b4 <USBD_CtlSendStatus>
 8008f58:	e000      	b.n	8008f5c <USBD_GetDescriptor+0x2cc>
    return;
 8008f5a:	bf00      	nop
  }
}
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop

08008f64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	889b      	ldrh	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d131      	bne.n	8008fda <USBD_SetAddress+0x76>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	88db      	ldrh	r3, [r3, #6]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d12d      	bne.n	8008fda <USBD_SetAddress+0x76>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	885b      	ldrh	r3, [r3, #2]
 8008f82:	2b7f      	cmp	r3, #127	; 0x7f
 8008f84:	d829      	bhi.n	8008fda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	885b      	ldrh	r3, [r3, #2]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d104      	bne.n	8008fa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f9bc 	bl	800931e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa6:	e01d      	b.n	8008fe4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7bfa      	ldrb	r2, [r7, #15]
 8008fac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fedf 	bl	8009d78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa7a 	bl	80094b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fce:	e009      	b.n	8008fe4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	e004      	b.n	8008fe4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f99e 	bl	800931e <USBD_CtlError>
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	4b4e      	ldr	r3, [pc, #312]	; (800913c <USBD_SetConfig+0x150>)
 8009002:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009004:	4b4d      	ldr	r3, [pc, #308]	; (800913c <USBD_SetConfig+0x150>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d905      	bls.n	8009018 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f985 	bl	800931e <USBD_CtlError>
    return USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	e08c      	b.n	8009132 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d002      	beq.n	800902a <USBD_SetConfig+0x3e>
 8009024:	2b03      	cmp	r3, #3
 8009026:	d029      	beq.n	800907c <USBD_SetConfig+0x90>
 8009028:	e075      	b.n	8009116 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800902a:	4b44      	ldr	r3, [pc, #272]	; (800913c <USBD_SetConfig+0x150>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d020      	beq.n	8009074 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009032:	4b42      	ldr	r3, [pc, #264]	; (800913c <USBD_SetConfig+0x150>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800903c:	4b3f      	ldr	r3, [pc, #252]	; (800913c <USBD_SetConfig+0x150>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fe ffe1 	bl	800800a <USBD_SetClassConfig>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f962 	bl	800931e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2202      	movs	r2, #2
 800905e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009062:	e065      	b.n	8009130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa25 	bl	80094b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2203      	movs	r2, #3
 800906e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009072:	e05d      	b.n	8009130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fa1d 	bl	80094b4 <USBD_CtlSendStatus>
      break;
 800907a:	e059      	b.n	8009130 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800907c:	4b2f      	ldr	r3, [pc, #188]	; (800913c <USBD_SetConfig+0x150>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d112      	bne.n	80090aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800908c:	4b2b      	ldr	r3, [pc, #172]	; (800913c <USBD_SetConfig+0x150>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009096:	4b29      	ldr	r3, [pc, #164]	; (800913c <USBD_SetConfig+0x150>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7fe ffd0 	bl	8008042 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa06 	bl	80094b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090a8:	e042      	b.n	8009130 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <USBD_SetConfig+0x150>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d02a      	beq.n	800910e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fe ffbe 	bl	8008042 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090c6:	4b1d      	ldr	r3, [pc, #116]	; (800913c <USBD_SetConfig+0x150>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090d0:	4b1a      	ldr	r3, [pc, #104]	; (800913c <USBD_SetConfig+0x150>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fe ff97 	bl	800800a <USBD_SetClassConfig>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00f      	beq.n	8009106 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f918 	bl	800931e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fe ffa3 	bl	8008042 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009104:	e014      	b.n	8009130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9d4 	bl	80094b4 <USBD_CtlSendStatus>
      break;
 800910c:	e010      	b.n	8009130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9d0 	bl	80094b4 <USBD_CtlSendStatus>
      break;
 8009114:	e00c      	b.n	8009130 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f900 	bl	800931e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <USBD_SetConfig+0x150>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7fe ff8c 	bl	8008042 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800912a:	2303      	movs	r3, #3
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	bf00      	nop
  }

  return ret;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	200003d0 	.word	0x200003d0

08009140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d004      	beq.n	800915c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8e2 	bl	800931e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800915a:	e023      	b.n	80091a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	dc02      	bgt.n	800916e <USBD_GetConfig+0x2e>
 8009168:	2b00      	cmp	r3, #0
 800916a:	dc03      	bgt.n	8009174 <USBD_GetConfig+0x34>
 800916c:	e015      	b.n	800919a <USBD_GetConfig+0x5a>
 800916e:	2b03      	cmp	r3, #3
 8009170:	d00b      	beq.n	800918a <USBD_GetConfig+0x4a>
 8009172:	e012      	b.n	800919a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3308      	adds	r3, #8
 800917e:	2201      	movs	r2, #1
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f93c 	bl	8009400 <USBD_CtlSendData>
        break;
 8009188:	e00c      	b.n	80091a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3304      	adds	r3, #4
 800918e:	2201      	movs	r2, #1
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f934 	bl	8009400 <USBD_CtlSendData>
        break;
 8009198:	e004      	b.n	80091a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f8be 	bl	800931e <USBD_CtlError>
        break;
 80091a2:	bf00      	nop
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d81e      	bhi.n	8009202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	88db      	ldrh	r3, [r3, #6]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d004      	beq.n	80091d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f8a5 	bl	800931e <USBD_CtlError>
        break;
 80091d4:	e01a      	b.n	800920c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d005      	beq.n	80091f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f043 0202 	orr.w	r2, r3, #2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	330c      	adds	r3, #12
 80091f6:	2202      	movs	r2, #2
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f900 	bl	8009400 <USBD_CtlSendData>
      break;
 8009200:	e004      	b.n	800920c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f88a 	bl	800931e <USBD_CtlError>
      break;
 800920a:	bf00      	nop
  }
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	885b      	ldrh	r3, [r3, #2]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d107      	bne.n	8009236 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f940 	bl	80094b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009234:	e013      	b.n	800925e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d10b      	bne.n	8009256 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	889b      	ldrh	r3, [r3, #4]
 8009242:	0a1b      	lsrs	r3, r3, #8
 8009244:	b29b      	uxth	r3, r3
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f930 	bl	80094b4 <USBD_CtlSendStatus>
}
 8009254:	e003      	b.n	800925e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f860 	bl	800931e <USBD_CtlError>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009276:	b2db      	uxtb	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	2b02      	cmp	r3, #2
 800927c:	d80b      	bhi.n	8009296 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	885b      	ldrh	r3, [r3, #2]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d10c      	bne.n	80092a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f910 	bl	80094b4 <USBD_CtlSendStatus>
      }
      break;
 8009294:	e004      	b.n	80092a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f840 	bl	800931e <USBD_CtlError>
      break;
 800929e:	e000      	b.n	80092a2 <USBD_ClrFeature+0x3c>
      break;
 80092a0:	bf00      	nop
  }
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	781a      	ldrb	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fa41 	bl	800875c <SWAPBYTE>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fa34 	bl	800875c <SWAPBYTE>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fa27 	bl	800875c <SWAPBYTE>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	80da      	strh	r2, [r3, #6]
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009328:	2180      	movs	r1, #128	; 0x80
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fcba 	bl	8009ca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009330:	2100      	movs	r1, #0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fcb6 	bl	8009ca4 <USBD_LL_StallEP>
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d036      	beq.n	80093c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f000 f836 	bl	80093cc <USBD_GetLen>
 8009360:	4603      	mov	r3, r0
 8009362:	3301      	adds	r3, #1
 8009364:	b29b      	uxth	r3, r3
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	4413      	add	r3, r2
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7812      	ldrb	r2, [r2, #0]
 8009378:	701a      	strb	r2, [r3, #0]
  idx++;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	3301      	adds	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	2203      	movs	r2, #3
 8009388:	701a      	strb	r2, [r3, #0]
  idx++;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	3301      	adds	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009390:	e013      	b.n	80093ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	4413      	add	r3, r2
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	3301      	adds	r3, #1
 80093a2:	613b      	str	r3, [r7, #16]
    idx++;
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	3301      	adds	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	4413      	add	r3, r2
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	3301      	adds	r3, #1
 80093b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e7      	bne.n	8009392 <USBD_GetString+0x52>
 80093c2:	e000      	b.n	80093c6 <USBD_GetString+0x86>
    return;
 80093c4:	bf00      	nop
  }
}
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093dc:	e005      	b.n	80093ea <USBD_GetLen+0x1e>
  {
    len++;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	3301      	adds	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1f5      	bne.n	80093de <USBD_GetLen+0x12>
  }

  return len;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2202      	movs	r2, #2
 8009410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	2100      	movs	r1, #0
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fcc5 	bl	8009db6 <USBD_LL_Transmit>

  return USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	2100      	movs	r1, #0
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 fcb4 	bl	8009db6 <USBD_LL_Transmit>

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2203      	movs	r2, #3
 8009468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	2100      	movs	r1, #0
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 fcb8 	bl	8009df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	2100      	movs	r1, #0
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fca7 	bl	8009df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2204      	movs	r2, #4
 80094c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094c4:	2300      	movs	r3, #0
 80094c6:	2200      	movs	r2, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fc73 	bl	8009db6 <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2205      	movs	r2, #5
 80094e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ea:	2300      	movs	r3, #0
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fc81 	bl	8009df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009504:	2200      	movs	r2, #0
 8009506:	4912      	ldr	r1, [pc, #72]	; (8009550 <MX_USB_DEVICE_Init+0x50>)
 8009508:	4812      	ldr	r0, [pc, #72]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800950a:	f7fe fd01 	bl	8007f10 <USBD_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009514:	f7f8 fbc4 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009518:	490f      	ldr	r1, [pc, #60]	; (8009558 <MX_USB_DEVICE_Init+0x58>)
 800951a:	480e      	ldr	r0, [pc, #56]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800951c:	f7fe fd28 	bl	8007f70 <USBD_RegisterClass>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009526:	f7f8 fbbb 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800952a:	490c      	ldr	r1, [pc, #48]	; (800955c <MX_USB_DEVICE_Init+0x5c>)
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800952e:	f7fe fc5f 	bl	8007df0 <USBD_CDC_RegisterInterface>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009538:	f7f8 fbb2 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800953e:	f7fe fd4d 	bl	8007fdc <USBD_Start>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009548:	f7f8 fbaa 	bl	8001ca0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}
 8009550:	200000dc 	.word	0x200000dc
 8009554:	200003d4 	.word	0x200003d4
 8009558:	20000048 	.word	0x20000048
 800955c:	200000c8 	.word	0x200000c8

08009560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009564:	2200      	movs	r2, #0
 8009566:	4905      	ldr	r1, [pc, #20]	; (800957c <CDC_Init_FS+0x1c>)
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <CDC_Init_FS+0x20>)
 800956a:	f7fe fc5b 	bl	8007e24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800956e:	4905      	ldr	r1, [pc, #20]	; (8009584 <CDC_Init_FS+0x24>)
 8009570:	4803      	ldr	r0, [pc, #12]	; (8009580 <CDC_Init_FS+0x20>)
 8009572:	f7fe fc79 	bl	8007e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009578:	4618      	mov	r0, r3
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000eb0 	.word	0x20000eb0
 8009580:	200003d4 	.word	0x200003d4
 8009584:	200006b0 	.word	0x200006b0

08009588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800958c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800958e:	4618      	mov	r0, r3
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
 80095a4:	4613      	mov	r3, r2
 80095a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b23      	cmp	r3, #35	; 0x23
 80095ac:	d84a      	bhi.n	8009644 <CDC_Control_FS+0xac>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <CDC_Control_FS+0x1c>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	08009645 	.word	0x08009645
 80095b8:	08009645 	.word	0x08009645
 80095bc:	08009645 	.word	0x08009645
 80095c0:	08009645 	.word	0x08009645
 80095c4:	08009645 	.word	0x08009645
 80095c8:	08009645 	.word	0x08009645
 80095cc:	08009645 	.word	0x08009645
 80095d0:	08009645 	.word	0x08009645
 80095d4:	08009645 	.word	0x08009645
 80095d8:	08009645 	.word	0x08009645
 80095dc:	08009645 	.word	0x08009645
 80095e0:	08009645 	.word	0x08009645
 80095e4:	08009645 	.word	0x08009645
 80095e8:	08009645 	.word	0x08009645
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009645 	.word	0x08009645
 80095f4:	08009645 	.word	0x08009645
 80095f8:	08009645 	.word	0x08009645
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009645 	.word	0x08009645
 8009604:	08009645 	.word	0x08009645
 8009608:	08009645 	.word	0x08009645
 800960c:	08009645 	.word	0x08009645
 8009610:	08009645 	.word	0x08009645
 8009614:	08009645 	.word	0x08009645
 8009618:	08009645 	.word	0x08009645
 800961c:	08009645 	.word	0x08009645
 8009620:	08009645 	.word	0x08009645
 8009624:	08009645 	.word	0x08009645
 8009628:	08009645 	.word	0x08009645
 800962c:	08009645 	.word	0x08009645
 8009630:	08009645 	.word	0x08009645
 8009634:	08009645 	.word	0x08009645
 8009638:	08009645 	.word	0x08009645
 800963c:	08009645 	.word	0x08009645
 8009640:	08009645 	.word	0x08009645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009644:	bf00      	nop
  }

  return (USBD_OK);
 8009646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4805      	ldr	r0, [pc, #20]	; (8009678 <CDC_Receive_FS+0x24>)
 8009662:	f7fe fc01 	bl	8007e68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009666:	4804      	ldr	r0, [pc, #16]	; (8009678 <CDC_Receive_FS+0x24>)
 8009668:	f7fe fc1c 	bl	8007ea4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800966c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200003d4 	.word	0x200003d4

0800967c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800968e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009692:	4618      	mov	r0, r3
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2212      	movs	r2, #18
 80096b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096b2:	4b03      	ldr	r3, [pc, #12]	; (80096c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	200000f8 	.word	0x200000f8

080096c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2204      	movs	r2, #4
 80096d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096d6:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	2000010c 	.word	0x2000010c

080096e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d105      	bne.n	8009706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	4907      	ldr	r1, [pc, #28]	; (800971c <USBD_FS_ProductStrDescriptor+0x34>)
 80096fe:	4808      	ldr	r0, [pc, #32]	; (8009720 <USBD_FS_ProductStrDescriptor+0x38>)
 8009700:	f7ff fe1e 	bl	8009340 <USBD_GetString>
 8009704:	e004      	b.n	8009710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4904      	ldr	r1, [pc, #16]	; (800971c <USBD_FS_ProductStrDescriptor+0x34>)
 800970a:	4805      	ldr	r0, [pc, #20]	; (8009720 <USBD_FS_ProductStrDescriptor+0x38>)
 800970c:	f7ff fe18 	bl	8009340 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200016b0 	.word	0x200016b0
 8009720:	0800a89c 	.word	0x0800a89c

08009724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	4904      	ldr	r1, [pc, #16]	; (8009744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009734:	4804      	ldr	r0, [pc, #16]	; (8009748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009736:	f7ff fe03 	bl	8009340 <USBD_GetString>
  return USBD_StrDesc;
 800973a:	4b02      	ldr	r3, [pc, #8]	; (8009744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	200016b0 	.word	0x200016b0
 8009748:	0800a8b4 	.word	0x0800a8b4

0800974c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	221a      	movs	r2, #26
 800975c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800975e:	f000 f843 	bl	80097e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009762:	4b02      	ldr	r3, [pc, #8]	; (800976c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000110 	.word	0x20000110

08009770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	; (80097a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	; (80097a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009788:	f7ff fdda 	bl	8009340 <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	; (80097a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009794:	f7ff fdd4 	bl	8009340 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200016b0 	.word	0x200016b0
 80097a8:	0800a8c8 	.word	0x0800a8c8

080097ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	4907      	ldr	r1, [pc, #28]	; (80097e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097c2:	4808      	ldr	r0, [pc, #32]	; (80097e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097c4:	f7ff fdbc 	bl	8009340 <USBD_GetString>
 80097c8:	e004      	b.n	80097d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4904      	ldr	r1, [pc, #16]	; (80097e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ce:	4805      	ldr	r0, [pc, #20]	; (80097e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097d0:	f7ff fdb6 	bl	8009340 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200016b0 	.word	0x200016b0
 80097e4:	0800a8d4 	.word	0x0800a8d4

080097e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097ee:	4b0f      	ldr	r3, [pc, #60]	; (800982c <Get_SerialNum+0x44>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097f4:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <Get_SerialNum+0x48>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <Get_SerialNum+0x4c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800980e:	2208      	movs	r2, #8
 8009810:	4909      	ldr	r1, [pc, #36]	; (8009838 <Get_SerialNum+0x50>)
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f814 	bl	8009840 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009818:	2204      	movs	r2, #4
 800981a:	4908      	ldr	r1, [pc, #32]	; (800983c <Get_SerialNum+0x54>)
 800981c:	68b8      	ldr	r0, [r7, #8]
 800981e:	f000 f80f 	bl	8009840 <IntToUnicode>
  }
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	1fff7a10 	.word	0x1fff7a10
 8009830:	1fff7a14 	.word	0x1fff7a14
 8009834:	1fff7a18 	.word	0x1fff7a18
 8009838:	20000112 	.word	0x20000112
 800983c:	20000122 	.word	0x20000122

08009840 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009852:	2300      	movs	r3, #0
 8009854:	75fb      	strb	r3, [r7, #23]
 8009856:	e027      	b.n	80098a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0f1b      	lsrs	r3, r3, #28
 800985c:	2b09      	cmp	r3, #9
 800985e:	d80b      	bhi.n	8009878 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	0f1b      	lsrs	r3, r3, #28
 8009864:	b2da      	uxtb	r2, r3
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4619      	mov	r1, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	440b      	add	r3, r1
 8009870:	3230      	adds	r2, #48	; 0x30
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	701a      	strb	r2, [r3, #0]
 8009876:	e00a      	b.n	800988e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	0f1b      	lsrs	r3, r3, #28
 800987c:	b2da      	uxtb	r2, r3
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4619      	mov	r1, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	440b      	add	r3, r1
 8009888:	3237      	adds	r2, #55	; 0x37
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	3301      	adds	r3, #1
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4413      	add	r3, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	3301      	adds	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
 80098a8:	7dfa      	ldrb	r2, [r7, #23]
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d3d3      	bcc.n	8009858 <IntToUnicode+0x18>
  }
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
	...

080098c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	; 0x28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c8:	f107 0314 	add.w	r3, r7, #20
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	609a      	str	r2, [r3, #8]
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098e0:	d13a      	bne.n	8009958 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098e2:	2300      	movs	r3, #0
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 80098e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ea:	4a1d      	ldr	r2, [pc, #116]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 80098ec:	f043 0301 	orr.w	r3, r3, #1
 80098f0:	6313      	str	r3, [r2, #48]	; 0x30
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009904:	2302      	movs	r3, #2
 8009906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009908:	2300      	movs	r3, #0
 800990a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800990c:	2303      	movs	r3, #3
 800990e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009910:	230a      	movs	r3, #10
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	4619      	mov	r1, r3
 800991a:	4812      	ldr	r0, [pc, #72]	; (8009964 <HAL_PCD_MspInit+0xa4>)
 800991c:	f7f8 fe32 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009920:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 8009922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009924:	4a0e      	ldr	r2, [pc, #56]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 8009926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992a:	6353      	str	r3, [r2, #52]	; 0x34
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 8009932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009934:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 8009936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800993a:	6453      	str	r3, [r2, #68]	; 0x44
 800993c:	4b08      	ldr	r3, [pc, #32]	; (8009960 <HAL_PCD_MspInit+0xa0>)
 800993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009948:	2200      	movs	r2, #0
 800994a:	2100      	movs	r1, #0
 800994c:	2043      	movs	r0, #67	; 0x43
 800994e:	f7f8 fd50 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009952:	2043      	movs	r0, #67	; 0x43
 8009954:	f7f8 fd69 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009958:	bf00      	nop
 800995a:	3728      	adds	r7, #40	; 0x28
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40023800 	.word	0x40023800
 8009964:	40020000 	.word	0x40020000

08009968 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f7fe fb79 	bl	8008076 <USBD_LL_SetupStage>
}
 8009984:	bf00      	nop
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	00db      	lsls	r3, r3, #3
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7fe fbb3 	bl	8008120 <USBD_LL_DataOutStage>
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	3320      	adds	r3, #32
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	4619      	mov	r1, r3
 80099ea:	f7fe fc4c 	bl	8008286 <USBD_LL_DataInStage>
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fd86 	bl	8008516 <USBD_LL_SOF>
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	79db      	ldrb	r3, [r3, #7]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
 8009a2a:	e008      	b.n	8009a3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	79db      	ldrb	r3, [r3, #7]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d102      	bne.n	8009a3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
 8009a38:	e001      	b.n	8009a3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009a3a:	f7f8 f931 	bl	8001ca0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009a44:	7bfa      	ldrb	r2, [r7, #15]
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fd20 	bl	800848e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fcc8 	bl	80083ea <USBD_LL_Reset>
}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fd1b 	bl	80084ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7adb      	ldrb	r3, [r3, #11]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d005      	beq.n	8009aa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <HAL_PCD_SuspendCallback+0x48>)
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	4a03      	ldr	r2, [pc, #12]	; (8009aac <HAL_PCD_SuspendCallback+0x48>)
 8009a9e:	f043 0306 	orr.w	r3, r3, #6
 8009aa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	e000ed00 	.word	0xe000ed00

08009ab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe fd11 	bl	80084e6 <USBD_LL_Resume>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ade:	78fa      	ldrb	r2, [r7, #3]
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fd69 	bl	80085ba <USBD_LL_IsoOUTIncomplete>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fd25 	bl	8008556 <USBD_LL_IsoINIncomplete>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fd7b 	bl	800861e <USBD_LL_DevConnected>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fd78 	bl	8008634 <USBD_LL_DevDisconnected>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d13c      	bne.n	8009bd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b5c:	4a20      	ldr	r2, [pc, #128]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a1e      	ldr	r2, [pc, #120]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b74:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b76:	2204      	movs	r2, #4
 8009b78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b7a:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b80:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b88:	2202      	movs	r2, #2
 8009b8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b8c:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b98:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <USBD_LL_Init+0x94>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <USBD_LL_Init+0x94>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <USBD_LL_Init+0x94>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009baa:	480d      	ldr	r0, [pc, #52]	; (8009be0 <USBD_LL_Init+0x94>)
 8009bac:	f7f8 feb7 	bl	800291e <HAL_PCD_Init>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009bb6:	f7f8 f873 	bl	8001ca0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009bba:	2180      	movs	r1, #128	; 0x80
 8009bbc:	4808      	ldr	r0, [pc, #32]	; (8009be0 <USBD_LL_Init+0x94>)
 8009bbe:	f7fa f8e2 	bl	8003d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009bc2:	2240      	movs	r2, #64	; 0x40
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4806      	ldr	r0, [pc, #24]	; (8009be0 <USBD_LL_Init+0x94>)
 8009bc8:	f7fa f896 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bcc:	2280      	movs	r2, #128	; 0x80
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4803      	ldr	r0, [pc, #12]	; (8009be0 <USBD_LL_Init+0x94>)
 8009bd2:	f7fa f891 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200018b0 	.word	0x200018b0

08009be4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f8 ff9e 	bl	8002b3c <HAL_PCD_Start>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f942 	bl	8009e90 <USBD_Get_USB_Status>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	461a      	mov	r2, r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	70fb      	strb	r3, [r7, #3]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70bb      	strb	r3, [r7, #2]
 8009c30:	4613      	mov	r3, r2
 8009c32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c42:	78bb      	ldrb	r3, [r7, #2]
 8009c44:	883a      	ldrh	r2, [r7, #0]
 8009c46:	78f9      	ldrb	r1, [r7, #3]
 8009c48:	f7f9 fc72 	bl	8003530 <HAL_PCD_EP_Open>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f91c 	bl	8009e90 <USBD_Get_USB_Status>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f9 fcbb 	bl	8003600 <HAL_PCD_EP_Close>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f8fd 	bl	8009e90 <USBD_Get_USB_Status>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f9 fd73 	bl	80037ae <HAL_PCD_EP_SetStall>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f8de 	bl	8009e90 <USBD_Get_USB_Status>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7f9 fdb7 	bl	8003874 <HAL_PCD_EP_ClrStall>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f8bf 	bl	8009e90 <USBD_Get_USB_Status>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da0b      	bge.n	8009d54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d42:	68f9      	ldr	r1, [r7, #12]
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3316      	adds	r3, #22
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	e00b      	b.n	8009d6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	4413      	add	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009d6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d92:	78fa      	ldrb	r2, [r7, #3]
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f9 fba6 	bl	80034e8 <HAL_PCD_SetAddress>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f874 	bl	8009e90 <USBD_Get_USB_Status>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dd4:	7af9      	ldrb	r1, [r7, #11]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	f7f9 fcae 	bl	800373a <HAL_PCD_EP_Transmit>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f853 	bl	8009e90 <USBD_Get_USB_Status>
 8009dea:	4603      	mov	r3, r0
 8009dec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dee:	7dbb      	ldrb	r3, [r7, #22]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	460b      	mov	r3, r1
 8009e06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e16:	7af9      	ldrb	r1, [r7, #11]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	f7f9 fc3a 	bl	8003694 <HAL_PCD_EP_Receive>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f832 	bl	8009e90 <USBD_Get_USB_Status>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e30:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7f9 fc5a 	bl	800370a <HAL_PCD_EP_GetRxCount>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e68:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <USBD_static_malloc+0x18>)
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	20001d94 	.word	0x20001d94

08009e7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d817      	bhi.n	8009ed4 <USBD_Get_USB_Status+0x44>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USBD_Get_USB_Status+0x1c>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ec3 	.word	0x08009ec3
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009ecf 	.word	0x08009ecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	e00b      	b.n	8009eda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec6:	e008      	b.n	8009eda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ecc:	e005      	b.n	8009eda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed2:	e002      	b.n	8009eda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed8:	bf00      	nop
  }
  return usb_status;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <_vsiprintf_r>:
 8009ee8:	b500      	push	{lr}
 8009eea:	b09b      	sub	sp, #108	; 0x6c
 8009eec:	9100      	str	r1, [sp, #0]
 8009eee:	9104      	str	r1, [sp, #16]
 8009ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ef4:	9105      	str	r1, [sp, #20]
 8009ef6:	9102      	str	r1, [sp, #8]
 8009ef8:	4905      	ldr	r1, [pc, #20]	; (8009f10 <_vsiprintf_r+0x28>)
 8009efa:	9103      	str	r1, [sp, #12]
 8009efc:	4669      	mov	r1, sp
 8009efe:	f000 f999 	bl	800a234 <_svfiprintf_r>
 8009f02:	9b00      	ldr	r3, [sp, #0]
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	b01b      	add	sp, #108	; 0x6c
 8009f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f0e:	bf00      	nop
 8009f10:	ffff0208 	.word	0xffff0208

08009f14 <vsiprintf>:
 8009f14:	4613      	mov	r3, r2
 8009f16:	460a      	mov	r2, r1
 8009f18:	4601      	mov	r1, r0
 8009f1a:	4802      	ldr	r0, [pc, #8]	; (8009f24 <vsiprintf+0x10>)
 8009f1c:	6800      	ldr	r0, [r0, #0]
 8009f1e:	f7ff bfe3 	b.w	8009ee8 <_vsiprintf_r>
 8009f22:	bf00      	nop
 8009f24:	20000178 	.word	0x20000178

08009f28 <memset>:
 8009f28:	4402      	add	r2, r0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d100      	bne.n	8009f32 <memset+0xa>
 8009f30:	4770      	bx	lr
 8009f32:	f803 1b01 	strb.w	r1, [r3], #1
 8009f36:	e7f9      	b.n	8009f2c <memset+0x4>

08009f38 <__errno>:
 8009f38:	4b01      	ldr	r3, [pc, #4]	; (8009f40 <__errno+0x8>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20000178 	.word	0x20000178

08009f44 <__libc_init_array>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4d0d      	ldr	r5, [pc, #52]	; (8009f7c <__libc_init_array+0x38>)
 8009f48:	4c0d      	ldr	r4, [pc, #52]	; (8009f80 <__libc_init_array+0x3c>)
 8009f4a:	1b64      	subs	r4, r4, r5
 8009f4c:	10a4      	asrs	r4, r4, #2
 8009f4e:	2600      	movs	r6, #0
 8009f50:	42a6      	cmp	r6, r4
 8009f52:	d109      	bne.n	8009f68 <__libc_init_array+0x24>
 8009f54:	4d0b      	ldr	r5, [pc, #44]	; (8009f84 <__libc_init_array+0x40>)
 8009f56:	4c0c      	ldr	r4, [pc, #48]	; (8009f88 <__libc_init_array+0x44>)
 8009f58:	f000 fc6a 	bl	800a830 <_init>
 8009f5c:	1b64      	subs	r4, r4, r5
 8009f5e:	10a4      	asrs	r4, r4, #2
 8009f60:	2600      	movs	r6, #0
 8009f62:	42a6      	cmp	r6, r4
 8009f64:	d105      	bne.n	8009f72 <__libc_init_array+0x2e>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6c:	4798      	blx	r3
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7ee      	b.n	8009f50 <__libc_init_array+0xc>
 8009f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f76:	4798      	blx	r3
 8009f78:	3601      	adds	r6, #1
 8009f7a:	e7f2      	b.n	8009f62 <__libc_init_array+0x1e>
 8009f7c:	0800d444 	.word	0x0800d444
 8009f80:	0800d444 	.word	0x0800d444
 8009f84:	0800d444 	.word	0x0800d444
 8009f88:	0800d448 	.word	0x0800d448

08009f8c <__retarget_lock_acquire_recursive>:
 8009f8c:	4770      	bx	lr

08009f8e <__retarget_lock_release_recursive>:
 8009f8e:	4770      	bx	lr

08009f90 <_free_r>:
 8009f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f92:	2900      	cmp	r1, #0
 8009f94:	d044      	beq.n	800a020 <_free_r+0x90>
 8009f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f9a:	9001      	str	r0, [sp, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009fa2:	bfb8      	it	lt
 8009fa4:	18e4      	addlt	r4, r4, r3
 8009fa6:	f000 f8df 	bl	800a168 <__malloc_lock>
 8009faa:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <_free_r+0x94>)
 8009fac:	9801      	ldr	r0, [sp, #4]
 8009fae:	6813      	ldr	r3, [r2, #0]
 8009fb0:	b933      	cbnz	r3, 8009fc0 <_free_r+0x30>
 8009fb2:	6063      	str	r3, [r4, #4]
 8009fb4:	6014      	str	r4, [r2, #0]
 8009fb6:	b003      	add	sp, #12
 8009fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fbc:	f000 b8da 	b.w	800a174 <__malloc_unlock>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d908      	bls.n	8009fd6 <_free_r+0x46>
 8009fc4:	6825      	ldr	r5, [r4, #0]
 8009fc6:	1961      	adds	r1, r4, r5
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	bf01      	itttt	eq
 8009fcc:	6819      	ldreq	r1, [r3, #0]
 8009fce:	685b      	ldreq	r3, [r3, #4]
 8009fd0:	1949      	addeq	r1, r1, r5
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	e7ed      	b.n	8009fb2 <_free_r+0x22>
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	b10b      	cbz	r3, 8009fe0 <_free_r+0x50>
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d9fa      	bls.n	8009fd6 <_free_r+0x46>
 8009fe0:	6811      	ldr	r1, [r2, #0]
 8009fe2:	1855      	adds	r5, r2, r1
 8009fe4:	42a5      	cmp	r5, r4
 8009fe6:	d10b      	bne.n	800a000 <_free_r+0x70>
 8009fe8:	6824      	ldr	r4, [r4, #0]
 8009fea:	4421      	add	r1, r4
 8009fec:	1854      	adds	r4, r2, r1
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	6011      	str	r1, [r2, #0]
 8009ff2:	d1e0      	bne.n	8009fb6 <_free_r+0x26>
 8009ff4:	681c      	ldr	r4, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	6053      	str	r3, [r2, #4]
 8009ffa:	440c      	add	r4, r1
 8009ffc:	6014      	str	r4, [r2, #0]
 8009ffe:	e7da      	b.n	8009fb6 <_free_r+0x26>
 800a000:	d902      	bls.n	800a008 <_free_r+0x78>
 800a002:	230c      	movs	r3, #12
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	e7d6      	b.n	8009fb6 <_free_r+0x26>
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	1961      	adds	r1, r4, r5
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf04      	itt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	bf04      	itt	eq
 800a018:	1949      	addeq	r1, r1, r5
 800a01a:	6021      	streq	r1, [r4, #0]
 800a01c:	6054      	str	r4, [r2, #4]
 800a01e:	e7ca      	b.n	8009fb6 <_free_r+0x26>
 800a020:	b003      	add	sp, #12
 800a022:	bd30      	pop	{r4, r5, pc}
 800a024:	200020f4 	.word	0x200020f4

0800a028 <sbrk_aligned>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	4e0e      	ldr	r6, [pc, #56]	; (800a064 <sbrk_aligned+0x3c>)
 800a02c:	460c      	mov	r4, r1
 800a02e:	6831      	ldr	r1, [r6, #0]
 800a030:	4605      	mov	r5, r0
 800a032:	b911      	cbnz	r1, 800a03a <sbrk_aligned+0x12>
 800a034:	f000 fba6 	bl	800a784 <_sbrk_r>
 800a038:	6030      	str	r0, [r6, #0]
 800a03a:	4621      	mov	r1, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	f000 fba1 	bl	800a784 <_sbrk_r>
 800a042:	1c43      	adds	r3, r0, #1
 800a044:	d00a      	beq.n	800a05c <sbrk_aligned+0x34>
 800a046:	1cc4      	adds	r4, r0, #3
 800a048:	f024 0403 	bic.w	r4, r4, #3
 800a04c:	42a0      	cmp	r0, r4
 800a04e:	d007      	beq.n	800a060 <sbrk_aligned+0x38>
 800a050:	1a21      	subs	r1, r4, r0
 800a052:	4628      	mov	r0, r5
 800a054:	f000 fb96 	bl	800a784 <_sbrk_r>
 800a058:	3001      	adds	r0, #1
 800a05a:	d101      	bne.n	800a060 <sbrk_aligned+0x38>
 800a05c:	f04f 34ff 	mov.w	r4, #4294967295
 800a060:	4620      	mov	r0, r4
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	200020f8 	.word	0x200020f8

0800a068 <_malloc_r>:
 800a068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a06c:	1ccd      	adds	r5, r1, #3
 800a06e:	f025 0503 	bic.w	r5, r5, #3
 800a072:	3508      	adds	r5, #8
 800a074:	2d0c      	cmp	r5, #12
 800a076:	bf38      	it	cc
 800a078:	250c      	movcc	r5, #12
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	4607      	mov	r7, r0
 800a07e:	db01      	blt.n	800a084 <_malloc_r+0x1c>
 800a080:	42a9      	cmp	r1, r5
 800a082:	d905      	bls.n	800a090 <_malloc_r+0x28>
 800a084:	230c      	movs	r3, #12
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	2600      	movs	r6, #0
 800a08a:	4630      	mov	r0, r6
 800a08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a164 <_malloc_r+0xfc>
 800a094:	f000 f868 	bl	800a168 <__malloc_lock>
 800a098:	f8d8 3000 	ldr.w	r3, [r8]
 800a09c:	461c      	mov	r4, r3
 800a09e:	bb5c      	cbnz	r4, 800a0f8 <_malloc_r+0x90>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f7ff ffc0 	bl	800a028 <sbrk_aligned>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	d155      	bne.n	800a15a <_malloc_r+0xf2>
 800a0ae:	f8d8 4000 	ldr.w	r4, [r8]
 800a0b2:	4626      	mov	r6, r4
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	d145      	bne.n	800a144 <_malloc_r+0xdc>
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	d048      	beq.n	800a14e <_malloc_r+0xe6>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	eb04 0903 	add.w	r9, r4, r3
 800a0c6:	f000 fb5d 	bl	800a784 <_sbrk_r>
 800a0ca:	4581      	cmp	r9, r0
 800a0cc:	d13f      	bne.n	800a14e <_malloc_r+0xe6>
 800a0ce:	6821      	ldr	r1, [r4, #0]
 800a0d0:	1a6d      	subs	r5, r5, r1
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	f7ff ffa7 	bl	800a028 <sbrk_aligned>
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d037      	beq.n	800a14e <_malloc_r+0xe6>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	442b      	add	r3, r5
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d038      	beq.n	800a15e <_malloc_r+0xf6>
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	42a2      	cmp	r2, r4
 800a0f0:	d12b      	bne.n	800a14a <_malloc_r+0xe2>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	605a      	str	r2, [r3, #4]
 800a0f6:	e00f      	b.n	800a118 <_malloc_r+0xb0>
 800a0f8:	6822      	ldr	r2, [r4, #0]
 800a0fa:	1b52      	subs	r2, r2, r5
 800a0fc:	d41f      	bmi.n	800a13e <_malloc_r+0xd6>
 800a0fe:	2a0b      	cmp	r2, #11
 800a100:	d917      	bls.n	800a132 <_malloc_r+0xca>
 800a102:	1961      	adds	r1, r4, r5
 800a104:	42a3      	cmp	r3, r4
 800a106:	6025      	str	r5, [r4, #0]
 800a108:	bf18      	it	ne
 800a10a:	6059      	strne	r1, [r3, #4]
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	bf08      	it	eq
 800a110:	f8c8 1000 	streq.w	r1, [r8]
 800a114:	5162      	str	r2, [r4, r5]
 800a116:	604b      	str	r3, [r1, #4]
 800a118:	4638      	mov	r0, r7
 800a11a:	f104 060b 	add.w	r6, r4, #11
 800a11e:	f000 f829 	bl	800a174 <__malloc_unlock>
 800a122:	f026 0607 	bic.w	r6, r6, #7
 800a126:	1d23      	adds	r3, r4, #4
 800a128:	1af2      	subs	r2, r6, r3
 800a12a:	d0ae      	beq.n	800a08a <_malloc_r+0x22>
 800a12c:	1b9b      	subs	r3, r3, r6
 800a12e:	50a3      	str	r3, [r4, r2]
 800a130:	e7ab      	b.n	800a08a <_malloc_r+0x22>
 800a132:	42a3      	cmp	r3, r4
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	d1dd      	bne.n	800a0f4 <_malloc_r+0x8c>
 800a138:	f8c8 2000 	str.w	r2, [r8]
 800a13c:	e7ec      	b.n	800a118 <_malloc_r+0xb0>
 800a13e:	4623      	mov	r3, r4
 800a140:	6864      	ldr	r4, [r4, #4]
 800a142:	e7ac      	b.n	800a09e <_malloc_r+0x36>
 800a144:	4634      	mov	r4, r6
 800a146:	6876      	ldr	r6, [r6, #4]
 800a148:	e7b4      	b.n	800a0b4 <_malloc_r+0x4c>
 800a14a:	4613      	mov	r3, r2
 800a14c:	e7cc      	b.n	800a0e8 <_malloc_r+0x80>
 800a14e:	230c      	movs	r3, #12
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	4638      	mov	r0, r7
 800a154:	f000 f80e 	bl	800a174 <__malloc_unlock>
 800a158:	e797      	b.n	800a08a <_malloc_r+0x22>
 800a15a:	6025      	str	r5, [r4, #0]
 800a15c:	e7dc      	b.n	800a118 <_malloc_r+0xb0>
 800a15e:	605b      	str	r3, [r3, #4]
 800a160:	deff      	udf	#255	; 0xff
 800a162:	bf00      	nop
 800a164:	200020f4 	.word	0x200020f4

0800a168 <__malloc_lock>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__malloc_lock+0x8>)
 800a16a:	f7ff bf0f 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 800a16e:	bf00      	nop
 800a170:	200020f0 	.word	0x200020f0

0800a174 <__malloc_unlock>:
 800a174:	4801      	ldr	r0, [pc, #4]	; (800a17c <__malloc_unlock+0x8>)
 800a176:	f7ff bf0a 	b.w	8009f8e <__retarget_lock_release_recursive>
 800a17a:	bf00      	nop
 800a17c:	200020f0 	.word	0x200020f0

0800a180 <__ssputs_r>:
 800a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	688e      	ldr	r6, [r1, #8]
 800a186:	461f      	mov	r7, r3
 800a188:	42be      	cmp	r6, r7
 800a18a:	680b      	ldr	r3, [r1, #0]
 800a18c:	4682      	mov	sl, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	4690      	mov	r8, r2
 800a192:	d82c      	bhi.n	800a1ee <__ssputs_r+0x6e>
 800a194:	898a      	ldrh	r2, [r1, #12]
 800a196:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a19a:	d026      	beq.n	800a1ea <__ssputs_r+0x6a>
 800a19c:	6965      	ldr	r5, [r4, #20]
 800a19e:	6909      	ldr	r1, [r1, #16]
 800a1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1a4:	eba3 0901 	sub.w	r9, r3, r1
 800a1a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ac:	1c7b      	adds	r3, r7, #1
 800a1ae:	444b      	add	r3, r9
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf38      	it	cc
 800a1b6:	461d      	movcc	r5, r3
 800a1b8:	0553      	lsls	r3, r2, #21
 800a1ba:	d527      	bpl.n	800a20c <__ssputs_r+0x8c>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f7ff ff53 	bl	800a068 <_malloc_r>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b360      	cbz	r0, 800a220 <__ssputs_r+0xa0>
 800a1c6:	6921      	ldr	r1, [r4, #16]
 800a1c8:	464a      	mov	r2, r9
 800a1ca:	f000 faeb 	bl	800a7a4 <memcpy>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	6126      	str	r6, [r4, #16]
 800a1dc:	6165      	str	r5, [r4, #20]
 800a1de:	444e      	add	r6, r9
 800a1e0:	eba5 0509 	sub.w	r5, r5, r9
 800a1e4:	6026      	str	r6, [r4, #0]
 800a1e6:	60a5      	str	r5, [r4, #8]
 800a1e8:	463e      	mov	r6, r7
 800a1ea:	42be      	cmp	r6, r7
 800a1ec:	d900      	bls.n	800a1f0 <__ssputs_r+0x70>
 800a1ee:	463e      	mov	r6, r7
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	f000 faab 	bl	800a750 <memmove>
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	4433      	add	r3, r6
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	2000      	movs	r0, #0
 800a208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20c:	462a      	mov	r2, r5
 800a20e:	f000 fad7 	bl	800a7c0 <_realloc_r>
 800a212:	4606      	mov	r6, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d1e0      	bne.n	800a1da <__ssputs_r+0x5a>
 800a218:	6921      	ldr	r1, [r4, #16]
 800a21a:	4650      	mov	r0, sl
 800a21c:	f7ff feb8 	bl	8009f90 <_free_r>
 800a220:	230c      	movs	r3, #12
 800a222:	f8ca 3000 	str.w	r3, [sl]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295
 800a232:	e7e9      	b.n	800a208 <__ssputs_r+0x88>

0800a234 <_svfiprintf_r>:
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	4698      	mov	r8, r3
 800a23a:	898b      	ldrh	r3, [r1, #12]
 800a23c:	061b      	lsls	r3, r3, #24
 800a23e:	b09d      	sub	sp, #116	; 0x74
 800a240:	4607      	mov	r7, r0
 800a242:	460d      	mov	r5, r1
 800a244:	4614      	mov	r4, r2
 800a246:	d50e      	bpl.n	800a266 <_svfiprintf_r+0x32>
 800a248:	690b      	ldr	r3, [r1, #16]
 800a24a:	b963      	cbnz	r3, 800a266 <_svfiprintf_r+0x32>
 800a24c:	2140      	movs	r1, #64	; 0x40
 800a24e:	f7ff ff0b 	bl	800a068 <_malloc_r>
 800a252:	6028      	str	r0, [r5, #0]
 800a254:	6128      	str	r0, [r5, #16]
 800a256:	b920      	cbnz	r0, 800a262 <_svfiprintf_r+0x2e>
 800a258:	230c      	movs	r3, #12
 800a25a:	603b      	str	r3, [r7, #0]
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	e0d0      	b.n	800a404 <_svfiprintf_r+0x1d0>
 800a262:	2340      	movs	r3, #64	; 0x40
 800a264:	616b      	str	r3, [r5, #20]
 800a266:	2300      	movs	r3, #0
 800a268:	9309      	str	r3, [sp, #36]	; 0x24
 800a26a:	2320      	movs	r3, #32
 800a26c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a270:	f8cd 800c 	str.w	r8, [sp, #12]
 800a274:	2330      	movs	r3, #48	; 0x30
 800a276:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a41c <_svfiprintf_r+0x1e8>
 800a27a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a27e:	f04f 0901 	mov.w	r9, #1
 800a282:	4623      	mov	r3, r4
 800a284:	469a      	mov	sl, r3
 800a286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28a:	b10a      	cbz	r2, 800a290 <_svfiprintf_r+0x5c>
 800a28c:	2a25      	cmp	r2, #37	; 0x25
 800a28e:	d1f9      	bne.n	800a284 <_svfiprintf_r+0x50>
 800a290:	ebba 0b04 	subs.w	fp, sl, r4
 800a294:	d00b      	beq.n	800a2ae <_svfiprintf_r+0x7a>
 800a296:	465b      	mov	r3, fp
 800a298:	4622      	mov	r2, r4
 800a29a:	4629      	mov	r1, r5
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff ff6f 	bl	800a180 <__ssputs_r>
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f000 80a9 	beq.w	800a3fa <_svfiprintf_r+0x1c6>
 800a2a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2aa:	445a      	add	r2, fp
 800a2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80a1 	beq.w	800a3fa <_svfiprintf_r+0x1c6>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c2:	f10a 0a01 	add.w	sl, sl, #1
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	9307      	str	r3, [sp, #28]
 800a2ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a2d0:	4654      	mov	r4, sl
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d8:	4850      	ldr	r0, [pc, #320]	; (800a41c <_svfiprintf_r+0x1e8>)
 800a2da:	f7f5 ff79 	bl	80001d0 <memchr>
 800a2de:	9a04      	ldr	r2, [sp, #16]
 800a2e0:	b9d8      	cbnz	r0, 800a31a <_svfiprintf_r+0xe6>
 800a2e2:	06d0      	lsls	r0, r2, #27
 800a2e4:	bf44      	itt	mi
 800a2e6:	2320      	movmi	r3, #32
 800a2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ec:	0711      	lsls	r1, r2, #28
 800a2ee:	bf44      	itt	mi
 800a2f0:	232b      	movmi	r3, #43	; 0x2b
 800a2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fc:	d015      	beq.n	800a32a <_svfiprintf_r+0xf6>
 800a2fe:	9a07      	ldr	r2, [sp, #28]
 800a300:	4654      	mov	r4, sl
 800a302:	2000      	movs	r0, #0
 800a304:	f04f 0c0a 	mov.w	ip, #10
 800a308:	4621      	mov	r1, r4
 800a30a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a30e:	3b30      	subs	r3, #48	; 0x30
 800a310:	2b09      	cmp	r3, #9
 800a312:	d94d      	bls.n	800a3b0 <_svfiprintf_r+0x17c>
 800a314:	b1b0      	cbz	r0, 800a344 <_svfiprintf_r+0x110>
 800a316:	9207      	str	r2, [sp, #28]
 800a318:	e014      	b.n	800a344 <_svfiprintf_r+0x110>
 800a31a:	eba0 0308 	sub.w	r3, r0, r8
 800a31e:	fa09 f303 	lsl.w	r3, r9, r3
 800a322:	4313      	orrs	r3, r2
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	46a2      	mov	sl, r4
 800a328:	e7d2      	b.n	800a2d0 <_svfiprintf_r+0x9c>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	1d19      	adds	r1, r3, #4
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	9103      	str	r1, [sp, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	bfbb      	ittet	lt
 800a336:	425b      	neglt	r3, r3
 800a338:	f042 0202 	orrlt.w	r2, r2, #2
 800a33c:	9307      	strge	r3, [sp, #28]
 800a33e:	9307      	strlt	r3, [sp, #28]
 800a340:	bfb8      	it	lt
 800a342:	9204      	strlt	r2, [sp, #16]
 800a344:	7823      	ldrb	r3, [r4, #0]
 800a346:	2b2e      	cmp	r3, #46	; 0x2e
 800a348:	d10c      	bne.n	800a364 <_svfiprintf_r+0x130>
 800a34a:	7863      	ldrb	r3, [r4, #1]
 800a34c:	2b2a      	cmp	r3, #42	; 0x2a
 800a34e:	d134      	bne.n	800a3ba <_svfiprintf_r+0x186>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	1d1a      	adds	r2, r3, #4
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	9203      	str	r2, [sp, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bfb8      	it	lt
 800a35c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a360:	3402      	adds	r4, #2
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a42c <_svfiprintf_r+0x1f8>
 800a368:	7821      	ldrb	r1, [r4, #0]
 800a36a:	2203      	movs	r2, #3
 800a36c:	4650      	mov	r0, sl
 800a36e:	f7f5 ff2f 	bl	80001d0 <memchr>
 800a372:	b138      	cbz	r0, 800a384 <_svfiprintf_r+0x150>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	eba0 000a 	sub.w	r0, r0, sl
 800a37a:	2240      	movs	r2, #64	; 0x40
 800a37c:	4082      	lsls	r2, r0
 800a37e:	4313      	orrs	r3, r2
 800a380:	3401      	adds	r4, #1
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	4825      	ldr	r0, [pc, #148]	; (800a420 <_svfiprintf_r+0x1ec>)
 800a38a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a38e:	2206      	movs	r2, #6
 800a390:	f7f5 ff1e 	bl	80001d0 <memchr>
 800a394:	2800      	cmp	r0, #0
 800a396:	d038      	beq.n	800a40a <_svfiprintf_r+0x1d6>
 800a398:	4b22      	ldr	r3, [pc, #136]	; (800a424 <_svfiprintf_r+0x1f0>)
 800a39a:	bb1b      	cbnz	r3, 800a3e4 <_svfiprintf_r+0x1b0>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	3307      	adds	r3, #7
 800a3a0:	f023 0307 	bic.w	r3, r3, #7
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3aa:	4433      	add	r3, r6
 800a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ae:	e768      	b.n	800a282 <_svfiprintf_r+0x4e>
 800a3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	e7a6      	b.n	800a308 <_svfiprintf_r+0xd4>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3cc:	3a30      	subs	r2, #48	; 0x30
 800a3ce:	2a09      	cmp	r2, #9
 800a3d0:	d903      	bls.n	800a3da <_svfiprintf_r+0x1a6>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0c6      	beq.n	800a364 <_svfiprintf_r+0x130>
 800a3d6:	9105      	str	r1, [sp, #20]
 800a3d8:	e7c4      	b.n	800a364 <_svfiprintf_r+0x130>
 800a3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3de:	4604      	mov	r4, r0
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e7f0      	b.n	800a3c6 <_svfiprintf_r+0x192>
 800a3e4:	ab03      	add	r3, sp, #12
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <_svfiprintf_r+0x1f4>)
 800a3ec:	a904      	add	r1, sp, #16
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f3af 8000 	nop.w
 800a3f4:	1c42      	adds	r2, r0, #1
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	d1d6      	bne.n	800a3a8 <_svfiprintf_r+0x174>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	065b      	lsls	r3, r3, #25
 800a3fe:	f53f af2d 	bmi.w	800a25c <_svfiprintf_r+0x28>
 800a402:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a404:	b01d      	add	sp, #116	; 0x74
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	462a      	mov	r2, r5
 800a410:	4b05      	ldr	r3, [pc, #20]	; (800a428 <_svfiprintf_r+0x1f4>)
 800a412:	a904      	add	r1, sp, #16
 800a414:	4638      	mov	r0, r7
 800a416:	f000 f879 	bl	800a50c <_printf_i>
 800a41a:	e7eb      	b.n	800a3f4 <_svfiprintf_r+0x1c0>
 800a41c:	0800d408 	.word	0x0800d408
 800a420:	0800d412 	.word	0x0800d412
 800a424:	00000000 	.word	0x00000000
 800a428:	0800a181 	.word	0x0800a181
 800a42c:	0800d40e 	.word	0x0800d40e

0800a430 <_printf_common>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	4616      	mov	r6, r2
 800a436:	4699      	mov	r9, r3
 800a438:	688a      	ldr	r2, [r1, #8]
 800a43a:	690b      	ldr	r3, [r1, #16]
 800a43c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a440:	4293      	cmp	r3, r2
 800a442:	bfb8      	it	lt
 800a444:	4613      	movlt	r3, r2
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a44c:	4607      	mov	r7, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b10a      	cbz	r2, 800a456 <_printf_common+0x26>
 800a452:	3301      	adds	r3, #1
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	0699      	lsls	r1, r3, #26
 800a45a:	bf42      	ittt	mi
 800a45c:	6833      	ldrmi	r3, [r6, #0]
 800a45e:	3302      	addmi	r3, #2
 800a460:	6033      	strmi	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	f015 0506 	ands.w	r5, r5, #6
 800a468:	d106      	bne.n	800a478 <_printf_common+0x48>
 800a46a:	f104 0a19 	add.w	sl, r4, #25
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	6832      	ldr	r2, [r6, #0]
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	42ab      	cmp	r3, r5
 800a476:	dc26      	bgt.n	800a4c6 <_printf_common+0x96>
 800a478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a47c:	1e13      	subs	r3, r2, #0
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	bf18      	it	ne
 800a482:	2301      	movne	r3, #1
 800a484:	0692      	lsls	r2, r2, #26
 800a486:	d42b      	bmi.n	800a4e0 <_printf_common+0xb0>
 800a488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a48c:	4649      	mov	r1, r9
 800a48e:	4638      	mov	r0, r7
 800a490:	47c0      	blx	r8
 800a492:	3001      	adds	r0, #1
 800a494:	d01e      	beq.n	800a4d4 <_printf_common+0xa4>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	f003 0306 	and.w	r3, r3, #6
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	bf02      	ittt	eq
 800a4a2:	68e5      	ldreq	r5, [r4, #12]
 800a4a4:	6833      	ldreq	r3, [r6, #0]
 800a4a6:	1aed      	subeq	r5, r5, r3
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	bf0c      	ite	eq
 800a4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b0:	2500      	movne	r5, #0
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bfc4      	itt	gt
 800a4b6:	1a9b      	subgt	r3, r3, r2
 800a4b8:	18ed      	addgt	r5, r5, r3
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	341a      	adds	r4, #26
 800a4be:	42b5      	cmp	r5, r6
 800a4c0:	d11a      	bne.n	800a4f8 <_printf_common+0xc8>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e008      	b.n	800a4d8 <_printf_common+0xa8>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	47c0      	blx	r8
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d103      	bne.n	800a4dc <_printf_common+0xac>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4dc:	3501      	adds	r5, #1
 800a4de:	e7c6      	b.n	800a46e <_printf_common+0x3e>
 800a4e0:	18e1      	adds	r1, r4, r3
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	2030      	movs	r0, #48	; 0x30
 800a4e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4ea:	4422      	add	r2, r4
 800a4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	e7c7      	b.n	800a488 <_printf_common+0x58>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c0      	blx	r8
 800a502:	3001      	adds	r0, #1
 800a504:	d0e6      	beq.n	800a4d4 <_printf_common+0xa4>
 800a506:	3601      	adds	r6, #1
 800a508:	e7d9      	b.n	800a4be <_printf_common+0x8e>
	...

0800a50c <_printf_i>:
 800a50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	7e0f      	ldrb	r7, [r1, #24]
 800a512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a514:	2f78      	cmp	r7, #120	; 0x78
 800a516:	4691      	mov	r9, r2
 800a518:	4680      	mov	r8, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	469a      	mov	sl, r3
 800a51e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a522:	d807      	bhi.n	800a534 <_printf_i+0x28>
 800a524:	2f62      	cmp	r7, #98	; 0x62
 800a526:	d80a      	bhi.n	800a53e <_printf_i+0x32>
 800a528:	2f00      	cmp	r7, #0
 800a52a:	f000 80d4 	beq.w	800a6d6 <_printf_i+0x1ca>
 800a52e:	2f58      	cmp	r7, #88	; 0x58
 800a530:	f000 80c0 	beq.w	800a6b4 <_printf_i+0x1a8>
 800a534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a53c:	e03a      	b.n	800a5b4 <_printf_i+0xa8>
 800a53e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a542:	2b15      	cmp	r3, #21
 800a544:	d8f6      	bhi.n	800a534 <_printf_i+0x28>
 800a546:	a101      	add	r1, pc, #4	; (adr r1, 800a54c <_printf_i+0x40>)
 800a548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a535 	.word	0x0800a535
 800a558:	0800a535 	.word	0x0800a535
 800a55c:	0800a535 	.word	0x0800a535
 800a560:	0800a535 	.word	0x0800a535
 800a564:	0800a5b9 	.word	0x0800a5b9
 800a568:	0800a535 	.word	0x0800a535
 800a56c:	0800a535 	.word	0x0800a535
 800a570:	0800a535 	.word	0x0800a535
 800a574:	0800a535 	.word	0x0800a535
 800a578:	0800a6bd 	.word	0x0800a6bd
 800a57c:	0800a5e5 	.word	0x0800a5e5
 800a580:	0800a677 	.word	0x0800a677
 800a584:	0800a535 	.word	0x0800a535
 800a588:	0800a535 	.word	0x0800a535
 800a58c:	0800a6df 	.word	0x0800a6df
 800a590:	0800a535 	.word	0x0800a535
 800a594:	0800a5e5 	.word	0x0800a5e5
 800a598:	0800a535 	.word	0x0800a535
 800a59c:	0800a535 	.word	0x0800a535
 800a5a0:	0800a67f 	.word	0x0800a67f
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	602a      	str	r2, [r5, #0]
 800a5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e09f      	b.n	800a6f8 <_printf_i+0x1ec>
 800a5b8:	6820      	ldr	r0, [r4, #0]
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	0607      	lsls	r7, r0, #24
 800a5be:	f103 0104 	add.w	r1, r3, #4
 800a5c2:	6029      	str	r1, [r5, #0]
 800a5c4:	d501      	bpl.n	800a5ca <_printf_i+0xbe>
 800a5c6:	681e      	ldr	r6, [r3, #0]
 800a5c8:	e003      	b.n	800a5d2 <_printf_i+0xc6>
 800a5ca:	0646      	lsls	r6, r0, #25
 800a5cc:	d5fb      	bpl.n	800a5c6 <_printf_i+0xba>
 800a5ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5d2:	2e00      	cmp	r6, #0
 800a5d4:	da03      	bge.n	800a5de <_printf_i+0xd2>
 800a5d6:	232d      	movs	r3, #45	; 0x2d
 800a5d8:	4276      	negs	r6, r6
 800a5da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5de:	485a      	ldr	r0, [pc, #360]	; (800a748 <_printf_i+0x23c>)
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	e012      	b.n	800a60a <_printf_i+0xfe>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	6820      	ldr	r0, [r4, #0]
 800a5e8:	1d19      	adds	r1, r3, #4
 800a5ea:	6029      	str	r1, [r5, #0]
 800a5ec:	0605      	lsls	r5, r0, #24
 800a5ee:	d501      	bpl.n	800a5f4 <_printf_i+0xe8>
 800a5f0:	681e      	ldr	r6, [r3, #0]
 800a5f2:	e002      	b.n	800a5fa <_printf_i+0xee>
 800a5f4:	0641      	lsls	r1, r0, #25
 800a5f6:	d5fb      	bpl.n	800a5f0 <_printf_i+0xe4>
 800a5f8:	881e      	ldrh	r6, [r3, #0]
 800a5fa:	4853      	ldr	r0, [pc, #332]	; (800a748 <_printf_i+0x23c>)
 800a5fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a5fe:	bf0c      	ite	eq
 800a600:	2308      	moveq	r3, #8
 800a602:	230a      	movne	r3, #10
 800a604:	2100      	movs	r1, #0
 800a606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a60a:	6865      	ldr	r5, [r4, #4]
 800a60c:	60a5      	str	r5, [r4, #8]
 800a60e:	2d00      	cmp	r5, #0
 800a610:	bfa2      	ittt	ge
 800a612:	6821      	ldrge	r1, [r4, #0]
 800a614:	f021 0104 	bicge.w	r1, r1, #4
 800a618:	6021      	strge	r1, [r4, #0]
 800a61a:	b90e      	cbnz	r6, 800a620 <_printf_i+0x114>
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	d04b      	beq.n	800a6b8 <_printf_i+0x1ac>
 800a620:	4615      	mov	r5, r2
 800a622:	fbb6 f1f3 	udiv	r1, r6, r3
 800a626:	fb03 6711 	mls	r7, r3, r1, r6
 800a62a:	5dc7      	ldrb	r7, [r0, r7]
 800a62c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a630:	4637      	mov	r7, r6
 800a632:	42bb      	cmp	r3, r7
 800a634:	460e      	mov	r6, r1
 800a636:	d9f4      	bls.n	800a622 <_printf_i+0x116>
 800a638:	2b08      	cmp	r3, #8
 800a63a:	d10b      	bne.n	800a654 <_printf_i+0x148>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07de      	lsls	r6, r3, #31
 800a640:	d508      	bpl.n	800a654 <_printf_i+0x148>
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	4299      	cmp	r1, r3
 800a648:	bfde      	ittt	le
 800a64a:	2330      	movle	r3, #48	; 0x30
 800a64c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a650:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a654:	1b52      	subs	r2, r2, r5
 800a656:	6122      	str	r2, [r4, #16]
 800a658:	f8cd a000 	str.w	sl, [sp]
 800a65c:	464b      	mov	r3, r9
 800a65e:	aa03      	add	r2, sp, #12
 800a660:	4621      	mov	r1, r4
 800a662:	4640      	mov	r0, r8
 800a664:	f7ff fee4 	bl	800a430 <_printf_common>
 800a668:	3001      	adds	r0, #1
 800a66a:	d14a      	bne.n	800a702 <_printf_i+0x1f6>
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	b004      	add	sp, #16
 800a672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	f043 0320 	orr.w	r3, r3, #32
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	4833      	ldr	r0, [pc, #204]	; (800a74c <_printf_i+0x240>)
 800a680:	2778      	movs	r7, #120	; 0x78
 800a682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	6829      	ldr	r1, [r5, #0]
 800a68a:	061f      	lsls	r7, r3, #24
 800a68c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a690:	d402      	bmi.n	800a698 <_printf_i+0x18c>
 800a692:	065f      	lsls	r7, r3, #25
 800a694:	bf48      	it	mi
 800a696:	b2b6      	uxthmi	r6, r6
 800a698:	07df      	lsls	r7, r3, #31
 800a69a:	bf48      	it	mi
 800a69c:	f043 0320 	orrmi.w	r3, r3, #32
 800a6a0:	6029      	str	r1, [r5, #0]
 800a6a2:	bf48      	it	mi
 800a6a4:	6023      	strmi	r3, [r4, #0]
 800a6a6:	b91e      	cbnz	r6, 800a6b0 <_printf_i+0x1a4>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	f023 0320 	bic.w	r3, r3, #32
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	e7a7      	b.n	800a604 <_printf_i+0xf8>
 800a6b4:	4824      	ldr	r0, [pc, #144]	; (800a748 <_printf_i+0x23c>)
 800a6b6:	e7e4      	b.n	800a682 <_printf_i+0x176>
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	e7bd      	b.n	800a638 <_printf_i+0x12c>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	6826      	ldr	r6, [r4, #0]
 800a6c0:	6961      	ldr	r1, [r4, #20]
 800a6c2:	1d18      	adds	r0, r3, #4
 800a6c4:	6028      	str	r0, [r5, #0]
 800a6c6:	0635      	lsls	r5, r6, #24
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	d501      	bpl.n	800a6d0 <_printf_i+0x1c4>
 800a6cc:	6019      	str	r1, [r3, #0]
 800a6ce:	e002      	b.n	800a6d6 <_printf_i+0x1ca>
 800a6d0:	0670      	lsls	r0, r6, #25
 800a6d2:	d5fb      	bpl.n	800a6cc <_printf_i+0x1c0>
 800a6d4:	8019      	strh	r1, [r3, #0]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	4615      	mov	r5, r2
 800a6dc:	e7bc      	b.n	800a658 <_printf_i+0x14c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	602a      	str	r2, [r5, #0]
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	6862      	ldr	r2, [r4, #4]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f7f5 fd70 	bl	80001d0 <memchr>
 800a6f0:	b108      	cbz	r0, 800a6f6 <_printf_i+0x1ea>
 800a6f2:	1b40      	subs	r0, r0, r5
 800a6f4:	6060      	str	r0, [r4, #4]
 800a6f6:	6863      	ldr	r3, [r4, #4]
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a700:	e7aa      	b.n	800a658 <_printf_i+0x14c>
 800a702:	6923      	ldr	r3, [r4, #16]
 800a704:	462a      	mov	r2, r5
 800a706:	4649      	mov	r1, r9
 800a708:	4640      	mov	r0, r8
 800a70a:	47d0      	blx	sl
 800a70c:	3001      	adds	r0, #1
 800a70e:	d0ad      	beq.n	800a66c <_printf_i+0x160>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	079b      	lsls	r3, r3, #30
 800a714:	d413      	bmi.n	800a73e <_printf_i+0x232>
 800a716:	68e0      	ldr	r0, [r4, #12]
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	4298      	cmp	r0, r3
 800a71c:	bfb8      	it	lt
 800a71e:	4618      	movlt	r0, r3
 800a720:	e7a6      	b.n	800a670 <_printf_i+0x164>
 800a722:	2301      	movs	r3, #1
 800a724:	4632      	mov	r2, r6
 800a726:	4649      	mov	r1, r9
 800a728:	4640      	mov	r0, r8
 800a72a:	47d0      	blx	sl
 800a72c:	3001      	adds	r0, #1
 800a72e:	d09d      	beq.n	800a66c <_printf_i+0x160>
 800a730:	3501      	adds	r5, #1
 800a732:	68e3      	ldr	r3, [r4, #12]
 800a734:	9903      	ldr	r1, [sp, #12]
 800a736:	1a5b      	subs	r3, r3, r1
 800a738:	42ab      	cmp	r3, r5
 800a73a:	dcf2      	bgt.n	800a722 <_printf_i+0x216>
 800a73c:	e7eb      	b.n	800a716 <_printf_i+0x20a>
 800a73e:	2500      	movs	r5, #0
 800a740:	f104 0619 	add.w	r6, r4, #25
 800a744:	e7f5      	b.n	800a732 <_printf_i+0x226>
 800a746:	bf00      	nop
 800a748:	0800d419 	.word	0x0800d419
 800a74c:	0800d42a 	.word	0x0800d42a

0800a750 <memmove>:
 800a750:	4288      	cmp	r0, r1
 800a752:	b510      	push	{r4, lr}
 800a754:	eb01 0402 	add.w	r4, r1, r2
 800a758:	d902      	bls.n	800a760 <memmove+0x10>
 800a75a:	4284      	cmp	r4, r0
 800a75c:	4623      	mov	r3, r4
 800a75e:	d807      	bhi.n	800a770 <memmove+0x20>
 800a760:	1e43      	subs	r3, r0, #1
 800a762:	42a1      	cmp	r1, r4
 800a764:	d008      	beq.n	800a778 <memmove+0x28>
 800a766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a76e:	e7f8      	b.n	800a762 <memmove+0x12>
 800a770:	4402      	add	r2, r0
 800a772:	4601      	mov	r1, r0
 800a774:	428a      	cmp	r2, r1
 800a776:	d100      	bne.n	800a77a <memmove+0x2a>
 800a778:	bd10      	pop	{r4, pc}
 800a77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a782:	e7f7      	b.n	800a774 <memmove+0x24>

0800a784 <_sbrk_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d06      	ldr	r5, [pc, #24]	; (800a7a0 <_sbrk_r+0x1c>)
 800a788:	2300      	movs	r3, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f7 fbd2 	bl	8001f38 <_sbrk>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_sbrk_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_sbrk_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	200020ec 	.word	0x200020ec

0800a7a4 <memcpy>:
 800a7a4:	440a      	add	r2, r1
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ac:	d100      	bne.n	800a7b0 <memcpy+0xc>
 800a7ae:	4770      	bx	lr
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ba:	4291      	cmp	r1, r2
 800a7bc:	d1f9      	bne.n	800a7b2 <memcpy+0xe>
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <_realloc_r>:
 800a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4614      	mov	r4, r2
 800a7c8:	460e      	mov	r6, r1
 800a7ca:	b921      	cbnz	r1, 800a7d6 <_realloc_r+0x16>
 800a7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	f7ff bc49 	b.w	800a068 <_malloc_r>
 800a7d6:	b92a      	cbnz	r2, 800a7e4 <_realloc_r+0x24>
 800a7d8:	f7ff fbda 	bl	8009f90 <_free_r>
 800a7dc:	4625      	mov	r5, r4
 800a7de:	4628      	mov	r0, r5
 800a7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e4:	f000 f81b 	bl	800a81e <_malloc_usable_size_r>
 800a7e8:	4284      	cmp	r4, r0
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	d802      	bhi.n	800a7f4 <_realloc_r+0x34>
 800a7ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7f2:	d812      	bhi.n	800a81a <_realloc_r+0x5a>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff fc36 	bl	800a068 <_malloc_r>
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0ed      	beq.n	800a7de <_realloc_r+0x1e>
 800a802:	42bc      	cmp	r4, r7
 800a804:	4622      	mov	r2, r4
 800a806:	4631      	mov	r1, r6
 800a808:	bf28      	it	cs
 800a80a:	463a      	movcs	r2, r7
 800a80c:	f7ff ffca 	bl	800a7a4 <memcpy>
 800a810:	4631      	mov	r1, r6
 800a812:	4640      	mov	r0, r8
 800a814:	f7ff fbbc 	bl	8009f90 <_free_r>
 800a818:	e7e1      	b.n	800a7de <_realloc_r+0x1e>
 800a81a:	4635      	mov	r5, r6
 800a81c:	e7df      	b.n	800a7de <_realloc_r+0x1e>

0800a81e <_malloc_usable_size_r>:
 800a81e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a822:	1f18      	subs	r0, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfbc      	itt	lt
 800a828:	580b      	ldrlt	r3, [r1, r0]
 800a82a:	18c0      	addlt	r0, r0, r3
 800a82c:	4770      	bx	lr
	...

0800a830 <_init>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	bf00      	nop
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr

0800a83c <_fini>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr
