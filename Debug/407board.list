
407board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf98  0800cf98  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfa0  0800cfa0  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfa4  0800cfa4  0001cfa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800cfa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00001f80  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002108  20002108  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b740  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c8e  00000000  00000000  0003b93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  000405d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001069  00000000  00000000  00041bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000285a9  00000000  00000000  00042c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f8c7  00000000  00000000  0006b1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6c12  00000000  00000000  0008aa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ce8  00000000  00000000  001616ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00167394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a370 	.word	0x0800a370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800a370 	.word	0x0800a370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_ZL7TP_Readv>:
volatile float X_MAGNITUDE = 0x433F;
volatile float Y_MAGNITUDE = 0x436E00F;

//Internal Touchpad command, do not call directly
static uint16_t TP_Read(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000572:	2310      	movs	r3, #16
 8000574:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	80bb      	strh	r3, [r7, #4]

    while(i)
 800057a:	e021      	b.n	80005c0 <_ZL7TP_Readv+0x54>
    {
        value <<= 1;
 800057c:	88bb      	ldrh	r3, [r7, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <_ZL7TP_Readv+0x64>)
 800058a:	f001 ff4f 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <_ZL7TP_Readv+0x64>)
 8000596:	f001 ff49 	bl	800242c <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN))
 800059a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <_ZL7TP_Readv+0x64>)
 80005a0:	f001 ff2c 	bl	80023fc <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf14      	ite	ne
 80005aa:	2301      	movne	r3, #1
 80005ac:	2300      	moveq	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <_ZL7TP_Readv+0x4e>
        {
            ++value;
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	80bb      	strh	r3, [r7, #4]
        }

        --i;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	3b01      	subs	r3, #1
 80005be:	71fb      	strb	r3, [r7, #7]
    while(i)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1da      	bne.n	800057c <_ZL7TP_Readv+0x10>
    }

    return value;
 80005c6:	88bb      	ldrh	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400

080005d4 <_ZL8TP_Writeh>:

//Internal Touchpad command, do not call directly
static void TP_Write(uint8_t value)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80005de:	2308      	movs	r3, #8
 80005e0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <_ZL8TP_Writeh+0x64>)
 80005ea:	f001 ff1f 	bl	800242c <HAL_GPIO_WritePin>
	
    while(i)
 80005ee:	e01a      	b.n	8000626 <_ZL8TP_Writeh+0x52>
    {

		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET );
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	09db      	lsrs	r3, r3, #7
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480e      	ldr	r0, [pc, #56]	; (8000638 <_ZL8TP_Writeh+0x64>)
 80005fe:	f001 ff15 	bl	800242c <HAL_GPIO_WritePin>

        value <<= 1;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET); 	//  CLK pulse
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <_ZL8TP_Writeh+0x64>)
 8000610:	f001 ff0c 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <_ZL8TP_Writeh+0x64>)
 800061c:	f001 ff06 	bl	800242c <HAL_GPIO_WritePin>
        --i;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3b01      	subs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
    while(i)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e1      	bne.n	80005f0 <_ZL8TP_Writeh+0x1c>
    }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400

0800063c <_Z19TP_Read_CoordinatesPt>:



//Read coordinates of touchscreen press. [0] = X, [1] = Y, [2] = RawX, [3] = RawY
uint8_t TP_Read_Coordinates(uint16_t Coordinates[])
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);			// CLK   - High
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	485b      	ldr	r0, [pc, #364]	; (80007b8 <_Z19TP_Read_CoordinatesPt+0x17c>)
 800064c:	f001 feee 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);			// MOSI  - High
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000656:	4858      	ldr	r0, [pc, #352]	; (80007b8 <_Z19TP_Read_CoordinatesPt+0x17c>)
 8000658:	f001 fee8 	bl	800242c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);				// CS - High (inactively)
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	4855      	ldr	r0, [pc, #340]	; (80007b8 <_Z19TP_Read_CoordinatesPt+0x17c>)
 8000664:	f001 fee2 	bl	800242c <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
    uint16_t rawx, rawy = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]
    uint32_t calculating_x, calculating_y = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = N_OF_POSITION_SAMPLES;
 8000674:	2340      	movs	r3, #64	; 0x40
 8000676:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET); 			// CS - active
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000682:	484d      	ldr	r0, [pc, #308]	; (80007b8 <_Z19TP_Read_CoordinatesPt+0x17c>)
 8000684:	f001 fed2 	bl	800242c <HAL_GPIO_WritePin>

	
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 8000688:	e023      	b.n	80006d2 <_Z19TP_Read_CoordinatesPt+0x96>
    {			
        TP_Write(CMD_RDY);
 800068a:	20d0      	movs	r0, #208	; 0xd0
 800068c:	f7ff ffa2 	bl	80005d4 <_ZL8TP_Writeh>

				rawy = TP_Read();	
 8000690:	f7ff ff6c 	bl	800056c <_ZL7TP_Readv>
 8000694:	4603      	mov	r3, r0
 8000696:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	6a3a      	ldr	r2, [r7, #32]
 800069c:	4413      	add	r3, r2
 800069e:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	4413      	add	r3, r2
 80006a6:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80006a8:	2090      	movs	r0, #144	; 0x90
 80006aa:	f7ff ff93 	bl	80005d4 <_ZL8TP_Writeh>
				rawx = TP_Read();
 80006ae:	f7ff ff5d 	bl	800056c <_ZL7TP_Readv>
 80006b2:	4603      	mov	r3, r0
 80006b4:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80006b6:	89bb      	ldrh	r3, [r7, #12]
 80006b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ba:	4413      	add	r3, r2
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80006be:	89bb      	ldrh	r3, [r7, #12]
 80006c0:	69fa      	ldr	r2, [r7, #28]
 80006c2:	4413      	add	r3, r2
 80006c4:	61fb      	str	r3, [r7, #28]
        samples--;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	3301      	adds	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
    while((samples)&&( ! HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN)))
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d008      	beq.n	80006ea <_Z19TP_Read_CoordinatesPt+0xae>
 80006d8:	2120      	movs	r1, #32
 80006da:	4838      	ldr	r0, [pc, #224]	; (80007bc <_Z19TP_Read_CoordinatesPt+0x180>)
 80006dc:	f001 fe8e 	bl	80023fc <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <_Z19TP_Read_CoordinatesPt+0xae>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e000      	b.n	80006ec <_Z19TP_Read_CoordinatesPt+0xb0>
 80006ea:	2300      	movs	r3, #0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1cc      	bne.n	800068a <_Z19TP_Read_CoordinatesPt+0x4e>
    }
		
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	4830      	ldr	r0, [pc, #192]	; (80007b8 <_Z19TP_Read_CoordinatesPt+0x17c>)
 80006f8:	f001 fe98 	bl	800242c <HAL_GPIO_WritePin>

		
	if((counted_samples == N_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b40      	cmp	r3, #64	; 0x40
 8000700:	d108      	bne.n	8000714 <_Z19TP_Read_CoordinatesPt+0xd8>
 8000702:	2120      	movs	r1, #32
 8000704:	482d      	ldr	r0, [pc, #180]	; (80007bc <_Z19TP_Read_CoordinatesPt+0x180>)
 8000706:	f001 fe79 	bl	80023fc <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <_Z19TP_Read_CoordinatesPt+0xd8>
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <_Z19TP_Read_CoordinatesPt+0xda>
 8000714:	2300      	movs	r3, #0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d042      	beq.n	80007a0 <_Z19TP_Read_CoordinatesPt+0x164>
	{
		
	    calculating_x /= counted_samples;
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	61fb      	str	r3, [r7, #28]
	    calculating_y /= counted_samples;
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	61bb      	str	r3, [r7, #24]
		
	    rawx = calculating_x;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	81bb      	strh	r3, [r7, #12]
	    Coordinates[2] = rawx;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3304      	adds	r3, #4
 8000736:	89ba      	ldrh	r2, [r7, #12]
 8000738:	801a      	strh	r2, [r3, #0]
	    rawy = calculating_y;
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	81fb      	strh	r3, [r7, #14]
	    Coordinates[3] = rawy;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3306      	adds	r3, #6
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	801a      	strh	r2, [r3, #0]
		
		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
	    Coordinates[0] = (rawx - X_OFFSET) / X_MAGNITUDE;
 8000746:	89bb      	ldrh	r3, [r7, #12]
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <_Z19TP_Read_CoordinatesPt+0x184>)
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	b292      	uxth	r2, r2
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <_Z19TP_Read_CoordinatesPt+0x188>)
 800075a:	ed93 7a00 	vldr	s14, [r3]
 800075e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	801a      	strh	r2, [r3, #0]
	    Coordinates[1] = (rawy - Y_OFFSET) / Y_MAGNITUDE;
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <_Z19TP_Read_CoordinatesPt+0x18c>)
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	b292      	uxth	r2, r2
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <_Z19TP_Read_CoordinatesPt+0x190>)
 8000784:	ed93 7a00 	vldr	s14, [r3]
 8000788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3302      	adds	r3, #2
 8000790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000794:	ee17 2a90 	vmov	r2, s15
 8000798:	b292      	uxth	r2, r2
 800079a:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800079c:	2301      	movs	r3, #1
 800079e:	e007      	b.n	80007b0 <_Z19TP_Read_CoordinatesPt+0x174>
		}

			Coordinates[0] = 0;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3302      	adds	r3, #2
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80007ae:	2300      	movs	r3, #0

}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000002 	.word	0x20000002
 80007cc:	20000008 	.word	0x20000008

080007d0 <_Z19TP_Touchpad_Pressedv>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80007d4:	2120      	movs	r1, #32
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <_Z19TP_Touchpad_Pressedv+0x28>)
 80007d8:	f001 fe10 	bl	80023fc <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_Z19TP_Touchpad_Pressedv+0x20>
	{
		return TOUCHPAD_PRESSED;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <_Z19TP_Touchpad_Pressedv+0x22>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80007f0:	2300      	movs	r3, #0
	}
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020800 	.word	0x40020800

080007fc <_Z14TP_calibrationv>:

// Touch pad calibration. Lets move stilus from upper left corner of screen to down right corner few time. You have CALIBRATION_TIME millisecond)).
uint8_t TP_calibration()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
  uint16_t rawCoord[4];
  uint16_t Xmin = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	82fb      	strh	r3, [r7, #22]
  uint16_t Ymin = 0xFFFF;
 8000808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080c:	82bb      	strh	r3, [r7, #20]
  uint16_t Xmax = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	827b      	strh	r3, [r7, #18]
  uint16_t Ymax = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	823b      	strh	r3, [r7, #16]

  uint32_t end_time = HAL_GetTick() + CALIBRATION_TIME;
 8000816:	f001 fa81 	bl	8001d1c <HAL_GetTick>
 800081a:	4603      	mov	r3, r0
 800081c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000820:	3308      	adds	r3, #8
 8000822:	60fb      	str	r3, [r7, #12]
  while (end_time > HAL_GetTick())
 8000824:	e023      	b.n	800086e <_Z14TP_calibrationv+0x72>
    {
      if (TP_Read_Coordinates(rawCoord))
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff07 	bl	800063c <_Z19TP_Read_CoordinatesPt>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d017      	beq.n	800086e <_Z14TP_calibrationv+0x72>
	{
	  if (rawCoord[2] < Xmin) { Xmin = rawCoord[2]; }
 800083e:	893b      	ldrh	r3, [r7, #8]
 8000840:	8afa      	ldrh	r2, [r7, #22]
 8000842:	429a      	cmp	r2, r3
 8000844:	d901      	bls.n	800084a <_Z14TP_calibrationv+0x4e>
 8000846:	893b      	ldrh	r3, [r7, #8]
 8000848:	82fb      	strh	r3, [r7, #22]
	  if (rawCoord[2] > Xmax) { Xmax = rawCoord[2]; }
 800084a:	893b      	ldrh	r3, [r7, #8]
 800084c:	8a7a      	ldrh	r2, [r7, #18]
 800084e:	429a      	cmp	r2, r3
 8000850:	d201      	bcs.n	8000856 <_Z14TP_calibrationv+0x5a>
 8000852:	893b      	ldrh	r3, [r7, #8]
 8000854:	827b      	strh	r3, [r7, #18]
	  if (rawCoord[3] < Ymin) { Ymin = rawCoord[3]; }
 8000856:	897b      	ldrh	r3, [r7, #10]
 8000858:	8aba      	ldrh	r2, [r7, #20]
 800085a:	429a      	cmp	r2, r3
 800085c:	d901      	bls.n	8000862 <_Z14TP_calibrationv+0x66>
 800085e:	897b      	ldrh	r3, [r7, #10]
 8000860:	82bb      	strh	r3, [r7, #20]
	  if (rawCoord[3] > Ymax) { Ymax = rawCoord[3]; }
 8000862:	897b      	ldrh	r3, [r7, #10]
 8000864:	8a3a      	ldrh	r2, [r7, #16]
 8000866:	429a      	cmp	r2, r3
 8000868:	d201      	bcs.n	800086e <_Z14TP_calibrationv+0x72>
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	823b      	strh	r3, [r7, #16]
  while (end_time > HAL_GetTick())
 800086e:	f001 fa55 	bl	8001d1c <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4293      	cmp	r3, r2
 8000878:	bf8c      	ite	hi
 800087a:	2301      	movhi	r3, #1
 800087c:	2300      	movls	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1d0      	bne.n	8000826 <_Z14TP_calibrationv+0x2a>
	}
    }
  if ((Xmin < Xmax) && (Ymin < Ymax))
 8000884:	8afa      	ldrh	r2, [r7, #22]
 8000886:	8a7b      	ldrh	r3, [r7, #18]
 8000888:	429a      	cmp	r2, r3
 800088a:	d22c      	bcs.n	80008e6 <_Z14TP_calibrationv+0xea>
 800088c:	8aba      	ldrh	r2, [r7, #20]
 800088e:	8a3b      	ldrh	r3, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d228      	bcs.n	80008e6 <_Z14TP_calibrationv+0xea>
  {
      X_OFFSET = Xmin;
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <_Z14TP_calibrationv+0xf4>)
 8000896:	8afb      	ldrh	r3, [r7, #22]
 8000898:	8013      	strh	r3, [r2, #0]
      Y_OFFSET = Ymin;
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <_Z14TP_calibrationv+0xf8>)
 800089c:	8abb      	ldrh	r3, [r7, #20]
 800089e:	8013      	strh	r3, [r2, #0]
      X_MAGNITUDE = (Xmax - Xmin) / X_SIZE;
 80008a0:	8a7a      	ldrh	r2, [r7, #18]
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_Z14TP_calibrationv+0xfc>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	11d2      	asrs	r2, r2, #7
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_Z14TP_calibrationv+0x100>)
 80008bc:	edc3 7a00 	vstr	s15, [r3]
      Y_MAGNITUDE = (Ymax- Ymin) /  Y_SIZE;
 80008c0:	8a3a      	ldrh	r2, [r7, #16]
 80008c2:	8abb      	ldrh	r3, [r7, #20]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <_Z14TP_calibrationv+0x104>)
 80008c8:	fb82 1203 	smull	r1, r2, r2, r3
 80008cc:	441a      	add	r2, r3
 80008ce:	11d2      	asrs	r2, r2, #7
 80008d0:	17db      	asrs	r3, r3, #31
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <_Z14TP_calibrationv+0x108>)
 80008de:	edc3 7a00 	vstr	s15, [r3]

      return CALIBRATION_OK;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <_Z14TP_calibrationv+0xec>
  }
  return CALIBRATION_FAILS;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000002 	.word	0x20000002
 80008f8:	66666667 	.word	0x66666667
 80008fc:	20000004 	.word	0x20000004
 8000900:	88888889 	.word	0x88888889
 8000904:	20000008 	.word	0x20000008

08000908 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000922:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000926:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800092a:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <MX_FSMC_Init+0xbc>)
 800092c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000942:	2210      	movs	r2, #16
 8000944:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_FSMC_Init+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_FSMC_Init+0xb8>)
 8000980:	2200      	movs	r2, #0
 8000982:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000988:	230f      	movs	r3, #15
 800098a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 800098c:	2305      	movs	r3, #5
 800098e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000994:	2310      	movs	r3, #16
 8000996:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000998:	2311      	movs	r3, #17
 800099a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_FSMC_Init+0xb8>)
 80009a8:	f004 f842 	bl	8004a30 <HAL_SRAM_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80009b2:	f000 ff15 	bl	80017e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001a4 	.word	0x200001a4
 80009c4:	a0000104 	.word	0xa0000104

080009c8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HAL_FSMC_MspInit+0xa8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d141      	bne.n	8000a68 <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <HAL_FSMC_MspInit+0xa8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_FSMC_MspInit+0xac>)
 80009f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <HAL_FSMC_MspInit+0xac>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6393      	str	r3, [r2, #56]	; 0x38
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_FSMC_MspInit+0xac>)
 80009fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a06:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <HAL_FSMC_MspInit+0xb0>)
 8000a22:	f001 fb4f 	bl	80020c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <HAL_FSMC_MspInit+0xb4>)
 8000a42:	f001 fb3f 	bl	80020c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a46:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8000a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_FSMC_MspInit+0xb4>)
 8000a62:	f001 fb2f 	bl	80020c4 <HAL_GPIO_Init>
 8000a66:	e000      	b.n	8000a6a <HAL_FSMC_MspInit+0xa2>
    return;
 8000a68:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001f4 	.word	0x200001f4
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a88:	f7ff ff9e 	bl	80009c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a61      	ldr	r2, [pc, #388]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b51      	ldr	r3, [pc, #324]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a45      	ldr	r2, [pc, #276]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	21c0      	movs	r1, #192	; 0xc0
 8000b56:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_GPIO_Init+0x1a8>)
 8000b58:	f001 fc68 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4837      	ldr	r0, [pc, #220]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000b62:	f001 fc63 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CS_Pin|T_CLK_Pin|T_MOSI_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000b6c:	4834      	ldr	r0, [pc, #208]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000b6e:	f001 fc5d 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000b72:	2318      	movs	r3, #24
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	482f      	ldr	r0, [pc, #188]	; (8000c44 <MX_GPIO_Init+0x1b0>)
 8000b86:	f001 fa9d 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x1a8>)
 8000ba2:	f001 fa8f 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_GPIO_Init+0x1b4>)
 8000bba:	f001 fa83 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481a      	ldr	r0, [pc, #104]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000bd6:	f001 fa75 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000be0:	2311      	movs	r3, #17
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000bf4:	f001 fa66 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 8000bf8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000c12:	f001 fa57 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8000c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x1ac>)
 8000c2c:	f001 fa4a 	bl	80020c4 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40020800 	.word	0x40020800

08000c4c <_Z7lcdInitv>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000c52:	2300      	movs	r3, #0
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2301      	movs	r3, #1
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fc27 	bl	80014b4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4bae      	ldr	r3, [pc, #696]	; (8000f24 <_Z7lcdInitv+0x2d8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000c6e:	2300      	movs	r3, #0
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 fc19 	bl	80014b4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4ba8      	ldr	r3, [pc, #672]	; (8000f28 <_Z7lcdInitv+0x2dc>)
 8000c88:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fc0b 	bl	80014b4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4ba2      	ldr	r3, [pc, #648]	; (8000f2c <_Z7lcdInitv+0x2e0>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 fbfd 	bl	80014b4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b9c      	ldr	r3, [pc, #624]	; (8000f30 <_Z7lcdInitv+0x2e4>)
 8000cc0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8000cc2:	f000 fbcd 	bl	8001460 <_ZL8lcdResetv>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8000cc6:	2028      	movs	r0, #40	; 0x28
 8000cc8:	f000 fbd4 	bl	8001474 <_ZL15lcdWriteCommandh>

  lcdWriteCommand(0xCF);
 8000ccc:	20cf      	movs	r0, #207	; 0xcf
 8000cce:	f000 fbd1 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 fbde 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x83);
 8000cd8:	2083      	movs	r0, #131	; 0x83
 8000cda:	f000 fbdb 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x30);
 8000cde:	2030      	movs	r0, #48	; 0x30
 8000ce0:	f000 fbd8 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xED);
 8000ce4:	20ed      	movs	r0, #237	; 0xed
 8000ce6:	f000 fbc5 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x64);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f000 fbd2 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x03);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 fbcf 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x12);
 8000cf6:	2012      	movs	r0, #18
 8000cf8:	f000 fbcc 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x81);
 8000cfc:	2081      	movs	r0, #129	; 0x81
 8000cfe:	f000 fbc9 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xE8);
 8000d02:	20e8      	movs	r0, #232	; 0xe8
 8000d04:	f000 fbb6 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x85);
 8000d08:	2085      	movs	r0, #133	; 0x85
 8000d0a:	f000 fbc3 	bl	8001494 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x01);
  lcdWriteData(0x00);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fbc0 	bl	8001494 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x79);
  lcdWriteData(0x78);
 8000d14:	2078      	movs	r0, #120	; 0x78
 8000d16:	f000 fbbd 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xCB);
 8000d1a:	20cb      	movs	r0, #203	; 0xcb
 8000d1c:	f000 fbaa 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x39);
 8000d20:	2039      	movs	r0, #57	; 0x39
 8000d22:	f000 fbb7 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x2C);
 8000d26:	202c      	movs	r0, #44	; 0x2c
 8000d28:	f000 fbb4 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fbb1 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x34);
 8000d32:	2034      	movs	r0, #52	; 0x34
 8000d34:	f000 fbae 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f000 fbab 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF7);
 8000d3e:	20f7      	movs	r0, #247	; 0xf7
 8000d40:	f000 fb98 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x20);
 8000d44:	2020      	movs	r0, #32
 8000d46:	f000 fba5 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xEA);
 8000d4a:	20ea      	movs	r0, #234	; 0xea
 8000d4c:	f000 fb92 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 fb9f 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fb9c 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000d5c:	20c0      	movs	r0, #192	; 0xc0
 8000d5e:	f000 fb89 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x26);
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f000 fb96 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000d68:	20c1      	movs	r0, #193	; 0xc1
 8000d6a:	f000 fb83 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x11);
 8000d6e:	2011      	movs	r0, #17
 8000d70:	f000 fb90 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000d74:	20c5      	movs	r0, #197	; 0xc5
 8000d76:	f000 fb7d 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x35);
 8000d7a:	2035      	movs	r0, #53	; 0x35
 8000d7c:	f000 fb8a 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3E);
 8000d80:	203e      	movs	r0, #62	; 0x3e
 8000d82:	f000 fb87 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000d86:	20c7      	movs	r0, #199	; 0xc7
 8000d88:	f000 fb74 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0xBE);
 8000d8c:	20be      	movs	r0, #190	; 0xbe
 8000d8e:	f000 fb81 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8000d92:	2036      	movs	r0, #54	; 0x36
 8000d94:	f000 fb6e 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(lcdPortraitConfig);
 8000d98:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <_Z7lcdInitv+0x2d8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fb78 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8000da4:	203a      	movs	r0, #58	; 0x3a
 8000da6:	f000 fb65 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x55);
 8000daa:	2055      	movs	r0, #85	; 0x55
 8000dac:	f000 fb72 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8000db0:	20b1      	movs	r0, #177	; 0xb1
 8000db2:	f000 fb5f 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fb6c 	bl	8001494 <_ZL12lcdWriteDatat>
    //lcdWriteData(0x1B);
  lcdWriteData(0x18);
 8000dbc:	2018      	movs	r0, #24
 8000dbe:	f000 fb69 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF2);
 8000dc2:	20f2      	movs	r0, #242	; 0xf2
 8000dc4:	f000 fb56 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x08);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f000 fb63 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_GAMMASET);
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f000 fb50 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x01);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fb5d 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8000dda:	20e0      	movs	r0, #224	; 0xe0
 8000ddc:	f000 fb4a 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x1F);
 8000de0:	201f      	movs	r0, #31
 8000de2:	f000 fb57 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1A);
 8000de6:	201a      	movs	r0, #26
 8000de8:	f000 fb54 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8000dec:	2018      	movs	r0, #24
 8000dee:	f000 fb51 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f000 fb4e 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0F);
 8000df8:	200f      	movs	r0, #15
 8000dfa:	f000 fb4b 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x06);
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f000 fb48 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x45);
 8000e04:	2045      	movs	r0, #69	; 0x45
 8000e06:	f000 fb45 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x87);
 8000e0a:	2087      	movs	r0, #135	; 0x87
 8000e0c:	f000 fb42 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x32);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f000 fb3f 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f000 fb3c 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8000e1c:	2007      	movs	r0, #7
 8000e1e:	f000 fb39 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 fb36 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8000e28:	2007      	movs	r0, #7
 8000e2a:	f000 fb33 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f000 fb30 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 fb2d 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000e3a:	20e1      	movs	r0, #225	; 0xe1
 8000e3c:	f000 fb1a 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 fb27 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x25);
 8000e46:	2025      	movs	r0, #37	; 0x25
 8000e48:	f000 fb24 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8000e4c:	2027      	movs	r0, #39	; 0x27
 8000e4e:	f000 fb21 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000e52:	2005      	movs	r0, #5
 8000e54:	f000 fb1e 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x10);
 8000e58:	2010      	movs	r0, #16
 8000e5a:	f000 fb1b 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x09);
 8000e5e:	2009      	movs	r0, #9
 8000e60:	f000 fb18 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8000e64:	203a      	movs	r0, #58	; 0x3a
 8000e66:	f000 fb15 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 8000e6a:	2078      	movs	r0, #120	; 0x78
 8000e6c:	f000 fb12 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x4D);
 8000e70:	204d      	movs	r0, #77	; 0x4d
 8000e72:	f000 fb0f 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000e76:	2005      	movs	r0, #5
 8000e78:	f000 fb0c 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8000e7c:	2018      	movs	r0, #24
 8000e7e:	f000 fb09 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x0D);
 8000e82:	200d      	movs	r0, #13
 8000e84:	f000 fb06 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x38);
 8000e88:	2038      	movs	r0, #56	; 0x38
 8000e8a:	f000 fb03 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8000e8e:	203a      	movs	r0, #58	; 0x3a
 8000e90:	f000 fb00 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x1F);
 8000e94:	201f      	movs	r0, #31
 8000e96:	f000 fafd 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000e9a:	202a      	movs	r0, #42	; 0x2a
 8000e9c:	f000 faea 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 faf7 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 faf4 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 faf1 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0xEF);
 8000eb2:	20ef      	movs	r0, #239	; 0xef
 8000eb4:	f000 faee 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8000eb8:	202b      	movs	r0, #43	; 0x2b
 8000eba:	f000 fadb 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 fae8 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 fae5 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x01);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 fae2 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x3F);
 8000ed0:	203f      	movs	r0, #63	; 0x3f
 8000ed2:	f000 fadf 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8000ed6:	20b7      	movs	r0, #183	; 0xb7
 8000ed8:	f000 facc 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x07);
 8000edc:	2007      	movs	r0, #7
 8000ede:	f000 fad9 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8000ee2:	20b6      	movs	r0, #182	; 0xb6
 8000ee4:	f000 fac6 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(0x0A);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 fad3 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x82);
 8000eee:	2082      	movs	r0, #130	; 0x82
 8000ef0:	f000 fad0 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8000ef4:	2027      	movs	r0, #39	; 0x27
 8000ef6:	f000 facd 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 faca 	bl	8001494 <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000f00:	2011      	movs	r0, #17
 8000f02:	f000 fab7 	bl	8001474 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f000 ff14 	bl	8001d34 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000f0c:	2029      	movs	r0, #41	; 0x29
 8000f0e:	f000 fab1 	bl	8001474 <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f000 ff0e 	bl	8001d34 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000f18:	202c      	movs	r0, #44	; 0x2c
 8000f1a:	f000 faab 	bl	8001474 <_ZL15lcdWriteCommandh>
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200001fc 	.word	0x200001fc
 8000f28:	200001fd 	.word	0x200001fd
 8000f2c:	200001fe 	.word	0x200001fe
 8000f30:	200001ff 	.word	0x200001ff

08000f34 <_Z10lcdFillRGBt>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <_Z10lcdFillRGBt+0x5c>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <_Z10lcdFillRGBt+0x5c>)
 8000f48:	885b      	ldrh	r3, [r3, #2]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fa29 	bl	80013a8 <_Z12lcdSetWindowtttt>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <_Z10lcdFillRGBt+0x5c>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <_Z10lcdFillRGBt+0x5c>)
 8000f5e:	885b      	ldrh	r3, [r3, #2]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000f66:	e003      	b.n	8000f70 <_Z10lcdFillRGBt+0x3c>
  {
    lcdWriteData(color);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fa92 	bl	8001494 <_ZL12lcdWriteDatat>
  while(dimensions--)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	60fa      	str	r2, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f1      	bne.n	8000f68 <_Z10lcdFillRGBt+0x34>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000024 	.word	0x20000024

08000f94 <_Z12lcdDrawPixelttt>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	80bb      	strh	r3, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <_Z12lcdDrawPixelttt+0x44>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d20f      	bcs.n	8000fd0 <_Z12lcdDrawPixelttt+0x3c>
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <_Z12lcdDrawPixelttt+0x44>)
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	88ba      	ldrh	r2, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d20a      	bcs.n	8000fd0 <_Z12lcdDrawPixelttt+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	88b9      	ldrh	r1, [r7, #4]
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	f000 f9f1 	bl	80013a8 <_Z12lcdSetWindowtttt>
    lcdWriteData(color);
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa63 	bl	8001494 <_ZL12lcdWriteDatat>
 8000fce:	e000      	b.n	8000fd2 <_Z12lcdDrawPixelttt+0x3e>
        return;
 8000fd0:	bf00      	nop
}
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000024 	.word	0x20000024

08000fdc <_Z11lcdDrawCharsshtt>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4623      	mov	r3, r4
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	70fb      	strb	r3, [r7, #3]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <_Z11lcdDrawCharsshtt+0x14c>)
 8001000:	8812      	ldrh	r2, [r2, #0]
 8001002:	4293      	cmp	r3, r2
 8001004:	f280 808b 	bge.w	800111e <_Z11lcdDrawCharsshtt+0x142>
			(y >= lcdProperties.height) || 		// Clip bottom
 8001008:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	; (8001128 <_Z11lcdDrawCharsshtt+0x14c>)
 800100e:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001010:	4293      	cmp	r3, r2
 8001012:	f280 8084 	bge.w	800111e <_Z11lcdDrawCharsshtt+0x142>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101a:	4a44      	ldr	r2, [pc, #272]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 800101c:	6892      	ldr	r2, [r2, #8]
 800101e:	8892      	ldrh	r2, [r2, #4]
 8001020:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8001022:	2b00      	cmp	r3, #0
 8001024:	db7b      	blt.n	800111e <_Z11lcdDrawCharsshtt+0x142>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8001026:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800102a:	4a40      	ldr	r2, [pc, #256]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 800102c:	6892      	ldr	r2, [r2, #8]
 800102e:	88d2      	ldrh	r2, [r2, #6]
 8001030:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001032:	2b00      	cmp	r3, #0
 8001034:	db73      	blt.n	800111e <_Z11lcdDrawCharsshtt+0x142>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	88db      	ldrh	r3, [r3, #6]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	b29b      	uxth	r3, r3
 8001040:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	73bb      	strb	r3, [r7, #14]
 800104a:	e061      	b.n	8001110 <_Z11lcdDrawCharsshtt+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 800104c:	2300      	movs	r3, #0
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	e055      	b.n	80010fe <_Z11lcdDrawCharsshtt+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	3a20      	subs	r2, #32
 800105c:	4933      	ldr	r1, [pc, #204]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 800105e:	6889      	ldr	r1, [r1, #8]
 8001060:	88c9      	ldrh	r1, [r1, #6]
 8001062:	fb01 f202 	mul.w	r2, r1, r2
 8001066:	7ab9      	ldrb	r1, [r7, #10]
 8001068:	fb02 f101 	mul.w	r1, r2, r1
 800106c:	7bba      	ldrb	r2, [r7, #14]
 800106e:	7ab8      	ldrb	r0, [r7, #10]
 8001070:	fb00 f202 	mul.w	r2, r0, r2
 8001074:	4411      	add	r1, r2
 8001076:	7b3a      	ldrb	r2, [r7, #12]
 8001078:	440a      	add	r2, r1
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001080:	2300      	movs	r3, #0
 8001082:	72fb      	strb	r3, [r7, #11]
 8001084:	e032      	b.n	80010ec <_Z11lcdDrawCharsshtt+0x110>
			{
				if((line & 0x80) == 0x80)
 8001086:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800108a:	2b00      	cmp	r3, #0
 800108c:	da12      	bge.n	80010b4 <_Z11lcdDrawCharsshtt+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	b29a      	uxth	r2, r3
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4413      	add	r3, r2
 8001096:	b29a      	uxth	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b298      	uxth	r0, r3
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	883a      	ldrh	r2, [r7, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff ff71 	bl	8000f94 <_Z12lcdDrawPixelttt>
 80010b2:	e015      	b.n	80010e0 <_Z11lcdDrawCharsshtt+0x104>
				}
				else if (bg != color)
 80010b4:	8c3a      	ldrh	r2, [r7, #32]
 80010b6:	883b      	ldrh	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d011      	beq.n	80010e0 <_Z11lcdDrawCharsshtt+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4413      	add	r3, r2
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b298      	uxth	r0, r3
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	8c3a      	ldrh	r2, [r7, #32]
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff ff5a 	bl	8000f94 <_Z12lcdDrawPixelttt>
				}
				line <<= 1;
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	3301      	adds	r3, #1
 80010ea:	72fb      	strb	r3, [r7, #11]
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d9c9      	bls.n	8001086 <_Z11lcdDrawCharsshtt+0xaa>
			}

			xP += 8;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3308      	adds	r3, #8
 80010f6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	733b      	strb	r3, [r7, #12]
 80010fe:	7b3a      	ldrb	r2, [r7, #12]
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3a5      	bcc.n	8001052 <_Z11lcdDrawCharsshtt+0x76>
		}

		xP = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	3301      	adds	r3, #1
 800110e:	73bb      	strb	r3, [r7, #14]
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <_Z11lcdDrawCharsshtt+0x150>)
 8001114:	6892      	ldr	r2, [r2, #8]
 8001116:	88d2      	ldrh	r2, [r2, #6]
 8001118:	4293      	cmp	r3, r2
 800111a:	db97      	blt.n	800104c <_Z11lcdDrawCharsshtt+0x70>
 800111c:	e000      	b.n	8001120 <_Z11lcdDrawCharsshtt+0x144>
		return;
 800111e:	bf00      	nop
	}
}
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	20000024 	.word	0x20000024
 800112c:	2000002c 	.word	0x2000002c

08001130 <_Z9lcdPrintfPKcz>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001130:	b40f      	push	{r0, r1, r2, r3}
 8001132:	b590      	push	{r4, r7, lr}
 8001134:	b085      	sub	sp, #20
 8001136:	af02      	add	r7, sp, #8
	static char buf[256];

	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	69b9      	ldr	r1, [r7, #24]
 8001142:	483e      	ldr	r0, [pc, #248]	; (800123c <_Z9lcdPrintfPKcz+0x10c>)
 8001144:	f008 fc86 	bl	8009a54 <vsiprintf>
	va_end(lst);

	p = buf;
 8001148:	4b3c      	ldr	r3, [pc, #240]	; (800123c <_Z9lcdPrintfPKcz+0x10c>)
 800114a:	607b      	str	r3, [r7, #4]
	while (*p)
 800114c:	e069      	b.n	8001222 <_Z9lcdPrintfPKcz+0xf2>
	{
		if (*p == '\n')
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b0a      	cmp	r3, #10
 8001154:	d10e      	bne.n	8001174 <_Z9lcdPrintfPKcz+0x44>
		{
			cursorXY.y += lcdFont.pFont->Height + 1;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001158:	885a      	ldrh	r2, [r3, #2]
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	88db      	ldrh	r3, [r3, #6]
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 800116a:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 800116c:	4b34      	ldr	r3, [pc, #208]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
 8001172:	e04a      	b.n	800120a <_Z9lcdPrintfPKcz+0xda>
		}
		else if (*p == '\r')
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b0d      	cmp	r3, #13
 800117a:	d046      	beq.n	800120a <_Z9lcdPrintfPKcz+0xda>
		{
			// skip em
		}
		else if (*p == '\t')
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d10b      	bne.n	800119c <_Z9lcdPrintfPKcz+0x6c>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	b29b      	uxth	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	e036      	b.n	800120a <_Z9lcdPrintfPKcz+0xda>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b218      	sxth	r0, r3
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	b219      	sxth	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29c      	uxth	r4, r3
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4623      	mov	r3, r4
 80011bc:	f7ff ff0e 	bl	8000fdc <_Z11lcdDrawCharsshtt>
			cursorXY.x += lcdFont.pFont->Width;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 80011d0:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011d4:	7b1b      	ldrb	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d017      	beq.n	800120a <_Z9lcdPrintfPKcz+0xda>
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <_Z9lcdPrintfPKcz+0x118>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	889b      	ldrh	r3, [r3, #4]
 80011ec:	1acb      	subs	r3, r1, r3
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd0b      	ble.n	800120a <_Z9lcdPrintfPKcz+0xda>
			{
				cursorXY.y += lcdFont.pFont->Height;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 80011f4:	885a      	ldrh	r2, [r3, #2]
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_Z9lcdPrintfPKcz+0x114>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	88db      	ldrh	r3, [r3, #6]
 80011fc:	4413      	add	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001202:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 8001212:	885a      	ldrh	r2, [r3, #2]
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <_Z9lcdPrintfPKcz+0x118>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	429a      	cmp	r2, r3
 800121a:	d302      	bcc.n	8001222 <_Z9lcdPrintfPKcz+0xf2>
		{
			cursorXY.y = 0;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_Z9lcdPrintfPKcz+0x110>)
 800121e:	2200      	movs	r2, #0
 8001220:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d191      	bne.n	800114e <_Z9lcdPrintfPKcz+0x1e>
		}
	}

}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001236:	b004      	add	sp, #16
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000200 	.word	0x20000200
 8001240:	200001f8 	.word	0x200001f8
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000024 	.word	0x20000024

0800124c <_Z14lcdSetTextFontP6_tFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <_Z14lcdSetTextFontP6_tFont+0x1c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6093      	str	r3, [r2, #8]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000002c 	.word	0x2000002c

0800126c <_Z15lcdSetTextColortt>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_Z15lcdSetTextColortt+0x28>)
 8001280:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <_Z15lcdSetTextColortt+0x28>)
 8001286:	6053      	str	r3, [r2, #4]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	2000002c 	.word	0x2000002c

08001298 <_Z17lcdSetOrientation21lcdOrientationTypeDef>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f000 f8e3 	bl	8001474 <_ZL15lcdWriteCommandh>

	switch (lcdProperties.orientation)
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d842      	bhi.n	800133c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa4>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <_Z17lcdSetOrientation21lcdOrientationTypeDef+0x24>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	08001305 	.word	0x08001305
 80012c4:	080012e9 	.word	0x080012e9
 80012c8:	08001321 	.word	0x08001321
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xcc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f8de 	bl	8001494 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012da:	22f0      	movs	r2, #240	; 0xf0
 80012dc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012e4:	805a      	strh	r2, [r3, #2]
			break;
 80012e6:	e02a      	b.n	800133e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f8d0 	bl	8001494 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012f6:	22f0      	movs	r2, #240	; 0xf0
 80012f8:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 80012fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001300:	805a      	strh	r2, [r3, #2]
			break;
 8001302:	e01c      	b.n	800133e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f8c2 	bl	8001494 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001312:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001316:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800131a:	22f0      	movs	r2, #240	; 0xf0
 800131c:	805a      	strh	r2, [r3, #2]
			break;
 800131e:	e00e      	b.n	800133e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f8b4 	bl	8001494 <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 800132e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001332:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001336:	22f0      	movs	r2, #240	; 0xf0
 8001338:	805a      	strh	r2, [r3, #2]
			break;
 800133a:	e000      	b.n	800133e <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		default:
			break;
 800133c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	3b01      	subs	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f000 f829 	bl	80013a8 <_Z12lcdSetWindowtttt>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000024 	.word	0x20000024
 8001364:	200001fc 	.word	0x200001fc
 8001368:	200001fe 	.word	0x200001fe
 800136c:	200001fd 	.word	0x200001fd
 8001370:	200001ff 	.word	0x200001ff

08001374 <_Z12lcdSetCursortt>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <_Z12lcdSetCursortt+0x30>)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <_Z12lcdSetCursortt+0x30>)
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	88b9      	ldrh	r1, [r7, #4]
 8001396:	88f8      	ldrh	r0, [r7, #6]
 8001398:	f000 f806 	bl	80013a8 <_Z12lcdSetWindowtttt>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001f8 	.word	0x200001f8

080013a8 <_Z12lcdSetWindowtttt>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	4603      	mov	r3, r0
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 80013c6:	202a      	movs	r0, #42	; 0x2a
 80013c8:	f000 f854 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(x0 >> 8) ;
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f85e 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(x0 );
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f85a 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(x1 >> 8);
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f854 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(x1);
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f850 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80013f4:	202b      	movs	r0, #43	; 0x2b
 80013f6:	f000 f83d 	bl	8001474 <_ZL15lcdWriteCommandh>
  lcdWriteData(y0 >> 8);
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f847 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(y0);
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f843 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(y1 >> 8);
 800140e:	883b      	ldrh	r3, [r7, #0]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f83d 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteData(y1);
 800141a:	883b      	ldrh	r3, [r7, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f839 	bl	8001494 <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001422:	202c      	movs	r0, #44	; 0x2c
 8001424:	f000 f826 	bl	8001474 <_ZL15lcdWriteCommandh>
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <_Z12lcdGetHeightv>:
{
  return lcdProperties.width;
}

uint16_t lcdGetHeight(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <_Z12lcdGetHeightv+0x14>)
 8001436:	885b      	ldrh	r3, [r3, #2]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000024 	.word	0x20000024

08001448 <_Z14lcdGetTextFontv>:
{
  return lcdProperties.orientation;
}

sFONT* lcdGetTextFont(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <_Z14lcdGetTextFontv+0x14>)
 800144e:	689b      	ldr	r3, [r3, #8]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000002c 	.word	0x2000002c

08001460 <_ZL8lcdResetv>:

  while(i < sizeof(*data)/ sizeof(data[1]));
}

static void lcdReset(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 f805 	bl	8001474 <_ZL15lcdWriteCommandh>
	HAL_Delay(5);
 800146a:	2005      	movs	r0, #5
 800146c:	f000 fc62 	bl	8001d34 <HAL_Delay>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZL15lcdWriteCommandh>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 800147e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	b292      	uxth	r2, r2
 8001486:	801a      	strh	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZL12lcdWriteDatat>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <_ZL12lcdWriteDatat+0x1c>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	8013      	strh	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	60080000 	.word	0x60080000

080014b4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 80014b4:	b490      	push	{r4, r7}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	4603      	mov	r3, r0
 80014c8:	71bb      	strb	r3, [r7, #6]
 80014ca:	460b      	mov	r3, r1
 80014cc:	717b      	strb	r3, [r7, #5]
 80014ce:	4613      	mov	r3, r2
 80014d0:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) 	value 	|= ILI9341_MADCTL_MH;
 80014d6:	7f3b      	ldrb	r3, [r7, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x30>
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) 		value 	|= ILI9341_MADCTL_BGR;
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x3e>
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) 	value 	|= ILI9341_MADCTL_ML;
 80014f2:	793b      	ldrb	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x4c>
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) 	value 	|= ILI9341_MADCTL_MV;
 8001500:	797b      	ldrb	r3, [r7, #5]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x5a>
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) 	value 	|= ILI9341_MADCTL_MX;
 800150e:	79bb      	ldrb	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x68>
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) 		value 	|= ILI9341_MADCTL_MY;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x76>
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001528:	73fb      	strb	r3, [r7, #15]
  return value;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bc90      	pop	{r4, r7}
 8001534:	4770      	bx	lr
	...

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f000 fb87 	bl	8001c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f8a3 	bl	800168c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f7ff faa5 	bl	8000a94 <MX_GPIO_Init>
  MX_FSMC_Init();
 800154a:	f7ff f9dd 	bl	8000908 <MX_FSMC_Init>
  MX_RTC_Init();
 800154e:	f000 f94d 	bl	80017ec <MX_RTC_Init>
  MX_SPI1_Init();
 8001552:	f000 f99b 	bl	800188c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001556:	f000 fad7 	bl	8001b08 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800155a:	f007 fd71 	bl	8009040 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  time.Hours = 22;
//  time.Minutes = 59;
//  time.Seconds = 00;
//  HAL_RTC_SetTime(&rtc, &time , RTC_HOURFORMAT_24);
  LCD_BL_ON();
 800155e:	2201      	movs	r2, #1
 8001560:	2102      	movs	r1, #2
 8001562:	4844      	ldr	r0, [pc, #272]	; (8001674 <main+0x13c>)
 8001564:	f000 ff62 	bl	800242c <HAL_GPIO_WritePin>
   lcdInit();
 8001568:	f7ff fb70 	bl	8000c4c <_Z7lcdInitv>
   int i = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
   lcdSetOrientation((lcdOrientationTypeDef)i);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe8f 	bl	8001298 <_Z17lcdSetOrientation21lcdOrientationTypeDef>
   // TpadInit();
   HAL_Delay(100);
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f000 fbda 	bl	8001d34 <HAL_Delay>
  // HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
   lcdFillRGB(COLOR_BLACK);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fcd7 	bl	8000f34 <_Z10lcdFillRGBt>
   lcdSetTextFont(&Font24);
 8001586:	483c      	ldr	r0, [pc, #240]	; (8001678 <main+0x140>)
 8001588:	f7ff fe60 	bl	800124c <_Z14lcdSetTextFontP6_tFont>
       lcdSetCursor(120,5);
 800158c:	2105      	movs	r1, #5
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f7ff fef0 	bl	8001374 <_Z12lcdSetCursortt>
       lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8001594:	2100      	movs	r1, #0
 8001596:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800159a:	f7ff fe67 	bl	800126c <_Z15lcdSetTextColortt>
       lcdPrintf("CALIBRATION!");
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <main+0x144>)
 80015a0:	f7ff fdc6 	bl	8001130 <_Z9lcdPrintfPKcz>
       while(! TP_Touchpad_Pressed());
 80015a4:	bf00      	nop
 80015a6:	f7ff f913 	bl	80007d0 <_Z19TP_Touchpad_Pressedv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f5      	bne.n	80015a6 <main+0x6e>
       TP_calibration();
 80015ba:	f7ff f91f 	bl	80007fc <_Z14TP_calibrationv>
   lcdFillRGB(COLOR_BLACK);
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fcb8 	bl	8000f34 <_Z10lcdFillRGBt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
bool refil = false;
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
  {

//      	if(TpadGetCoordinates(penX, penY)){
//      	}

      if(TP_Touchpad_Pressed() == 1){
 80015c8:	f7ff f902 	bl	80007d0 <_Z19TP_Touchpad_Pressedv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d022      	beq.n	8001622 <main+0xea>
	  uint16_t Coord[4] ={0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
	  refil = true;
 80015e4:	2301      	movs	r3, #1
 80015e6:	75fb      	strb	r3, [r7, #23]
	  TP_Read_Coordinates(Coord);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f826 	bl	800063c <_Z19TP_Read_CoordinatesPt>
      		lcdSetTextFont(&Font16);
 80015f0:	4823      	ldr	r0, [pc, #140]	; (8001680 <main+0x148>)
 80015f2:	f7ff fe2b 	bl	800124c <_Z14lcdSetTextFontP6_tFont>
      	      	lcdSetCursor(1 , 1);
 80015f6:	2101      	movs	r1, #1
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff febb 	bl	8001374 <_Z12lcdSetCursortt>
      	      	lcdSetTextColor(COLOR_GREENYELLOW, COLOR_BLACK);
 80015fe:	2100      	movs	r1, #0
 8001600:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 8001604:	f7ff fe32 	bl	800126c <_Z15lcdSetTextColortt>
      	      	lcdPrintf("PEN: X %5i Y %5i\n \t X %5i Y %5i", Coord[0], Coord[1], Coord[2], Coord[3]);
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	4619      	mov	r1, r3
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	461a      	mov	r2, r3
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	4618      	mov	r0, r3
 8001614:	897b      	ldrh	r3, [r7, #10]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4603      	mov	r3, r0
 800161a:	481a      	ldr	r0, [pc, #104]	; (8001684 <main+0x14c>)
 800161c:	f7ff fd88 	bl	8001130 <_Z9lcdPrintfPKcz>
 8001620:	e007      	b.n	8001632 <main+0xfa>

      } else {
	  if (refil){
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <main+0xfa>
	  refil = false;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
	  lcdFillRGB(COLOR_BLACK);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fc81 	bl	8000f34 <_Z10lcdFillRGBt>
	  }
      }
    unsigned long t = testText();
 8001632:	f000 f8a1 	bl	8001778 <_Z8testTextv>
 8001636:	60f8      	str	r0, [r7, #12]
    lcdSetTextFont(&Font16);
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <main+0x148>)
 800163a:	f7ff fe07 	bl	800124c <_Z14lcdSetTextFontP6_tFont>
    lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800163e:	f7ff fef7 	bl	8001430 <_Z12lcdGetHeightv>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	f7ff feff 	bl	8001448 <_Z14lcdGetTextFontv>
 800164a:	4603      	mov	r3, r0
 800164c:	88db      	ldrh	r3, [r3, #6]
 800164e:	1ae3      	subs	r3, r4, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	4619      	mov	r1, r3
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fe8b 	bl	8001374 <_Z12lcdSetCursortt>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800165e:	2100      	movs	r1, #0
 8001660:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001664:	f7ff fe02 	bl	800126c <_Z15lcdSetTextColortt>
    lcdPrintf("Time: %4lu ms", t);
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <main+0x150>)
 800166c:	f7ff fd60 	bl	8001130 <_Z9lcdPrintfPKcz>
      		// HAL_Delay(_delay);

//      demoLCD(i);
//    	  i++;
      }
 8001670:	e7aa      	b.n	80015c8 <main+0x90>
 8001672:	bf00      	nop
 8001674:	40020400 	.word	0x40020400
 8001678:	2000001c 	.word	0x2000001c
 800167c:	0800a388 	.word	0x0800a388
 8001680:	20000014 	.word	0x20000014
 8001684:	0800a398 	.word	0x0800a398
 8001688:	0800a3b8 	.word	0x0800a3b8

0800168c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2230      	movs	r2, #48	; 0x30
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f008 f9e4 	bl	8009a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <_Z18SystemClock_Configv+0xe4>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <_Z18SystemClock_Configv+0xe4>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <_Z18SystemClock_Configv+0xe4>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <_Z18SystemClock_Configv+0xe8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <_Z18SystemClock_Configv+0xe8>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <_Z18SystemClock_Configv+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016e8:	2305      	movs	r3, #5
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f6:	2302      	movs	r3, #2
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001700:	2304      	movs	r3, #4
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001704:	23a8      	movs	r3, #168	; 0xa8
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001708:	2302      	movs	r3, #2
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800170c:	2307      	movs	r3, #7
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4618      	mov	r0, r3
 8001716:	f002 f8f3 	bl	8003900 <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800172a:	f000 f859 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172e:	230f      	movs	r3, #15
 8001730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001732:	2302      	movs	r3, #2
 8001734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800173e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2105      	movs	r1, #5
 800174c:	4618      	mov	r0, r3
 800174e:	f002 fb4f 	bl	8003df0 <HAL_RCC_ClockConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001762:	f000 f83d 	bl	80017e0 <Error_Handler>
  }
}
 8001766:	bf00      	nop
 8001768:	3750      	adds	r7, #80	; 0x50
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <_Z8testTextv>:
	lcdFillRGB(COLOR_BLACK);
	return t += HAL_GetTick() - start;
}

unsigned long testText()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick();
 800177e:	f000 facd 	bl	8001d1c <HAL_GetTick>
 8001782:	6078      	str	r0, [r7, #4]
	//lcdFillRGB(COLOR_BLACK);
	HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
 8001784:	2200      	movs	r2, #0
 8001786:	4912      	ldr	r1, [pc, #72]	; (80017d0 <_Z8testTextv+0x58>)
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <_Z8testTextv+0x5c>)
 800178a:	f002 feb6 	bl	80044fa <HAL_RTC_GetTime>
	lcdSetCursor(50, 60);
 800178e:	213c      	movs	r1, #60	; 0x3c
 8001790:	2032      	movs	r0, #50	; 0x32
 8001792:	f7ff fdef 	bl	8001374 <_Z12lcdSetCursortt>
//	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
//	lcdSetTextFont(&Font16);
//	lcdPrintf("Hello World!\r\n\n\n");
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8001796:	2100      	movs	r1, #0
 8001798:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800179c:	f7ff fd66 	bl	800126c <_Z15lcdSetTextColortt>
	lcdSetTextFont(&Font24);
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <_Z8testTextv+0x60>)
 80017a2:	f7ff fd53 	bl	800124c <_Z14lcdSetTextFontP6_tFont>
	lcdPrintf("%02i : %02i : %02i ", time.Hours, time.Minutes, time.Seconds);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <_Z8testTextv+0x58>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_Z8testTextv+0x58>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_Z8testTextv+0x58>)
 80017b4:	789b      	ldrb	r3, [r3, #2]
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <_Z8testTextv+0x64>)
 80017b8:	f7ff fcba 	bl	8001130 <_Z9lcdPrintfPKcz>
//	lcdPrintf("O, HO, HO! \r\n");
//	lcdPrintf("Furry cat coming\r\n");
//	lcdPrintf("Miauuuu!\r\n");
//	lcdPrintf("MUUUURRRRR,\r\n");
//	lcdPrintf("murrr\r\n");
	return HAL_GetTick() - start;
 80017bc:	f000 faae 	bl	8001d1c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1ad3      	subs	r3, r2, r3
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000300 	.word	0x20000300
 80017d4:	20000314 	.word	0x20000314
 80017d8:	2000001c 	.word	0x2000001c
 80017dc:	0800a3e4 	.word	0x0800a3e4

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_RTC_Init+0x44>)
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <MX_RTC_Init+0x48>)
 80017f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_RTC_Init+0x44>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_RTC_Init+0x44>)
 80017fe:	227f      	movs	r2, #127	; 0x7f
 8001800:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_RTC_Init+0x44>)
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_RTC_Init+0x44>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_RTC_Init+0x44>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_RTC_Init+0x44>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_RTC_Init+0x44>)
 800181c:	f002 fdea 	bl	80043f4 <HAL_RTC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001826:	f7ff ffdb 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000314 	.word	0x20000314
 8001834:	40002800 	.word	0x40002800

08001838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_RTC_MspInit+0x4c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d111      	bne.n	800187c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001860:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fce2 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001872:	f7ff ffb5 	bl	80017e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_RTC_MspInit+0x50>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40002800 	.word	0x40002800
 8001888:	42470e3c 	.word	0x42470e3c

0800188c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_SPI1_Init+0x64>)
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <MX_SPI1_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_SPI1_Init+0x64>)
 8001898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800189c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018d8:	220a      	movs	r2, #10
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_SPI1_Init+0x64>)
 80018de:	f002 ff0b 	bl	80046f8 <HAL_SPI_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018e8:	f7ff ff7a 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000334 	.word	0x20000334
 80018f4:	40013000 	.word	0x40013000

080018f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_SPI_MspInit+0x94>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d133      	bne.n	8001982 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_SPI_MspInit+0x98>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_SPI_MspInit+0x98>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_SPI_MspInit+0x98>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_SPI_MspInit+0x98>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <HAL_SPI_MspInit+0x98>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_SPI_MspInit+0x98>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001952:	2338      	movs	r3, #56	; 0x38
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001962:	2305      	movs	r3, #5
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <HAL_SPI_MspInit+0x9c>)
 800196e:	f000 fba9 	bl	80020c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2023      	movs	r0, #35	; 0x23
 8001978:	f000 fadb 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800197c:	2023      	movs	r0, #35	; 0x23
 800197e:	f000 faf4 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40013000 	.word	0x40013000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f95e 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <SPI1_IRQHandler+0x10>)
 8001a42:	f002 fee3 	bl	800480c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000334 	.word	0x20000334

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f003 f883 	bl	8004b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000390 	.word	0x20000390

08001a64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <OTG_FS_IRQHandler+0x10>)
 8001a6a:	f000 fe3c 	bl	80026e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200018bc 	.word	0x200018bc

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f007 ffe6 	bl	8009a78 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20020000 	.word	0x20020000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	2000038c 	.word	0x2000038c
 8001ae0:	20002108 	.word	0x20002108

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART1_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b40:	f002 ffbe 	bl	8004ac0 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f7ff fe49 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000390 	.word	0x20000390
 8001b58:	40011000 	.word	0x40011000

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d134      	bne.n	8001be8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_UART_MspInit+0x98>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <HAL_UART_MspInit+0x9c>)
 8001bd4:	f000 fa76 	bl	80020c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2025      	movs	r0, #37	; 0x25
 8001bde:	f000 f9a8 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be2:	2025      	movs	r0, #37	; 0x25
 8001be4:	f000 f9c1 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c00:	f7ff ff70 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c06:	490d      	ldr	r1, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c1c:	4c0a      	ldr	r4, [pc, #40]	; (8001c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f007 ff2b 	bl	8009a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f7ff fc83 	bl	8001538 <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001c40:	0800cfa8 	.word	0x0800cfa8
  ldr r2, =_sbss
 8001c44:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001c48:	20002108 	.word	0x20002108

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>
	...

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_Init+0x40>)
 8001c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_Init+0x40>)
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_Init+0x40>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f94f 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7e:	200f      	movs	r0, #15
 8001c80:	f000 f808 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c84:	f7ff fe88 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x54>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x58>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f967 	bl	8001f86 <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d80a      	bhi.n	8001cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f000 f92f 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_InitTick+0x5c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000003c 	.word	0x2000003c
 8001cec:	20000044 	.word	0x20000044
 8001cf0:	20000040 	.word	0x20000040

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000044 	.word	0x20000044
 8001d18:	200003d8 	.word	0x200003d8

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200003d8 	.word	0x200003d8

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000044 	.word	0x20000044

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff feb6 	bl	8001d1c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e052      	b.n	8002076 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0216 	bic.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <HAL_DMA_Abort+0x62>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002020:	e013      	b.n	800204a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002022:	f7ff fe7b 	bl	8001d1c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b05      	cmp	r3, #5
 800202e:	d90c      	bls.n	800204a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e015      	b.n	8002076 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e4      	bne.n	8002022 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	223f      	movs	r2, #63	; 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d004      	beq.n	800209c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e00c      	b.n	80020b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2205      	movs	r2, #5
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e16b      	b.n	80023b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 815a 	bne.w	80023b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b4 	beq.w	80023b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_GPIO_Init+0x310>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x314>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_GPIO_Init+0x226>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d025      	beq.n	80022e6 <HAL_GPIO_Init+0x222>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x31c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <HAL_GPIO_Init+0x21e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x320>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d019      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x324>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00d      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_GPIO_Init+0x20a>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x310>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae90 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e001      	b.n	800241e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af02      	add	r7, sp, #8
 8002464:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e101      	b.n	8002674 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f006 ffb8 	bl	8009400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249e:	d102      	bne.n	80024a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fc15 	bl	8005cda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7c1a      	ldrb	r2, [r3, #16]
 80024b8:	f88d 2000 	strb.w	r2, [sp]
 80024bc:	3304      	adds	r3, #4
 80024be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c0:	f003 faf4 	bl	8005aac <USB_CoreInit>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0ce      	b.n	8002674 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 fc0d 	bl	8005cfc <USB_SetCurrentMode>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0bf      	b.n	8002674 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e04a      	b.n	8002590 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3315      	adds	r3, #21
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3314      	adds	r3, #20
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	b298      	uxth	r0, r3
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	332e      	adds	r3, #46	; 0x2e
 8002536:	4602      	mov	r2, r0
 8002538:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3318      	adds	r3, #24
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	331c      	adds	r3, #28
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3320      	adds	r3, #32
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3324      	adds	r3, #36	; 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	791b      	ldrb	r3, [r3, #4]
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3af      	bcc.n	80024fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 2355 	addw	r3, r3, #597	; 0x255
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	3301      	adds	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3b5      	bcc.n	80025a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7c1a      	ldrb	r2, [r3, #16]
 800263c:	f88d 2000 	strb.w	r2, [sp]
 8002640:	3304      	adds	r3, #4
 8002642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002644:	f003 fba6 	bl	8005d94 <USB_DevInit>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00c      	b.n	8002674 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 fbea 	bl	8006e46 <USB_DevDisconnect>

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_PCD_Start+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e022      	b.n	80026de <HAL_PCD_Start+0x62>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 faf7 	bl	8005cb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fb98 	bl	8006e04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026e6:	b590      	push	{r4, r7, lr}
 80026e8:	b08d      	sub	sp, #52	; 0x34
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fc56 	bl	8006fae <USB_GetMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 848c 	bne.w	8003022 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fbba 	bl	8006e88 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8482 	beq.w	8003020 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f004 fba7 	bl	8006e88 <USB_ReadInterrupts>
 800273a:	4603      	mov	r3, r0
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d107      	bne.n	8002754 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f002 0202 	and.w	r2, r2, #2
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fb95 	bl	8006e88 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d161      	bne.n	800282c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0210 	bic.w	r2, r2, #16
 8002776:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	0c5b      	lsrs	r3, r3, #17
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d124      	bne.n	80027ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d035      	beq.n	800281c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6a38      	ldr	r0, [r7, #32]
 80027c4:	f004 f9cc 	bl	8006b60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	441a      	add	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e6:	441a      	add	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	615a      	str	r2, [r3, #20]
 80027ec:	e016      	b.n	800281c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	0c5b      	lsrs	r3, r3, #17
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d110      	bne.n	800281c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002800:	2208      	movs	r2, #8
 8002802:	4619      	mov	r1, r3
 8002804:	6a38      	ldr	r0, [r7, #32]
 8002806:	f004 f9ab 	bl	8006b60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002816:	441a      	add	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0210 	orr.w	r2, r2, #16
 800282a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fb29 	bl	8006e88 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002840:	f040 80a7 	bne.w	8002992 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 fb2e 	bl	8006eae <USB_ReadDevAllOutEpInterrupt>
 8002852:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002854:	e099      	b.n	800298a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 808e 	beq.w	800297e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fb52 	bl	8006f16 <USB_ReadDevOutEPInterrupt>
 8002872:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288a:	461a      	mov	r2, r3
 800288c:	2301      	movs	r3, #1
 800288e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fea2 	bl	80035dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ae:	461a      	mov	r2, r3
 80028b0:	2308      	movs	r3, #8
 80028b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 ff78 	bl	80037ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	2310      	movs	r3, #16
 80028d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d109      	bne.n	8002902 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002900:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	78db      	ldrb	r3, [r3, #3]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f006 fe6d 	bl	800960c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2302      	movs	r3, #2
 8002942:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295a:	461a      	mov	r2, r3
 800295c:	2320      	movs	r3, #32
 800295e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	461a      	mov	r2, r3
 8002978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3301      	adds	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f af62 	bne.w	8002856 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fa76 	bl	8006e88 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029a6:	f040 80db 	bne.w	8002b60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fa97 	bl	8006ee2 <USB_ReadDevAllInEpInterrupt>
 80029b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029ba:	e0cd      	b.n	8002b58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80c2 	beq.w	8002b4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fabd 	bl	8006f52 <USB_ReadDevInEPInterrupt>
 80029d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d057      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	2201      	movs	r2, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69f9      	ldr	r1, [r7, #28]
 8002a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a04:	4013      	ands	r3, r2
 8002a06:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	2301      	movs	r3, #1
 8002a18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	799b      	ldrb	r3, [r3, #6]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d132      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3320      	adds	r3, #32
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4403      	add	r3, r0
 8002a42:	331c      	adds	r3, #28
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4419      	add	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4403      	add	r3, r0
 8002a56:	3320      	adds	r3, #32
 8002a58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x3a2>
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a80:	461a      	mov	r2, r3
 8002a82:	2101      	movs	r1, #1
 8002a84:	f004 fac4 	bl	8007010 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f006 fd37 	bl	8009502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2308      	movs	r3, #8
 8002aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2310      	movs	r3, #16
 8002aca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2340      	movs	r3, #64	; 0x40
 8002ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d023      	beq.n	8002b3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af4:	6a38      	ldr	r0, [r7, #32]
 8002af6:	f003 fab1 	bl	800605c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3310      	adds	r3, #16
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 fd84 	bl	8009630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b34:	461a      	mov	r2, r3
 8002b36:	2302      	movs	r3, #2
 8002b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fcbb 	bl	80034c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f af2e 	bne.w	80029bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 f98f 	bl	8006e88 <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b74:	d122      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fea2 	bl	80038e8 <HAL_PCDEx_LPM_Callback>
 8002ba4:	e002      	b.n	8002bac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f006 fd22 	bl	80095f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 f961 	bl	8006e88 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd0:	d112      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f006 fcde 	bl	80095a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bf6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 f943 	bl	8006e88 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0c:	f040 80b7 	bne.w	8002d7e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2110      	movs	r1, #16
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fa16 	bl	800605c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c34:	e046      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c42:	461a      	mov	r2, r3
 8002c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5a:	0151      	lsls	r1, r2, #5
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	440a      	add	r2, r1
 8002c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8e:	0151      	lsls	r1, r2, #5
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	440a      	add	r2, r1
 8002c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	791b      	ldrb	r3, [r3, #4]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d3b2      	bcc.n	8002c36 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cde:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ce2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7bdb      	ldrb	r3, [r3, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfc:	f043 030b 	orr.w	r3, r3, #11
 8002d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d12:	f043 030b 	orr.w	r3, r3, #11
 8002d16:	6453      	str	r3, [r2, #68]	; 0x44
 8002d18:	e015      	b.n	8002d46 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d40:	f043 030b 	orr.w	r3, r3, #11
 8002d44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f004 f951 	bl	8007010 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f880 	bl	8006e88 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d123      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 f916 	bl	8006fca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 f9d3 	bl	800614e <USB_GetDevSpeed>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681c      	ldr	r4, [r3, #0]
 8002db4:	f001 fa08 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8002db8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f002 fed7 	bl	8005b74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f006 fbc3 	bl	8009552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 f851 	bl	8006e88 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d10a      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f006 fba0 	bl	8009536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 0208 	and.w	r2, r2, #8
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 f83c 	bl	8006e88 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d123      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e014      	b.n	8002e56 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb08 	bl	8003460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	3301      	adds	r3, #1
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d3e4      	bcc.n	8002e2c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f80e 	bl	8006e88 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d13c      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	e02b      	b.n	8002ed6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d115      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da12      	bge.n	8002ed0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3317      	adds	r3, #23
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fac8 	bl	8003460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d3cd      	bcc.n	8002e7e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 ffc6 	bl	8006e88 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f06:	d156      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f08:	2301      	movs	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0c:	e045      	b.n	8002f9a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d12e      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da2b      	bge.n	8002f94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002f48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d121      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f90:	6053      	str	r3, [r2, #4]
            break;
 8002f92:	e008      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	3301      	adds	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d3b3      	bcc.n	8002f0e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 ff64 	bl	8006e88 <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d10a      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f006 fb41 	bl	8009654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 ff4e 	bl	8006e88 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d115      	bne.n	8003022 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f006 fb31 	bl	8009670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e000      	b.n	8003022 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003020:	bf00      	nop
    }
  }
}
 8003022:	3734      	adds	r7, #52	; 0x34
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PCD_SetAddress+0x1a>
 800303e:	2302      	movs	r3, #2
 8003040:	e012      	b.n	8003068 <HAL_PCD_SetAddress+0x40>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fead 	bl	8006db8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	70fb      	strb	r3, [r7, #3]
 8003082:	460b      	mov	r3, r1
 8003084:	803b      	strh	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800308e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003092:	2b00      	cmp	r3, #0
 8003094:	da0f      	bge.n	80030b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3310      	adds	r3, #16
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	705a      	strb	r2, [r3, #1]
 80030b4:	e00f      	b.n	80030d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030e2:	883a      	ldrh	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	78ba      	ldrb	r2, [r7, #2]
 80030ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003100:	78bb      	ldrb	r3, [r7, #2]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d102      	bne.n	800310c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_PCD_EP_Open+0xaa>
 8003116:	2302      	movs	r3, #2
 8003118:	e00e      	b.n	8003138 <HAL_PCD_EP_Open+0xc8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 f835 	bl	8006198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003136:	7afb      	ldrb	r3, [r7, #11]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0f      	bge.n	8003174 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3310      	adds	r3, #16
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	705a      	strb	r2, [r3, #1]
 8003172:	e00f      	b.n	8003194 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_Close+0x6e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_Close+0x8c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 f873 	bl	80062a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	799b      	ldrb	r3, [r3, #6]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	799b      	ldrb	r3, [r3, #6]
 8003238:	461a      	mov	r2, r3
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	f003 f910 	bl	8006460 <USB_EPStartXfer>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800326c:	681b      	ldr	r3, [r3, #0]
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	460b      	mov	r3, r1
 8003288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3310      	adds	r3, #16
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	799b      	ldrb	r3, [r3, #6]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	461a      	mov	r2, r3
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	f003 f8be 	bl	8006460 <USB_EPStartXfer>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	7912      	ldrb	r2, [r2, #4]
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e04f      	b.n	80033ac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800330c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da0f      	bge.n	8003334 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	3310      	adds	r3, #16
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	705a      	strb	r2, [r3, #1]
 8003332:	e00d      	b.n	8003350 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_PCD_EP_SetStall+0x82>
 800336c:	2302      	movs	r3, #2
 800336e:	e01d      	b.n	80033ac <HAL_PCD_EP_SetStall+0xbe>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fc46 	bl	8006c10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7999      	ldrb	r1, [r3, #6]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800339c:	461a      	mov	r2, r3
 800339e:	f003 fe37 	bl	8007010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	7912      	ldrb	r2, [r2, #4]
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da0f      	bge.n	80033fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	3310      	adds	r3, #16
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	705a      	strb	r2, [r3, #1]
 80033f8:	e00f      	b.n	800341a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	f003 020f 	and.w	r2, r3, #15
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_EP_ClrStall+0x86>
 8003436:	2302      	movs	r3, #2
 8003438:	e00e      	b.n	8003458 <HAL_PCD_EP_ClrStall+0xa4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fc4f 	bl	8006cec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0c      	bge.n	800348e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3310      	adds	r3, #16
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00c      	b.n	80034a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f003 fa6e 	bl	8006990 <USB_EPStopXfer>
 80034b4:	4603      	mov	r3, r0
 80034b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034b8:	7afb      	ldrb	r3, [r7, #11]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b08a      	sub	sp, #40	; 0x28
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3310      	adds	r3, #16
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d901      	bls.n	80034fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	429a      	cmp	r2, r3
 800350e:	d902      	bls.n	8003516 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3303      	adds	r3, #3
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800351e:	e02a      	b.n	8003576 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	429a      	cmp	r2, r3
 8003534:	d902      	bls.n	800353c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3303      	adds	r3, #3
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68d9      	ldr	r1, [r3, #12]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4603      	mov	r3, r0
 8003558:	6978      	ldr	r0, [r7, #20]
 800355a:	f003 fac3 	bl	8006ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	441a      	add	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	429a      	cmp	r2, r3
 800358a:	d809      	bhi.n	80035a0 <PCD_WriteEmptyTxFifo+0xde>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003594:	429a      	cmp	r2, r3
 8003596:	d203      	bcs.n	80035a0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1bf      	bne.n	8003520 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d811      	bhi.n	80035d0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	2201      	movs	r2, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035cc:	4013      	ands	r3, r2
 80035ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	333c      	adds	r3, #60	; 0x3c
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d17b      	bne.n	800370a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f240 80b9 	bls.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80b3 	beq.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	e0a7      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	2320      	movs	r3, #32
 8003662:	6093      	str	r3, [r2, #8]
 8003664:	e098      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 8093 	bne.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a4b      	ldr	r2, [pc, #300]	; (80037a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d90f      	bls.n	800369a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	e07e      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	0159      	lsls	r1, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	440b      	add	r3, r1
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d114      	bne.n	80036fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036e4:	461a      	mov	r2, r3
 80036e6:	2101      	movs	r1, #1
 80036e8:	f003 fc92 	bl	8007010 <USB_EP0_OutStart>
 80036ec:	e006      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 fee2 	bl	80094cc <HAL_PCD_DataOutStageCallback>
 8003708:	e046      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d124      	bne.n	800375c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	e032      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	2320      	movs	r3, #32
 800374c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f005 feb9 	bl	80094cc <HAL_PCD_DataOutStageCallback>
 800375a:	e01d      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2100      	movs	r1, #0
 8003788:	f003 fc42 	bl	8007010 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f005 fe9a 	bl	80094cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	4f54300a 	.word	0x4f54300a
 80037a8:	4f54310a 	.word	0x4f54310a

080037ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	333c      	adds	r3, #60	; 0x3c
 80037c4:	3304      	adds	r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d90e      	bls.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f005 fe51 	bl	80094a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d90c      	bls.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	799b      	ldrb	r3, [r3, #6]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003820:	461a      	mov	r2, r3
 8003822:	2101      	movs	r1, #1
 8003824:	f003 fbf4 	bl	8007010 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	4f54300a 	.word	0x4f54300a

08003838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
 8003844:	4613      	mov	r3, r2
 8003846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003856:	883b      	ldrh	r3, [r7, #0]
 8003858:	0419      	lsls	r1, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	430a      	orrs	r2, r1
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
 8003864:	e028      	b.n	80038b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e00d      	b.n	8003896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3340      	adds	r3, #64	; 0x40
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	3301      	adds	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	3b01      	subs	r3, #1
 800389c:	429a      	cmp	r2, r3
 800389e:	d3ec      	bcc.n	800387a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038a0:	883b      	ldrh	r3, [r7, #0]
 80038a2:	0418      	lsls	r0, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4302      	orrs	r2, r0
 80038b0:	3340      	adds	r3, #64	; 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e267      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b7e      	ldr	r3, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e242      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b70      	ldr	r3, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b69      	ldr	r3, [pc, #420]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a68      	ldr	r2, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f9b0 	bl	8001d1c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe f9ac 	bl	8001d1c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e207      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe f99c 	bl	8001d1c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe f998 	bl	8001d1c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1f3      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1c7      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe f951 	bl	8001d1c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fe f94d 	bl	8001d1c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1a8      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f930 	bl	8001d1c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fe f92c 	bl	8001d1c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e187      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d036      	beq.n	8003b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe f910 	bl	8001d1c <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fe f90c 	bl	8001d1c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e167      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fe f8f9 	bl	8001d1c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe f8f5 	bl	8001d1c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d907      	bls.n	8003b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e150      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b88      	ldr	r3, [pc, #544]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7c      	ldr	r2, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7a      	ldr	r3, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b74      	ldr	r3, [pc, #464]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe f8b5 	bl	8001d1c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fe f8b1 	bl	8001d1c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e10c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x2ea>
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a63      	ldr	r2, [pc, #396]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x30c>
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5b      	ldr	r2, [pc, #364]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003c0c:	4b58      	ldr	r3, [pc, #352]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a57      	ldr	r2, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a54      	ldr	r2, [pc, #336]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe f876 	bl	8001d1c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fe f872 	bl	8001d1c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0cb      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x334>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe f860 	bl	8001d1c <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe f85c 	bl	8001d1c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0b5      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a1 	beq.w	8003de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d05c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d141      	bne.n	8003d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f830 	bl	8001d1c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe f82c 	bl	8001d1c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e087      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	491b      	ldr	r1, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fe f805 	bl	8001d1c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fe f801 	bl	8001d1c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e05c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x416>
 8003d34:	e054      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ffee 	bl	8001d1c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd ffea 	bl	8001d1c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e045      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x444>
 8003d62:	e03d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e038      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x4ec>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d028      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d121      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d11a      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cc      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e04:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d90c      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b8      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e5c:	4b53      	ldr	r3, [pc, #332]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a52      	ldr	r2, [pc, #328]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	494d      	ldr	r1, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d044      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d119      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e067      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4934      	ldr	r1, [pc, #208]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee0:	f7fd ff1c 	bl	8001d1c <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fd ff18 	bl	8001d1c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e04f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 020c 	and.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1eb      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d20c      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e032      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4916      	ldr	r1, [pc, #88]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f76:	f000 f821 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	490a      	ldr	r1, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fe7c 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023c00 	.word	0x40023c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	0800cf4c 	.word	0x0800cf4c
 8003fb4:	2000003c 	.word	0x2000003c
 8003fb8:	20000040 	.word	0x20000040

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b094      	sub	sp, #80	; 0x50
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fcc:	2300      	movs	r3, #0
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x40>
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	f200 80e1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fee:	e0db      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ff4:	e0db      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ffa:	e0d8      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004006:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004012:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	2200      	movs	r2, #0
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
 800401c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
 800402a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	6139      	str	r1, [r7, #16]
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004060:	4659      	mov	r1, fp
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4651      	mov	r1, sl
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4651      	mov	r1, sl
 8004070:	ebb2 0801 	subs.w	r8, r2, r1
 8004074:	4659      	mov	r1, fp
 8004076:	eb63 0901 	sbc.w	r9, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408e:	4690      	mov	r8, r2
 8004090:	4699      	mov	r9, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb18 0303 	adds.w	r3, r8, r3
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	462b      	mov	r3, r5
 800409c:	eb49 0303 	adc.w	r3, r9, r3
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ae:	4629      	mov	r1, r5
 80040b0:	024b      	lsls	r3, r1, #9
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b8:	4621      	mov	r1, r4
 80040ba:	024a      	lsls	r2, r1, #9
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040cc:	f7fc f8d0 	bl	8000270 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	e058      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b38      	ldr	r3, [pc, #224]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	4611      	mov	r1, r2
 80040e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004106:	0150      	lsls	r0, r2, #5
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4641      	mov	r1, r8
 800410e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb63 0b01 	sbc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800412c:	ebb2 040a 	subs.w	r4, r2, sl
 8004130:	eb63 050b 	sbc.w	r5, r3, fp
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	464b      	mov	r3, r9
 8004150:	eb45 0303 	adc.w	r3, r5, r3
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	61fa      	str	r2, [r7, #28]
 800417c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004180:	f7fc f876 	bl	8000270 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800419c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3750      	adds	r7, #80	; 0x50
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2000003c 	.word	0x2000003c

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	0800cf5c 	.word	0x0800cf5c

08004208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800420c:	f7ff ffdc 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0b5b      	lsrs	r3, r3, #13
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK2Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	0800cf5c 	.word	0x0800cf5c

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004254:	2b00      	cmp	r3, #0
 8004256:	d035      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004258:	4b62      	ldr	r3, [pc, #392]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800425e:	f7fd fd5d 	bl	8001d1c <HAL_GetTick>
 8004262:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004266:	f7fd fd59 	bl	8001d1c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0b0      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004278:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	019a      	lsls	r2, r3, #6
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	071b      	lsls	r3, r3, #28
 8004290:	4955      	ldr	r1, [pc, #340]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004298:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f7fd fd3d 	bl	8001d1c <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042a6:	f7fd fd39 	bl	8001d1c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e090      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b8:	4b4b      	ldr	r3, [pc, #300]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8083 	beq.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a43      	ldr	r2, [pc, #268]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3e      	ldr	r2, [pc, #248]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042fa:	f7fd fd0f 	bl	8001d1c <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd fd0b 	bl	8001d1c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e062      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004314:	4b35      	ldr	r3, [pc, #212]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004320:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004328:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02f      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	429a      	cmp	r2, r3
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d114      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004366:	f7fd fcd9 	bl	8001d1c <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fcd5 	bl	8001d1c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e02a      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439c:	d10d      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]
 80043b8:	e005      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043c4:	6093      	str	r3, [r2, #8]
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d2:	4905      	ldr	r1, [pc, #20]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	42470068 	.word	0x42470068
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000
 80043f0:	42470e40 	.word	0x42470e40

080043f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e073      	b.n	80044f2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	7f5b      	ldrb	r3, [r3, #29]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd fa0c 	bl	8001838 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b10      	cmp	r3, #16
 8004432:	d055      	beq.n	80044e0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	22ca      	movs	r2, #202	; 0xca
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2253      	movs	r2, #83	; 0x53
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f8dd 	bl	8004604 <RTC_EnterInitMode>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d12c      	bne.n	80044ae <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004466:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6899      	ldr	r1, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6919      	ldr	r1, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	041a      	lsls	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8e4 	bl	8004672 <RTC_ExitInitMode>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d110      	bne.n	80044d6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ff      	movs	r2, #255	; 0xff
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
 80044de:	e001      	b.n	80044e4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800452c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004530:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0d9b      	lsrs	r3, r3, #22
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11a      	bne.n	80045ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f89e 	bl	80046bc <RTC_Bcd2ToByte>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f895 	bl	80046bc <RTC_Bcd2ToByte>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	789b      	ldrb	r3, [r3, #2]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f88c 	bl	80046bc <RTC_Bcd2ToByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <HAL_RTC_WaitForSynchro+0x48>)
 80045ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045cc:	f7fd fba6 	bl	8001d1c <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045d2:	e009      	b.n	80045e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d4:	f7fd fba2 	bl	8001d1c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e2:	d901      	bls.n	80045e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e007      	b.n	80045f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	00017f5f 	.word	0x00017f5f

08004604 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d122      	bne.n	8004668 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004630:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004632:	f7fd fb73 	bl	8001d1c <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004638:	e00c      	b.n	8004654 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800463a:	f7fd fb6f 	bl	8001d1c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004648:	d904      	bls.n	8004654 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <RTC_EnterInitMode+0x64>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d1e8      	bne.n	800463a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff8b 	bl	80045b8 <HAL_RTC_WaitForSynchro>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d004      	beq.n	80046b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2204      	movs	r2, #4
 80046ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	b2db      	uxtb	r3, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07b      	b.n	8004802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd f8d4 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	ea42 0103 	orr.w	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	f003 0104 	and.w	r1, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0210 	and.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10e      	bne.n	800484c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
    return;
 800484a:	e0ce      	b.n	80049ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_SPI_IRQHandler+0x5e>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
    return;
 8004868:	e0bf      	b.n	80049ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_SPI_IRQHandler+0x7e>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80b0 	beq.w	80049ea <HAL_SPI_IRQHandler+0x1de>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80aa 	beq.w	80049ea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d023      	beq.n	80048e8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d011      	beq.n	80048d0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0204 	orr.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	e00b      	b.n	80048e8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]
        return;
 80048e6:	e080      	b.n	80049ea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f043 0208 	orr.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04f      	beq.n	80049e8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004956:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_SPI_IRQHandler+0x168>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d034      	beq.n	80049de <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0203 	bic.w	r2, r2, #3
 8004982:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d011      	beq.n	80049b0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <HAL_SPI_IRQHandler+0x1e4>)
 8004992:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd fb70 	bl	800207e <HAL_DMA_Abort_IT>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <HAL_SPI_IRQHandler+0x1e4>)
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd fb5a 	bl	800207e <HAL_DMA_Abort_IT>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80049dc:	e003      	b.n	80049e6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f808 	bl	80049f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80049e4:	e000      	b.n	80049e8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80049e6:	bf00      	nop
    return;
 80049e8:	bf00      	nop
  }
}
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	08004a09 	.word	0x08004a09

080049f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff ffe6 	bl	80049f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e038      	b.n	8004ab8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7fc f810 	bl	8000a80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3308      	adds	r3, #8
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 ff46 	bl	80058fc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	f000 ffa8 	bl	80059d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6858      	ldr	r0, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	f000 ffd5 	bl	8005a3c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	6892      	ldr	r2, [r2, #8]
 8004a9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6892      	ldr	r2, [r2, #8]
 8004aa6:	f041 0101 	orr.w	r1, r1, #1
 8004aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e042      	b.n	8004b58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd f838 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fc85 	bl	8005414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b0ba      	sub	sp, #232	; 0xe8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x66>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fb69 	bl	8005296 <UART_Receive_IT>
      return;
 8004bc4:	e25b      	b.n	800507e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80de 	beq.w	8004d8c <HAL_UART_IRQHandler+0x22c>
 8004bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80d1 	beq.w	8004d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_UART_IRQHandler+0xae>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_UART_IRQHandler+0xd2>
 8004c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f043 0202 	orr.w	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_UART_IRQHandler+0xf6>
 8004c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_UART_IRQHandler+0x126>
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f043 0208 	orr.w	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 81f2 	beq.w	8005074 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_UART_IRQHandler+0x14e>
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 faf4 	bl	8005296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_UART_IRQHandler+0x17a>
 8004cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04f      	beq.n	8004d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9fc 	bl	80050d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d141      	bne.n	8004d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1d9      	bne.n	8004cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	4a7e      	ldr	r2, [pc, #504]	; (8004f40 <HAL_UART_IRQHandler+0x3e0>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd f995 	bl	800207e <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	e00e      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f99e 	bl	80050ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e00a      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f99a 	bl	80050ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e006      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f996 	bl	80050ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004d86:	e175      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	bf00      	nop
    return;
 8004d8a:	e173      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 814f 	bne.w	8005034 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8148 	beq.w	8005034 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8141 	beq.w	8005034 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	f040 80b6 	bne.w	8004f44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8145 	beq.w	8005078 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004df6:	429a      	cmp	r2, r3
 8004df8:	f080 813e 	bcs.w	8005078 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	f000 8088 	beq.w	8004f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e1      	bne.n	8004e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e3      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd f83e 	bl	8001f9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8c1 	bl	80050c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f3e:	e09b      	b.n	8005078 <HAL_UART_IRQHandler+0x518>
 8004f40:	0800519f 	.word	0x0800519f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 808e 	beq.w	800507c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8089 	beq.w	800507c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e3      	bne.n	8004f6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e3      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0310 	bic.w	r3, r3, #16
 8004ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	69b9      	ldr	r1, [r7, #24]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	617b      	str	r3, [r7, #20]
   return(result);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e3      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f847 	bl	80050c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005032:	e023      	b.n	800507c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_UART_IRQHandler+0x4f4>
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8ba 	bl	80051c6 <UART_Transmit_IT>
    return;
 8005052:	e014      	b.n	800507e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <HAL_UART_IRQHandler+0x51e>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8fa 	bl	8005266 <UART_EndTransmit_IT>
    return;
 8005072:	e004      	b.n	800507e <HAL_UART_IRQHandler+0x51e>
    return;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_UART_IRQHandler+0x51e>
      return;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_UART_IRQHandler+0x51e>
      return;
 800507c:	bf00      	nop
  }
}
 800507e:	37e8      	adds	r7, #232	; 0xe8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b095      	sub	sp, #84	; 0x54
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005100:	643a      	str	r2, [r7, #64]	; 0x40
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	61fb      	str	r3, [r7, #28]
   return(result);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	2b01      	cmp	r3, #1
 800514e:	d119      	bne.n	8005184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0310 	bic.w	r3, r3, #16
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	61ba      	str	r2, [r7, #24]
 8005172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6979      	ldr	r1, [r7, #20]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	613b      	str	r3, [r7, #16]
   return(result);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005192:	bf00      	nop
 8005194:	3754      	adds	r7, #84	; 0x54
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff77 	bl	80050ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b21      	cmp	r3, #33	; 0x21
 80051d8:	d13e      	bne.n	8005258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d114      	bne.n	800520e <UART_Transmit_IT+0x48>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d110      	bne.n	800520e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]
 800520c:	e008      	b.n	8005220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6211      	str	r1, [r2, #32]
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4619      	mov	r1, r3
 800522e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10f      	bne.n	8005254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fefc 	bl	8005084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08c      	sub	sp, #48	; 0x30
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b22      	cmp	r3, #34	; 0x22
 80052a8:	f040 80ae 	bne.w	8005408 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b4:	d117      	bne.n	80052e6 <UART_Receive_IT+0x50>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d113      	bne.n	80052e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
 80052e4:	e026      	b.n	8005334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f8:	d007      	beq.n	800530a <UART_Receive_IT+0x74>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <UART_Receive_IT+0x82>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e008      	b.n	800532a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005324:	b2da      	uxtb	r2, r3
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4619      	mov	r1, r3
 8005342:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005344:	2b00      	cmp	r3, #0
 8005346:	d15d      	bne.n	8005404 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0220 	bic.w	r2, r2, #32
 8005356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	2b01      	cmp	r3, #1
 800538c:	d135      	bne.n	80053fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 0310 	bic.w	r3, r3, #16
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	623a      	str	r2, [r7, #32]
 80053b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d10a      	bne.n	80053ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fe64 	bl	80050c0 <HAL_UARTEx_RxEventCallback>
 80053f8:	e002      	b.n	8005400 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fe4c 	bl	8005098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e002      	b.n	800540a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3730      	adds	r7, #48	; 0x30
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b0c0      	sub	sp, #256	; 0x100
 800541a:	af00      	add	r7, sp, #0
 800541c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	ea40 0301 	orr.w	r3, r0, r1
 800543c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	431a      	orrs	r2, r3
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	431a      	orrs	r2, r3
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800546c:	f021 010c 	bic.w	r1, r1, #12
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547a:	430b      	orrs	r3, r1
 800547c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	6999      	ldr	r1, [r3, #24]
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	ea40 0301 	orr.w	r3, r0, r1
 800549a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b8f      	ldr	r3, [pc, #572]	; (80056e0 <UART_SetConfig+0x2cc>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d005      	beq.n	80054b4 <UART_SetConfig+0xa0>
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <UART_SetConfig+0x2d0>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d104      	bne.n	80054be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fe fea8 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 80054b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054bc:	e003      	b.n	80054c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054be:	f7fe fe8f 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80054c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	f040 810c 	bne.w	80056ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054e6:	4622      	mov	r2, r4
 80054e8:	462b      	mov	r3, r5
 80054ea:	1891      	adds	r1, r2, r2
 80054ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ee:	415b      	adcs	r3, r3
 80054f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f6:	4621      	mov	r1, r4
 80054f8:	eb12 0801 	adds.w	r8, r2, r1
 80054fc:	4629      	mov	r1, r5
 80054fe:	eb43 0901 	adc.w	r9, r3, r1
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005516:	4690      	mov	r8, r2
 8005518:	4699      	mov	r9, r3
 800551a:	4623      	mov	r3, r4
 800551c:	eb18 0303 	adds.w	r3, r8, r3
 8005520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005524:	462b      	mov	r3, r5
 8005526:	eb49 0303 	adc.w	r3, r9, r3
 800552a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800553a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800553e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005542:	460b      	mov	r3, r1
 8005544:	18db      	adds	r3, r3, r3
 8005546:	653b      	str	r3, [r7, #80]	; 0x50
 8005548:	4613      	mov	r3, r2
 800554a:	eb42 0303 	adc.w	r3, r2, r3
 800554e:	657b      	str	r3, [r7, #84]	; 0x54
 8005550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005558:	f7fa fe8a 	bl	8000270 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4b61      	ldr	r3, [pc, #388]	; (80056e8 <UART_SetConfig+0x2d4>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011c      	lsls	r4, r3, #4
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	1891      	adds	r1, r2, r2
 8005582:	64b9      	str	r1, [r7, #72]	; 0x48
 8005584:	415b      	adcs	r3, r3
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800558c:	4641      	mov	r1, r8
 800558e:	eb12 0a01 	adds.w	sl, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb43 0b01 	adc.w	fp, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ac:	4692      	mov	sl, r2
 80055ae:	469b      	mov	fp, r3
 80055b0:	4643      	mov	r3, r8
 80055b2:	eb1a 0303 	adds.w	r3, sl, r3
 80055b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ba:	464b      	mov	r3, r9
 80055bc:	eb4b 0303 	adc.w	r3, fp, r3
 80055c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d8:	460b      	mov	r3, r1
 80055da:	18db      	adds	r3, r3, r3
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	4613      	mov	r3, r2
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	647b      	str	r3, [r7, #68]	; 0x44
 80055e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ee:	f7fa fe3f 	bl	8000270 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <UART_SetConfig+0x2d4>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2264      	movs	r2, #100	; 0x64
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <UART_SetConfig+0x2d4>)
 8005610:	fba3 2302 	umull	r2, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800561c:	441c      	add	r4, r3
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800562c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	1891      	adds	r1, r2, r2
 8005636:	63b9      	str	r1, [r7, #56]	; 0x38
 8005638:	415b      	adcs	r3, r3
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005640:	4641      	mov	r1, r8
 8005642:	1851      	adds	r1, r2, r1
 8005644:	6339      	str	r1, [r7, #48]	; 0x30
 8005646:	4649      	mov	r1, r9
 8005648:	414b      	adcs	r3, r1
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005658:	4659      	mov	r1, fp
 800565a:	00cb      	lsls	r3, r1, #3
 800565c:	4651      	mov	r1, sl
 800565e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005662:	4651      	mov	r1, sl
 8005664:	00ca      	lsls	r2, r1, #3
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	4603      	mov	r3, r0
 800566c:	4642      	mov	r2, r8
 800566e:	189b      	adds	r3, r3, r2
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	464b      	mov	r3, r9
 8005676:	460a      	mov	r2, r1
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800568c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005694:	460b      	mov	r3, r1
 8005696:	18db      	adds	r3, r3, r3
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
 800569a:	4613      	mov	r3, r2
 800569c:	eb42 0303 	adc.w	r3, r2, r3
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056aa:	f7fa fde1 	bl	8000270 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <UART_SetConfig+0x2d4>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <UART_SetConfig+0x2d4>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4422      	add	r2, r4
 80056da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056dc:	e106      	b.n	80058ec <UART_SetConfig+0x4d8>
 80056de:	bf00      	nop
 80056e0:	40011000 	.word	0x40011000
 80056e4:	40011400 	.word	0x40011400
 80056e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056fe:	4642      	mov	r2, r8
 8005700:	464b      	mov	r3, r9
 8005702:	1891      	adds	r1, r2, r2
 8005704:	6239      	str	r1, [r7, #32]
 8005706:	415b      	adcs	r3, r3
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800570e:	4641      	mov	r1, r8
 8005710:	1854      	adds	r4, r2, r1
 8005712:	4649      	mov	r1, r9
 8005714:	eb43 0501 	adc.w	r5, r3, r1
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	00eb      	lsls	r3, r5, #3
 8005722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005726:	00e2      	lsls	r2, r4, #3
 8005728:	4614      	mov	r4, r2
 800572a:	461d      	mov	r5, r3
 800572c:	4643      	mov	r3, r8
 800572e:	18e3      	adds	r3, r4, r3
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005734:	464b      	mov	r3, r9
 8005736:	eb45 0303 	adc.w	r3, r5, r3
 800573a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800574a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800575a:	4629      	mov	r1, r5
 800575c:	008b      	lsls	r3, r1, #2
 800575e:	4621      	mov	r1, r4
 8005760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005764:	4621      	mov	r1, r4
 8005766:	008a      	lsls	r2, r1, #2
 8005768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800576c:	f7fa fd80 	bl	8000270 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4b60      	ldr	r3, [pc, #384]	; (80058f8 <UART_SetConfig+0x4e4>)
 8005776:	fba3 2302 	umull	r2, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	011c      	lsls	r4, r3, #4
 800577e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005782:	2200      	movs	r2, #0
 8005784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800578c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005790:	4642      	mov	r2, r8
 8005792:	464b      	mov	r3, r9
 8005794:	1891      	adds	r1, r2, r2
 8005796:	61b9      	str	r1, [r7, #24]
 8005798:	415b      	adcs	r3, r3
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a0:	4641      	mov	r1, r8
 80057a2:	1851      	adds	r1, r2, r1
 80057a4:	6139      	str	r1, [r7, #16]
 80057a6:	4649      	mov	r1, r9
 80057a8:	414b      	adcs	r3, r1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b8:	4659      	mov	r1, fp
 80057ba:	00cb      	lsls	r3, r1, #3
 80057bc:	4651      	mov	r1, sl
 80057be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c2:	4651      	mov	r1, sl
 80057c4:	00ca      	lsls	r2, r1, #3
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	4642      	mov	r2, r8
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d4:	464b      	mov	r3, r9
 80057d6:	460a      	mov	r2, r1
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f8:	4649      	mov	r1, r9
 80057fa:	008b      	lsls	r3, r1, #2
 80057fc:	4641      	mov	r1, r8
 80057fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005802:	4641      	mov	r1, r8
 8005804:	008a      	lsls	r2, r1, #2
 8005806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800580a:	f7fa fd31 	bl	8000270 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4611      	mov	r1, r2
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <UART_SetConfig+0x4e4>)
 8005816:	fba3 2301 	umull	r2, r3, r3, r1
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2264      	movs	r2, #100	; 0x64
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	1acb      	subs	r3, r1, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <UART_SetConfig+0x4e4>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005834:	441c      	add	r4, r3
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	673b      	str	r3, [r7, #112]	; 0x70
 800583e:	677a      	str	r2, [r7, #116]	; 0x74
 8005840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	1891      	adds	r1, r2, r2
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	415b      	adcs	r3, r3
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005854:	4641      	mov	r1, r8
 8005856:	1851      	adds	r1, r2, r1
 8005858:	6039      	str	r1, [r7, #0]
 800585a:	4649      	mov	r1, r9
 800585c:	414b      	adcs	r3, r1
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800586c:	4659      	mov	r1, fp
 800586e:	00cb      	lsls	r3, r1, #3
 8005870:	4651      	mov	r1, sl
 8005872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005876:	4651      	mov	r1, sl
 8005878:	00ca      	lsls	r2, r1, #3
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	4603      	mov	r3, r0
 8005880:	4642      	mov	r2, r8
 8005882:	189b      	adds	r3, r3, r2
 8005884:	66bb      	str	r3, [r7, #104]	; 0x68
 8005886:	464b      	mov	r3, r9
 8005888:	460a      	mov	r2, r1
 800588a:	eb42 0303 	adc.w	r3, r2, r3
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	663b      	str	r3, [r7, #96]	; 0x60
 800589a:	667a      	str	r2, [r7, #100]	; 0x64
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058a8:	4649      	mov	r1, r9
 80058aa:	008b      	lsls	r3, r1, #2
 80058ac:	4641      	mov	r1, r8
 80058ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b2:	4641      	mov	r1, r8
 80058b4:	008a      	lsls	r2, r1, #2
 80058b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058ba:	f7fa fcd9 	bl	8000270 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <UART_SetConfig+0x4e4>)
 80058c4:	fba3 1302 	umull	r1, r3, r3, r2
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	3332      	adds	r3, #50	; 0x32
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <UART_SetConfig+0x4e4>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	f003 020f 	and.w	r2, r3, #15
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4422      	add	r2, r4
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	bf00      	nop
 80058ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f8:	51eb851f 	.word	0x51eb851f

080058fc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	f023 0101 	bic.w	r1, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b08      	cmp	r3, #8
 8005924:	d102      	bne.n	800592c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005926:	2340      	movs	r3, #64	; 0x40
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e001      	b.n	8005930 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800593c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005942:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005948:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800594e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005954:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800595a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005960:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005966:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800596c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800598a:	4b10      	ldr	r3, [pc, #64]	; (80059cc <FSMC_NORSRAM_Init+0xd0>)
 800598c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005994:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800599c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	ea02 0103 	and.w	r1, r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4319      	orrs	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	0008fb7f 	.word	0x0008fb7f

080059d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	051b      	lsls	r3, r3, #20
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	3b02      	subs	r3, #2
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	3201      	adds	r2, #1
 8005a24:	4319      	orrs	r1, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a50:	d11d      	bne.n	8005a8e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	6811      	ldr	r1, [r2, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	6852      	ldr	r2, [r2, #4]
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	4311      	orrs	r1, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	6892      	ldr	r2, [r2, #8]
 8005a6e:	0212      	lsls	r2, r2, #8
 8005a70:	4311      	orrs	r1, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	6992      	ldr	r2, [r2, #24]
 8005a76:	4311      	orrs	r1, r2
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	68d2      	ldr	r2, [r2, #12]
 8005a7c:	0412      	lsls	r2, r2, #16
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	ea43 0102 	orr.w	r1, r3, r2
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a8c:	e005      	b.n	8005a9a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	cff00000 	.word	0xcff00000

08005aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aac:	b084      	sub	sp, #16
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	f107 001c 	add.w	r0, r7, #28
 8005aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005abe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d123      	bne.n	8005b0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fae2 	bl	80070cc <USB_CoreReset>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e01b      	b.n	8005b46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 fad6 	bl	80070cc <USB_CoreReset>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
 8005b38:	e005      	b.n	8005b46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b46:	7fbb      	ldrb	r3, [r7, #30]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10b      	bne.n	8005b64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f043 0206 	orr.w	r2, r3, #6
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b70:	b004      	add	sp, #16
 8005b72:	4770      	bx	lr

08005b74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d165      	bne.n	8005c54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4a41      	ldr	r2, [pc, #260]	; (8005c90 <USB_SetTurnaroundTime+0x11c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d906      	bls.n	8005b9e <USB_SetTurnaroundTime+0x2a>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <USB_SetTurnaroundTime+0x120>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d202      	bcs.n	8005b9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b98:	230f      	movs	r3, #15
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e062      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4a3c      	ldr	r2, [pc, #240]	; (8005c94 <USB_SetTurnaroundTime+0x120>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d306      	bcc.n	8005bb4 <USB_SetTurnaroundTime+0x40>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	; (8005c98 <USB_SetTurnaroundTime+0x124>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d202      	bcs.n	8005bb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bae:	230e      	movs	r3, #14
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e057      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4a38      	ldr	r2, [pc, #224]	; (8005c98 <USB_SetTurnaroundTime+0x124>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d306      	bcc.n	8005bca <USB_SetTurnaroundTime+0x56>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4a37      	ldr	r2, [pc, #220]	; (8005c9c <USB_SetTurnaroundTime+0x128>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d202      	bcs.n	8005bca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005bc4:	230d      	movs	r3, #13
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e04c      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <USB_SetTurnaroundTime+0x128>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d306      	bcc.n	8005be0 <USB_SetTurnaroundTime+0x6c>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4a32      	ldr	r2, [pc, #200]	; (8005ca0 <USB_SetTurnaroundTime+0x12c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d802      	bhi.n	8005be0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bda:	230c      	movs	r3, #12
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e041      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4a2f      	ldr	r2, [pc, #188]	; (8005ca0 <USB_SetTurnaroundTime+0x12c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d906      	bls.n	8005bf6 <USB_SetTurnaroundTime+0x82>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a2e      	ldr	r2, [pc, #184]	; (8005ca4 <USB_SetTurnaroundTime+0x130>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d802      	bhi.n	8005bf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bf0:	230b      	movs	r3, #11
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e036      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <USB_SetTurnaroundTime+0x130>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d906      	bls.n	8005c0c <USB_SetTurnaroundTime+0x98>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <USB_SetTurnaroundTime+0x134>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d802      	bhi.n	8005c0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c06:	230a      	movs	r3, #10
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e02b      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <USB_SetTurnaroundTime+0x134>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d906      	bls.n	8005c22 <USB_SetTurnaroundTime+0xae>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a25      	ldr	r2, [pc, #148]	; (8005cac <USB_SetTurnaroundTime+0x138>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d202      	bcs.n	8005c22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c1c:	2309      	movs	r3, #9
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e020      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <USB_SetTurnaroundTime+0x138>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d306      	bcc.n	8005c38 <USB_SetTurnaroundTime+0xc4>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <USB_SetTurnaroundTime+0x13c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d802      	bhi.n	8005c38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c32:	2308      	movs	r3, #8
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e015      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <USB_SetTurnaroundTime+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d906      	bls.n	8005c4e <USB_SetTurnaroundTime+0xda>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <USB_SetTurnaroundTime+0x140>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d202      	bcs.n	8005c4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c48:	2307      	movs	r3, #7
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e00a      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c4e:	2306      	movs	r3, #6
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e007      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c5a:	2309      	movs	r3, #9
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e001      	b.n	8005c64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c60:	2309      	movs	r3, #9
 8005c62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	00d8acbf 	.word	0x00d8acbf
 8005c94:	00e4e1c0 	.word	0x00e4e1c0
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	01067380 	.word	0x01067380
 8005ca0:	011a499f 	.word	0x011a499f
 8005ca4:	01312cff 	.word	0x01312cff
 8005ca8:	014ca43f 	.word	0x014ca43f
 8005cac:	016e3600 	.word	0x016e3600
 8005cb0:	01a6ab1f 	.word	0x01a6ab1f
 8005cb4:	01e84800 	.word	0x01e84800

08005cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f023 0201 	bic.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d115      	bne.n	8005d4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d2a:	200a      	movs	r0, #10
 8005d2c:	f7fc f802 	bl	8001d34 <HAL_Delay>
      ms += 10U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	330a      	adds	r3, #10
 8005d34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 f939 	bl	8006fae <USB_GetMode>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d01e      	beq.n	8005d80 <USB_SetCurrentMode+0x84>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2bc7      	cmp	r3, #199	; 0xc7
 8005d46:	d9f0      	bls.n	8005d2a <USB_SetCurrentMode+0x2e>
 8005d48:	e01a      	b.n	8005d80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d115      	bne.n	8005d7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d5c:	200a      	movs	r0, #10
 8005d5e:	f7fb ffe9 	bl	8001d34 <HAL_Delay>
      ms += 10U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	330a      	adds	r3, #10
 8005d66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f920 	bl	8006fae <USB_GetMode>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <USB_SetCurrentMode+0x84>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2bc7      	cmp	r3, #199	; 0xc7
 8005d78:	d9f0      	bls.n	8005d5c <USB_SetCurrentMode+0x60>
 8005d7a:	e001      	b.n	8005d80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e005      	b.n	8005d8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2bc8      	cmp	r3, #200	; 0xc8
 8005d84:	d101      	bne.n	8005d8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d94:	b084      	sub	sp, #16
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e009      	b.n	8005dc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	3340      	adds	r3, #64	; 0x40
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b0e      	cmp	r3, #14
 8005dcc:	d9f2      	bls.n	8005db4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11c      	bne.n	8005e10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0e:	e00b      	b.n	8005e28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10d      	bne.n	8005e58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e44:	2100      	movs	r1, #0
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f968 	bl	800611c <USB_SetDevSpeed>
 8005e4c:	e008      	b.n	8005e60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e4e:	2101      	movs	r1, #1
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f963 	bl	800611c <USB_SetDevSpeed>
 8005e56:	e003      	b.n	8005e60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e58:	2103      	movs	r1, #3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f95e 	bl	800611c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e60:	2110      	movs	r1, #16
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8fa 	bl	800605c <USB_FlushTxFifo>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f924 	bl	80060c0 <USB_FlushRxFifo>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e94:	461a      	mov	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e043      	b.n	8005f34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec2:	d118      	bne.n	8005ef6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e013      	b.n	8005f08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	461a      	mov	r2, r3
 8005eee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e008      	b.n	8005f08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	461a      	mov	r2, r3
 8005f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3301      	adds	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f38:	461a      	mov	r2, r3
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d3b5      	bcc.n	8005eac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	e043      	b.n	8005fce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f5c:	d118      	bne.n	8005f90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	461a      	mov	r2, r3
 8005f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	e013      	b.n	8005fa2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	461a      	mov	r2, r3
 8005f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e008      	b.n	8005fa2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d3b5      	bcc.n	8005f46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ffa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f043 0210 	orr.w	r2, r3, #16
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <USB_DevInit+0x2c4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800601c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f043 0208 	orr.w	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006030:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006034:	2b01      	cmp	r3, #1
 8006036:	d107      	bne.n	8006048 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006054:	b004      	add	sp, #16
 8006056:	4770      	bx	lr
 8006058:	803c3800 	.word	0x803c3800

0800605c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006076:	d901      	bls.n	800607c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e01b      	b.n	80060b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	daf2      	bge.n	800606a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	019b      	lsls	r3, r3, #6
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80060a0:	d901      	bls.n	80060a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e006      	b.n	80060b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d0f0      	beq.n	8006094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80060d8:	d901      	bls.n	80060de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e018      	b.n	8006110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	daf2      	bge.n	80060cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2210      	movs	r2, #16
 80060ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80060fc:	d901      	bls.n	8006102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e006      	b.n	8006110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b10      	cmp	r3, #16
 800610c:	d0f0      	beq.n	80060f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b087      	sub	sp, #28
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]
 8006172:	e00a      	b.n	800618a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d002      	beq.n	8006180 <USB_GetDevSpeed+0x32>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d102      	bne.n	8006186 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006180:	2302      	movs	r3, #2
 8006182:	75fb      	strb	r3, [r7, #23]
 8006184:	e001      	b.n	800618a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006186:	230f      	movs	r3, #15
 8006188:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d13a      	bne.n	800622a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d155      	bne.n	8006298 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	791b      	ldrb	r3, [r3, #4]
 8006206:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006208:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	059b      	lsls	r3, r3, #22
 800620e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006210:	4313      	orrs	r3, r2
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e036      	b.n	8006298 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4313      	orrs	r3, r2
 800624a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11a      	bne.n	8006298 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800627e:	430b      	orrs	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d161      	bne.n	8006388 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062da:	d11f      	bne.n	800631c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f303 	lsl.w	r3, r1, r3
 8006332:	b29b      	uxth	r3, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800633c:	4013      	ands	r3, r2
 800633e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	2101      	movs	r1, #1
 8006352:	fa01 f303 	lsl.w	r3, r1, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006360:	4013      	ands	r3, r2
 8006362:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0159      	lsls	r1, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	440b      	add	r3, r1
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	4619      	mov	r1, r3
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <USB_DeactivateEndpoint+0x1b0>)
 8006382:	4013      	ands	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
 8006386:	e060      	b.n	800644a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639e:	d11f      	bne.n	80063e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	2101      	movs	r1, #1
 80063f2:	fa01 f303 	lsl.w	r3, r1, r3
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	43db      	mvns	r3, r3
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006400:	4013      	ands	r3, r2
 8006402:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f303 	lsl.w	r3, r1, r3
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	43db      	mvns	r3, r3
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006424:	4013      	ands	r3, r2
 8006426:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	440b      	add	r3, r1
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	4619      	mov	r1, r3
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <USB_DeactivateEndpoint+0x1b4>)
 8006446:	4013      	ands	r3, r2
 8006448:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	ec337800 	.word	0xec337800
 800645c:	eff37800 	.word	0xeff37800

08006460 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 817a 	bne.w	8006776 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d132      	bne.n	80064f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e8:	0cdb      	lsrs	r3, r3, #19
 80064ea:	04db      	lsls	r3, r3, #19
 80064ec:	6113      	str	r3, [r2, #16]
 80064ee:	e092      	b.n	8006616 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	0cdb      	lsrs	r3, r3, #19
 800650c:	04db      	lsls	r3, r3, #19
 800650e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800652e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006532:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d11a      	bne.n	8006570 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d903      	bls.n	800654e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800656c:	6113      	str	r3, [r2, #16]
 800656e:	e01b      	b.n	80065a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6919      	ldr	r1, [r3, #16]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	440b      	add	r3, r1
 8006588:	1e59      	subs	r1, r3, #1
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006592:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006594:	4ba2      	ldr	r3, [pc, #648]	; (8006820 <USB_EPStartXfer+0x3c0>)
 8006596:	400b      	ands	r3, r1
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	0148      	lsls	r0, r1, #5
 800659c:	69f9      	ldr	r1, [r7, #28]
 800659e:	4401      	add	r1, r0
 80065a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065a4:	4313      	orrs	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065be:	69b9      	ldr	r1, [r7, #24]
 80065c0:	0148      	lsls	r0, r1, #5
 80065c2:	69f9      	ldr	r1, [r7, #28]
 80065c4:	4401      	add	r1, r0
 80065c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065ca:	4313      	orrs	r3, r2
 80065cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d11f      	bne.n	8006616 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006614:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d14b      	bne.n	80066b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d128      	bne.n	8006692 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d110      	bne.n	8006672 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e00f      	b.n	8006692 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e165      	b.n	8006980 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d015      	beq.n	8006708 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 814d 	beq.w	8006980 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	2101      	movs	r1, #1
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	69f9      	ldr	r1, [r7, #28]
 80066fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006702:	4313      	orrs	r3, r2
 8006704:	634b      	str	r3, [r1, #52]	; 0x34
 8006706:	e13b      	b.n	8006980 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d110      	bne.n	800673a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e00f      	b.n	800675a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	68d9      	ldr	r1, [r3, #12]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	b298      	uxth	r0, r3
 8006768:	79fb      	ldrb	r3, [r7, #7]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f9b8 	bl	8006ae4 <USB_WritePacket>
 8006774:	e104      	b.n	8006980 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006790:	0cdb      	lsrs	r3, r3, #19
 8006792:	04db      	lsls	r3, r3, #19
 8006794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067b8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d131      	bne.n	8006824 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	0148      	lsls	r0, r1, #5
 80067f2:	69f9      	ldr	r1, [r7, #28]
 80067f4:	4401      	add	r1, r0
 80067f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067fa:	4313      	orrs	r3, r2
 80067fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800681c:	6113      	str	r3, [r2, #16]
 800681e:	e061      	b.n	80068e4 <USB_EPStartXfer+0x484>
 8006820:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d123      	bne.n	8006874 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006842:	69b9      	ldr	r1, [r7, #24]
 8006844:	0148      	lsls	r0, r1, #5
 8006846:	69f9      	ldr	r1, [r7, #28]
 8006848:	4401      	add	r1, r0
 800684a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800684e:	4313      	orrs	r3, r2
 8006850:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006870:	6113      	str	r3, [r2, #16]
 8006872:	e037      	b.n	80068e4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4413      	add	r3, r2
 800687e:	1e5a      	subs	r2, r3, #1
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	8afa      	ldrh	r2, [r7, #22]
 8006890:	fb03 f202 	mul.w	r2, r3, r2
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	04d9      	lsls	r1, r3, #19
 80068aa:	4b38      	ldr	r3, [pc, #224]	; (800698c <USB_EPStartXfer+0x52c>)
 80068ac:	400b      	ands	r3, r1
 80068ae:	69b9      	ldr	r1, [r7, #24]
 80068b0:	0148      	lsls	r0, r1, #5
 80068b2:	69f9      	ldr	r1, [r7, #28]
 80068b4:	4401      	add	r1, r0
 80068b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068ba:	4313      	orrs	r3, r2
 80068bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	0148      	lsls	r0, r1, #5
 80068d8:	69f9      	ldr	r1, [r7, #28]
 80068da:	4401      	add	r1, r0
 80068dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068e0:	4313      	orrs	r3, r2
 80068e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d10d      	bne.n	8006906 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	68d9      	ldr	r1, [r3, #12]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	460a      	mov	r2, r1
 8006904:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d128      	bne.n	8006960 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d110      	bne.n	8006940 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e00f      	b.n	8006960 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800697e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	1ff80000 	.word	0x1ff80000

08006990 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d14a      	bne.n	8006a44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c6:	f040 8086 	bne.w	8006ad6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d902      	bls.n	8006a28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e056      	b.n	8006ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a40:	d0e7      	beq.n	8006a12 <USB_EPStopXfer+0x82>
 8006a42:	e048      	b.n	8006ad6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d13b      	bne.n	8006ad6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d902      	bls.n	8006abc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aba:	e00c      	b.n	8006ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad4:	d0e7      	beq.n	8006aa6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	71fb      	strb	r3, [r7, #7]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d123      	bne.n	8006b52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b0a:	88bb      	ldrh	r3, [r7, #4]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e018      	b.n	8006b4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	031a      	lsls	r2, r3, #12
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	461a      	mov	r2, r3
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d3e2      	bcc.n	8006b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3724      	adds	r7, #36	; 0x24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b08b      	sub	sp, #44	; 0x2c
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	e014      	b.n	8006bb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	3301      	adds	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d3e6      	bcc.n	8006b8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bbe:	8bfb      	ldrh	r3, [r7, #30]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01e      	beq.n	8006c02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f107 0310 	add.w	r3, r7, #16
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	701a      	strb	r2, [r3, #0]
      i++;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	3301      	adds	r3, #1
 8006bee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bf6:	8bfb      	ldrh	r3, [r7, #30]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bfc:	8bfb      	ldrh	r3, [r7, #30]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ea      	bne.n	8006bd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	372c      	adds	r7, #44	; 0x2c
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d12c      	bne.n	8006c86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	db12      	blt.n	8006c64 <USB_EPSetStall+0x54>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00f      	beq.n	8006c64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	e02b      	b.n	8006cde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db12      	blt.n	8006cbe <USB_EPSetStall+0xae>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00f      	beq.n	8006cbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d128      	bne.n	8006d5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d003      	beq.n	8006d38 <USB_EPClearStall+0x4c>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	791b      	ldrb	r3, [r3, #4]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d138      	bne.n	8006daa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e027      	b.n	8006daa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d003      	beq.n	8006d8a <USB_EPClearStall+0x9e>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	791b      	ldrb	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d10f      	bne.n	8006daa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006dda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df2:	4313      	orrs	r3, r2
 8006df4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e32:	f023 0302 	bic.w	r3, r3, #2
 8006e36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4013      	ands	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	b29b      	uxth	r3, r3
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f44:	68bb      	ldr	r3, [r7, #8]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0301 	and.w	r3, r3, #1
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	460b      	mov	r3, r1
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	333c      	adds	r3, #60	; 0x3c
 8007026:	3304      	adds	r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <USB_EP0_OutStart+0xb8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d90a      	bls.n	800704a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007044:	d101      	bne.n	800704a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e037      	b.n	80070ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007078:	f043 0318 	orr.w	r3, r3, #24
 800707c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800708c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007090:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10f      	bne.n	80070b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	4f54300a 	.word	0x4f54300a

080070cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80070e4:	d901      	bls.n	80070ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e01b      	b.n	8007122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	daf2      	bge.n	80070d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800710e:	d901      	bls.n	8007114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e006      	b.n	8007122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d0f0      	beq.n	8007102 <USB_CoreReset+0x36>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800713c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007140:	f002 fc2e 	bl	80099a0 <USBD_static_malloc>
 8007144:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32b0      	adds	r2, #176	; 0xb0
 8007156:	2100      	movs	r1, #0
 8007158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800715c:	2302      	movs	r3, #2
 800715e:	e0d4      	b.n	800730a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007160:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007164:	2100      	movs	r1, #0
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f002 fc7e 	bl	8009a68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	32b0      	adds	r2, #176	; 0xb0
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32b0      	adds	r2, #176	; 0xb0
 8007186:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7c1b      	ldrb	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d138      	bne.n	800720a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007198:	4b5e      	ldr	r3, [pc, #376]	; (8007314 <USBD_CDC_Init+0x1e4>)
 800719a:	7819      	ldrb	r1, [r3, #0]
 800719c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a0:	2202      	movs	r2, #2
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f002 fad9 	bl	800975a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071a8:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <USBD_CDC_Init+0x1e4>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	3324      	adds	r3, #36	; 0x24
 80071be:	2201      	movs	r2, #1
 80071c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071c2:	4b55      	ldr	r3, [pc, #340]	; (8007318 <USBD_CDC_Init+0x1e8>)
 80071c4:	7819      	ldrb	r1, [r3, #0]
 80071c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ca:	2202      	movs	r2, #2
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 fac4 	bl	800975a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071d2:	4b51      	ldr	r3, [pc, #324]	; (8007318 <USBD_CDC_Init+0x1e8>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 020f 	and.w	r2, r3, #15
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ea:	2201      	movs	r2, #1
 80071ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071ee:	4b4b      	ldr	r3, [pc, #300]	; (800731c <USBD_CDC_Init+0x1ec>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 020f 	and.w	r2, r3, #15
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	3326      	adds	r3, #38	; 0x26
 8007204:	2210      	movs	r2, #16
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e035      	b.n	8007276 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800720a:	4b42      	ldr	r3, [pc, #264]	; (8007314 <USBD_CDC_Init+0x1e4>)
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	2202      	movs	r2, #2
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 faa1 	bl	800975a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007218:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <USBD_CDC_Init+0x1e4>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3324      	adds	r3, #36	; 0x24
 800722e:	2201      	movs	r2, #1
 8007230:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007232:	4b39      	ldr	r3, [pc, #228]	; (8007318 <USBD_CDC_Init+0x1e8>)
 8007234:	7819      	ldrb	r1, [r3, #0]
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	2202      	movs	r2, #2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fa8d 	bl	800975a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <USBD_CDC_Init+0x1e8>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007258:	2201      	movs	r2, #1
 800725a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800725c:	4b2f      	ldr	r3, [pc, #188]	; (800731c <USBD_CDC_Init+0x1ec>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f003 020f 	and.w	r2, r3, #15
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	3326      	adds	r3, #38	; 0x26
 8007272:	2210      	movs	r2, #16
 8007274:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <USBD_CDC_Init+0x1ec>)
 8007278:	7819      	ldrb	r1, [r3, #0]
 800727a:	2308      	movs	r3, #8
 800727c:	2203      	movs	r2, #3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f002 fa6b 	bl	800975a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <USBD_CDC_Init+0x1ec>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3324      	adds	r3, #36	; 0x24
 800729a:	2201      	movs	r2, #1
 800729c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	33b0      	adds	r3, #176	; 0xb0
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072d4:	2302      	movs	r3, #2
 80072d6:	e018      	b.n	800730a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	7c1b      	ldrb	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e0:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <USBD_CDC_Init+0x1e8>)
 80072e2:	7819      	ldrb	r1, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f002 fb22 	bl	8009938 <USBD_LL_PrepareReceive>
 80072f4:	e008      	b.n	8007308 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <USBD_CDC_Init+0x1e8>)
 80072f8:	7819      	ldrb	r1, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f002 fb18 	bl	8009938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	200000cf 	.word	0x200000cf
 8007318:	200000d0 	.word	0x200000d0
 800731c:	200000d1 	.word	0x200000d1

08007320 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800732c:	4b3a      	ldr	r3, [pc, #232]	; (8007418 <USBD_CDC_DeInit+0xf8>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f002 fa37 	bl	80097a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007338:	4b37      	ldr	r3, [pc, #220]	; (8007418 <USBD_CDC_DeInit+0xf8>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3324      	adds	r3, #36	; 0x24
 800734e:	2200      	movs	r2, #0
 8007350:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007352:	4b32      	ldr	r3, [pc, #200]	; (800741c <USBD_CDC_DeInit+0xfc>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f002 fa24 	bl	80097a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <USBD_CDC_DeInit+0xfc>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f003 020f 	and.w	r2, r3, #15
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007376:	2200      	movs	r2, #0
 8007378:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800737a:	4b29      	ldr	r3, [pc, #164]	; (8007420 <USBD_CDC_DeInit+0x100>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f002 fa10 	bl	80097a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007386:	4b26      	ldr	r3, [pc, #152]	; (8007420 <USBD_CDC_DeInit+0x100>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	3324      	adds	r3, #36	; 0x24
 800739c:	2200      	movs	r2, #0
 800739e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073a0:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <USBD_CDC_DeInit+0x100>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 020f 	and.w	r2, r3, #15
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	3326      	adds	r3, #38	; 0x26
 80073b6:	2200      	movs	r2, #0
 80073b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32b0      	adds	r2, #176	; 0xb0
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01f      	beq.n	800740c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	33b0      	adds	r3, #176	; 0xb0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32b0      	adds	r2, #176	; 0xb0
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 fae4 	bl	80099bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	32b0      	adds	r2, #176	; 0xb0
 80073fe:	2100      	movs	r1, #0
 8007400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200000cf 	.word	0x200000cf
 800741c:	200000d0 	.word	0x200000d0
 8007420:	200000d1 	.word	0x200000d1

08007424 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	32b0      	adds	r2, #176	; 0xb0
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	e0bf      	b.n	80075d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800745c:	2b00      	cmp	r3, #0
 800745e:	d050      	beq.n	8007502 <USBD_CDC_Setup+0xde>
 8007460:	2b20      	cmp	r3, #32
 8007462:	f040 80af 	bne.w	80075c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d03a      	beq.n	80074e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	da1b      	bge.n	80074b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	; 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800748e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	88d2      	ldrh	r2, [r2, #6]
 8007494:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b07      	cmp	r3, #7
 800749c:	bf28      	it	cs
 800749e:	2307      	movcs	r3, #7
 80074a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	89fa      	ldrh	r2, [r7, #14]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 fd49 	bl	8008f40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074ae:	e090      	b.n	80075d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	785a      	ldrb	r2, [r3, #1]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b3f      	cmp	r3, #63	; 0x3f
 80074c0:	d803      	bhi.n	80074ca <USBD_CDC_Setup+0xa6>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88db      	ldrh	r3, [r3, #6]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	e000      	b.n	80074cc <USBD_CDC_Setup+0xa8>
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074d2:	6939      	ldr	r1, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074da:	461a      	mov	r2, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 fd5b 	bl	8008f98 <USBD_CtlPrepareRx>
      break;
 80074e2:	e076      	b.n	80075d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	33b0      	adds	r3, #176	; 0xb0
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	7850      	ldrb	r0, [r2, #1]
 80074fa:	2200      	movs	r2, #0
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	4798      	blx	r3
      break;
 8007500:	e067      	b.n	80075d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b0b      	cmp	r3, #11
 8007508:	d851      	bhi.n	80075ae <USBD_CDC_Setup+0x18a>
 800750a:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <USBD_CDC_Setup+0xec>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007541 	.word	0x08007541
 8007514:	080075bd 	.word	0x080075bd
 8007518:	080075af 	.word	0x080075af
 800751c:	080075af 	.word	0x080075af
 8007520:	080075af 	.word	0x080075af
 8007524:	080075af 	.word	0x080075af
 8007528:	080075af 	.word	0x080075af
 800752c:	080075af 	.word	0x080075af
 8007530:	080075af 	.word	0x080075af
 8007534:	080075af 	.word	0x080075af
 8007538:	0800756b 	.word	0x0800756b
 800753c:	08007595 	.word	0x08007595
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b03      	cmp	r3, #3
 800754a:	d107      	bne.n	800755c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800754c:	f107 030a 	add.w	r3, r7, #10
 8007550:	2202      	movs	r2, #2
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fcf3 	bl	8008f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800755a:	e032      	b.n	80075c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fc7d 	bl	8008e5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	75fb      	strb	r3, [r7, #23]
          break;
 8007568:	e02b      	b.n	80075c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d107      	bne.n	8007586 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007576:	f107 030d 	add.w	r3, r7, #13
 800757a:	2201      	movs	r2, #1
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fcde 	bl	8008f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007584:	e01d      	b.n	80075c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fc68 	bl	8008e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800758e:	2303      	movs	r3, #3
 8007590:	75fb      	strb	r3, [r7, #23]
          break;
 8007592:	e016      	b.n	80075c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b03      	cmp	r3, #3
 800759e:	d00f      	beq.n	80075c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fc5b 	bl	8008e5e <USBD_CtlError>
            ret = USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075ac:	e008      	b.n	80075c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fc54 	bl	8008e5e <USBD_CtlError>
          ret = USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ba:	e002      	b.n	80075c2 <USBD_CDC_Setup+0x19e>
          break;
 80075bc:	bf00      	nop
 80075be:	e008      	b.n	80075d2 <USBD_CDC_Setup+0x1ae>
          break;
 80075c0:	bf00      	nop
      }
      break;
 80075c2:	e006      	b.n	80075d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fc49 	bl	8008e5e <USBD_CtlError>
      ret = USBD_FAIL;
 80075cc:	2303      	movs	r3, #3
 80075ce:	75fb      	strb	r3, [r7, #23]
      break;
 80075d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32b0      	adds	r2, #176	; 0xb0
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	e065      	b.n	80076d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	32b0      	adds	r2, #176	; 0xb0
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	f003 020f 	and.w	r2, r3, #15
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	3318      	adds	r3, #24
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d02f      	beq.n	8007690 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	f003 020f 	and.w	r2, r3, #15
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	3318      	adds	r3, #24
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	f003 010f 	and.w	r1, r3, #15
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	460b      	mov	r3, r1
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	440b      	add	r3, r1
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4403      	add	r3, r0
 8007658:	331c      	adds	r3, #28
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007666:	2b00      	cmp	r3, #0
 8007668:	d112      	bne.n	8007690 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3318      	adds	r3, #24
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007682:	78f9      	ldrb	r1, [r7, #3]
 8007684:	2300      	movs	r3, #0
 8007686:	2200      	movs	r2, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f002 f934 	bl	80098f6 <USBD_LL_Transmit>
 800768e:	e01f      	b.n	80076d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	33b0      	adds	r3, #176	; 0xb0
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d010      	beq.n	80076d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	33b0      	adds	r3, #176	; 0xb0
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32b0      	adds	r2, #176	; 0xb0
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	32b0      	adds	r2, #176	; 0xb0
 8007700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007708:	2303      	movs	r3, #3
 800770a:	e01a      	b.n	8007742 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f002 f932 	bl	800997a <USBD_LL_GetRxDataSize>
 8007716:	4602      	mov	r2, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	33b0      	adds	r3, #176	; 0xb0
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800773c:	4611      	mov	r1, r2
 800773e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	32b0      	adds	r2, #176	; 0xb0
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e025      	b.n	80077b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	33b0      	adds	r3, #176	; 0xb0
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01a      	beq.n	80077b6 <USBD_CDC_EP0_RxReady+0x6c>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007786:	2bff      	cmp	r3, #255	; 0xff
 8007788:	d015      	beq.n	80077b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	33b0      	adds	r3, #176	; 0xb0
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077aa:	b292      	uxth	r2, r2
 80077ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	22ff      	movs	r2, #255	; 0xff
 80077b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077c8:	2182      	movs	r1, #130	; 0x82
 80077ca:	4818      	ldr	r0, [pc, #96]	; (800782c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077cc:	f000 fd0f 	bl	80081ee <USBD_GetEpDesc>
 80077d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077d2:	2101      	movs	r1, #1
 80077d4:	4815      	ldr	r0, [pc, #84]	; (800782c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d6:	f000 fd0a 	bl	80081ee <USBD_GetEpDesc>
 80077da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077dc:	2181      	movs	r1, #129	; 0x81
 80077de:	4813      	ldr	r0, [pc, #76]	; (800782c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077e0:	f000 fd05 	bl	80081ee <USBD_GetEpDesc>
 80077e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2210      	movs	r2, #16
 80077f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d006      	beq.n	8007806 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007800:	711a      	strb	r2, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007814:	711a      	strb	r2, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2243      	movs	r2, #67	; 0x43
 800781e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007820:	4b02      	ldr	r3, [pc, #8]	; (800782c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	2000008c 	.word	0x2000008c

08007830 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007838:	2182      	movs	r1, #130	; 0x82
 800783a:	4818      	ldr	r0, [pc, #96]	; (800789c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800783c:	f000 fcd7 	bl	80081ee <USBD_GetEpDesc>
 8007840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007842:	2101      	movs	r1, #1
 8007844:	4815      	ldr	r0, [pc, #84]	; (800789c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007846:	f000 fcd2 	bl	80081ee <USBD_GetEpDesc>
 800784a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800784c:	2181      	movs	r1, #129	; 0x81
 800784e:	4813      	ldr	r0, [pc, #76]	; (800789c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007850:	f000 fccd 	bl	80081ee <USBD_GetEpDesc>
 8007854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2210      	movs	r2, #16
 8007860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2200      	movs	r2, #0
 800786c:	711a      	strb	r2, [r3, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f042 0202 	orr.w	r2, r2, #2
 8007874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d006      	beq.n	800788a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	711a      	strb	r2, [r3, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f042 0202 	orr.w	r2, r2, #2
 8007888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2243      	movs	r2, #67	; 0x43
 800788e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007890:	4b02      	ldr	r3, [pc, #8]	; (800789c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	2000008c 	.word	0x2000008c

080078a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078a8:	2182      	movs	r1, #130	; 0x82
 80078aa:	4818      	ldr	r0, [pc, #96]	; (800790c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078ac:	f000 fc9f 	bl	80081ee <USBD_GetEpDesc>
 80078b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078b2:	2101      	movs	r1, #1
 80078b4:	4815      	ldr	r0, [pc, #84]	; (800790c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b6:	f000 fc9a 	bl	80081ee <USBD_GetEpDesc>
 80078ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078bc:	2181      	movs	r1, #129	; 0x81
 80078be:	4813      	ldr	r0, [pc, #76]	; (800790c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078c0:	f000 fc95 	bl	80081ee <USBD_GetEpDesc>
 80078c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2210      	movs	r2, #16
 80078d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d006      	beq.n	80078e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2200      	movs	r2, #0
 80078dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e0:	711a      	strb	r2, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f4:	711a      	strb	r2, [r3, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2243      	movs	r2, #67	; 0x43
 80078fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000008c 	.word	0x2000008c

08007910 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	220a      	movs	r2, #10
 800791c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800791e:	4b03      	ldr	r3, [pc, #12]	; (800792c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000048 	.word	0x20000048

08007930 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	e009      	b.n	8007958 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	33b0      	adds	r3, #176	; 0xb0
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	32b0      	adds	r2, #176	; 0xb0
 800797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007986:	2303      	movs	r3, #3
 8007988:	e008      	b.n	800799c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	32b0      	adds	r2, #176	; 0xb0
 80079bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e004      	b.n	80079d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32b0      	adds	r2, #176	; 0xb0
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32b0      	adds	r2, #176	; 0xb0
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e018      	b.n	8007a44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <USBD_CDC_ReceivePacket+0x68>)
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 ff85 	bl	8009938 <USBD_LL_PrepareReceive>
 8007a2e:	e008      	b.n	8007a42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <USBD_CDC_ReceivePacket+0x68>)
 8007a32:	7819      	ldrb	r1, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 ff7b 	bl	8009938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200000d0 	.word	0x200000d0

08007a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e01f      	b.n	8007aa8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	79fa      	ldrb	r2, [r7, #7]
 8007a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 fdf5 	bl	800968c <USBD_LL_Init>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e025      	b.n	8007b14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f107 020e 	add.w	r2, r7, #14
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	4602      	mov	r2, r0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fdfd 	bl	8009724 <USBD_LL_Start>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f90e 	bl	8008dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bdc:	461a      	mov	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d01a      	beq.n	8007c28 <USBD_LL_SetupStage+0x72>
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d822      	bhi.n	8007c3c <USBD_LL_SetupStage+0x86>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <USBD_LL_SetupStage+0x4a>
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d00a      	beq.n	8007c14 <USBD_LL_SetupStage+0x5e>
 8007bfe:	e01d      	b.n	8007c3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb65 	bl	80082d8 <USBD_StdDevReq>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	e020      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbcd 	bl	80083bc <USBD_StdItfReq>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
      break;
 8007c26:	e016      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc2f 	bl	8008494 <USBD_StdEPReq>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3a:	e00c      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fdca 	bl	80097e4 <USBD_LL_StallEP>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	bf00      	nop
  }

  return ret;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d16e      	bne.n	8007d56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f040 8098 	bne.w	8007dbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d913      	bls.n	8007cc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	1ad2      	subs	r2, r2, r3
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	bf28      	it	cs
 8007cb2:	4613      	movcs	r3, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f001 f98a 	bl	8008fd2 <USBD_CtlContinueRx>
 8007cbe:	e07d      	b.n	8007dbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d014      	beq.n	8007cf8 <USBD_LL_DataOutStage+0x98>
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d81d      	bhi.n	8007d0e <USBD_LL_DataOutStage+0xae>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <USBD_LL_DataOutStage+0x7c>
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d003      	beq.n	8007ce2 <USBD_LL_DataOutStage+0x82>
 8007cda:	e018      	b.n	8007d0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce0:	e018      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa64 	bl	80081ba <USBD_CoreFindIF>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75bb      	strb	r3, [r7, #22]
            break;
 8007cf6:	e00d      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fa66 	bl	80081d4 <USBD_CoreFindEP>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d0c:	e002      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75bb      	strb	r3, [r7, #22]
            break;
 8007d12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d119      	bne.n	8007d4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d113      	bne.n	8007d4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d26:	7dba      	ldrb	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	32ae      	adds	r2, #174	; 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d36:	7dba      	ldrb	r2, [r7, #22]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d3e:	7dba      	ldrb	r2, [r7, #22]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 f950 	bl	8008ff4 <USBD_CtlSendStatus>
 8007d54:	e032      	b.n	8007dbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fa37 	bl	80081d4 <USBD_CoreFindEP>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d6a:	7dbb      	ldrb	r3, [r7, #22]
 8007d6c:	2bff      	cmp	r3, #255	; 0xff
 8007d6e:	d025      	beq.n	8007dbc <USBD_LL_DataOutStage+0x15c>
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d122      	bne.n	8007dbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d117      	bne.n	8007db2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d82:	7dba      	ldrb	r2, [r7, #22]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	32ae      	adds	r2, #174	; 0xae
 8007d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d92:	7dba      	ldrb	r2, [r7, #22]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d9a:	7dba      	ldrb	r2, [r7, #22]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	32ae      	adds	r2, #174	; 0xae
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	7afa      	ldrb	r2, [r7, #11]
 8007da8:	4611      	mov	r1, r2
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	e000      	b.n	8007dbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d16f      	bne.n	8007eba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d15a      	bne.n	8007ea0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d914      	bls.n	8007e20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 f8b2 	bl	8008f76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f001 fd8d 	bl	8009938 <USBD_LL_PrepareReceive>
 8007e1e:	e03f      	b.n	8007ea0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d11c      	bne.n	8007e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d316      	bcc.n	8007e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d20f      	bcs.n	8007e66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 f893 	bl	8008f76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 fd6a 	bl	8009938 <USBD_LL_PrepareReceive>
 8007e64:	e01c      	b.n	8007ea0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d10f      	bne.n	8007e92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f001 fca5 	bl	80097e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 f8bd 	bl	800901a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d03a      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fe42 	bl	8007b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eb8:	e032      	b.n	8007f20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f985 	bl	80081d4 <USBD_CoreFindEP>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2bff      	cmp	r3, #255	; 0xff
 8007ed2:	d025      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d122      	bne.n	8007f20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d11c      	bne.n	8007f20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ee6:	7dfa      	ldrb	r2, [r7, #23]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	32ae      	adds	r2, #174	; 0xae
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d014      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ef6:	7dfa      	ldrb	r2, [r7, #23]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007efe:	7dfa      	ldrb	r2, [r7, #23]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	32ae      	adds	r2, #174	; 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	7afa      	ldrb	r2, [r7, #11]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f16:	7dbb      	ldrb	r3, [r7, #22]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
 8007f1e:	e000      	b.n	8007f22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d014      	beq.n	8007f90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6852      	ldr	r2, [r2, #4]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	4611      	mov	r1, r2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fbdf 	bl	800975a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2180      	movs	r1, #128	; 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fbd1 	bl	800975a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2240      	movs	r2, #64	; 0x40
 8007fc2:	621a      	str	r2, [r3, #32]

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d006      	beq.n	8008010 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2da      	uxtb	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2204      	movs	r2, #4
 8008014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b04      	cmp	r3, #4
 8008038:	d106      	bne.n	8008048 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008040:	b2da      	uxtb	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b03      	cmp	r3, #3
 8008068:	d110      	bne.n	800808c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	32ae      	adds	r2, #174	; 0xae
 80080ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e01c      	b.n	80080f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d115      	bne.n	80080f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	; 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	78fa      	ldrb	r2, [r7, #3]
 80080ea:	4611      	mov	r1, r2
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	32ae      	adds	r2, #174	; 0xae
 8008110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	e01c      	b.n	8008156 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d115      	bne.n	8008154 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	; 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32ae      	adds	r2, #174	; 0xae
 8008146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6852      	ldr	r2, [r2, #4]
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	4611      	mov	r1, r2
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081ac:	2303      	movs	r3, #3
 80081ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b086      	sub	sp, #24
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	429a      	cmp	r2, r3
 8008214:	d920      	bls.n	8008258 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800821e:	e013      	b.n	8008248 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008220:	f107 030a 	add.w	r3, r7, #10
 8008224:	4619      	mov	r1, r3
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	f000 f81b 	bl	8008262 <USBD_GetNextDesc>
 800822c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	2b05      	cmp	r3, #5
 8008234:	d108      	bne.n	8008248 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	789b      	ldrb	r3, [r3, #2]
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	429a      	cmp	r2, r3
 8008242:	d008      	beq.n	8008256 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008244:	2300      	movs	r3, #0
 8008246:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	b29a      	uxth	r2, r3
 800824e:	897b      	ldrh	r3, [r7, #10]
 8008250:	429a      	cmp	r2, r3
 8008252:	d8e5      	bhi.n	8008220 <USBD_GetEpDesc+0x32>
 8008254:	e000      	b.n	8008258 <USBD_GetEpDesc+0x6a>
          break;
 8008256:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008258:	693b      	ldr	r3, [r7, #16]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	881a      	ldrh	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	4413      	add	r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	3301      	adds	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082ba:	8a3b      	ldrh	r3, [r7, #16]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	b21a      	sxth	r2, r3
 80082c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b21b      	sxth	r3, r3
 80082c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082ca:	89fb      	ldrh	r3, [r7, #14]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	371c      	adds	r7, #28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d005      	beq.n	80082fe <USBD_StdDevReq+0x26>
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d857      	bhi.n	80083a6 <USBD_StdDevReq+0xce>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00f      	beq.n	800831a <USBD_StdDevReq+0x42>
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d153      	bne.n	80083a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32ae      	adds	r2, #174	; 0xae
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e04a      	b.n	80083b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b09      	cmp	r3, #9
 8008320:	d83b      	bhi.n	800839a <USBD_StdDevReq+0xc2>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBD_StdDevReq+0x50>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800837d 	.word	0x0800837d
 800832c:	08008391 	.word	0x08008391
 8008330:	0800839b 	.word	0x0800839b
 8008334:	08008387 	.word	0x08008387
 8008338:	0800839b 	.word	0x0800839b
 800833c:	0800835b 	.word	0x0800835b
 8008340:	08008351 	.word	0x08008351
 8008344:	0800839b 	.word	0x0800839b
 8008348:	08008373 	.word	0x08008373
 800834c:	08008365 	.word	0x08008365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa3c 	bl	80087d0 <USBD_GetDescriptor>
          break;
 8008358:	e024      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fba1 	bl	8008aa4 <USBD_SetAddress>
          break;
 8008362:	e01f      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbe0 	bl	8008b2c <USBD_SetConfig>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
          break;
 8008370:	e018      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc83 	bl	8008c80 <USBD_GetConfig>
          break;
 800837a:	e013      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fcb4 	bl	8008cec <USBD_GetStatus>
          break;
 8008384:	e00e      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fce3 	bl	8008d54 <USBD_SetFeature>
          break;
 800838e:	e009      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fd07 	bl	8008da6 <USBD_ClrFeature>
          break;
 8008398:	e004      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fd5e 	bl	8008e5e <USBD_CtlError>
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fd58 	bl	8008e5e <USBD_CtlError>
      break;
 80083ae:	bf00      	nop
  }

  return ret;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d005      	beq.n	80083e2 <USBD_StdItfReq+0x26>
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d852      	bhi.n	8008480 <USBD_StdItfReq+0xc4>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <USBD_StdItfReq+0x26>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d14e      	bne.n	8008480 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d840      	bhi.n	8008472 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	889b      	ldrh	r3, [r3, #4]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d836      	bhi.n	8008468 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	889b      	ldrh	r3, [r3, #4]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fed9 	bl	80081ba <USBD_CoreFindIF>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2bff      	cmp	r3, #255	; 0xff
 8008410:	d01d      	beq.n	800844e <USBD_StdItfReq+0x92>
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11a      	bne.n	800844e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008418:	7bba      	ldrb	r2, [r7, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32ae      	adds	r2, #174	; 0xae
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00f      	beq.n	8008448 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008428:	7bba      	ldrb	r2, [r7, #14]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008430:	7bba      	ldrb	r2, [r7, #14]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	; 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008446:	e004      	b.n	8008452 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800844c:	e001      	b.n	8008452 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	88db      	ldrh	r3, [r3, #6]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d110      	bne.n	800847c <USBD_StdItfReq+0xc0>
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10d      	bne.n	800847c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fdc7 	bl	8008ff4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008466:	e009      	b.n	800847c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fcf7 	bl	8008e5e <USBD_CtlError>
          break;
 8008470:	e004      	b.n	800847c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fcf2 	bl	8008e5e <USBD_CtlError>
          break;
 800847a:	e000      	b.n	800847e <USBD_StdItfReq+0xc2>
          break;
 800847c:	bf00      	nop
      }
      break;
 800847e:	e004      	b.n	800848a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fceb 	bl	8008e5e <USBD_CtlError>
      break;
 8008488:	bf00      	nop
  }

  return ret;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <USBD_StdEPReq+0x30>
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	f200 817f 	bhi.w	80087b8 <USBD_StdEPReq+0x324>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02a      	beq.n	8008514 <USBD_StdEPReq+0x80>
 80084be:	2b20      	cmp	r3, #32
 80084c0:	f040 817a 	bne.w	80087b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fe83 	bl	80081d4 <USBD_CoreFindEP>
 80084ce:	4603      	mov	r3, r0
 80084d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084d2:	7b7b      	ldrb	r3, [r7, #13]
 80084d4:	2bff      	cmp	r3, #255	; 0xff
 80084d6:	f000 8174 	beq.w	80087c2 <USBD_StdEPReq+0x32e>
 80084da:	7b7b      	ldrb	r3, [r7, #13]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 8170 	bne.w	80087c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084e2:	7b7a      	ldrb	r2, [r7, #13]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084ea:	7b7a      	ldrb	r2, [r7, #13]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32ae      	adds	r2, #174	; 0xae
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8163 	beq.w	80087c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	; 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008512:	e156      	b.n	80087c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d008      	beq.n	800852e <USBD_StdEPReq+0x9a>
 800851c:	2b03      	cmp	r3, #3
 800851e:	f300 8145 	bgt.w	80087ac <USBD_StdEPReq+0x318>
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 809b 	beq.w	800865e <USBD_StdEPReq+0x1ca>
 8008528:	2b01      	cmp	r3, #1
 800852a:	d03c      	beq.n	80085a6 <USBD_StdEPReq+0x112>
 800852c:	e13e      	b.n	80087ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d002      	beq.n	8008540 <USBD_StdEPReq+0xac>
 800853a:	2b03      	cmp	r3, #3
 800853c:	d016      	beq.n	800856c <USBD_StdEPReq+0xd8>
 800853e:	e02c      	b.n	800859a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <USBD_StdEPReq+0xce>
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b80      	cmp	r3, #128	; 0x80
 800854a:	d00a      	beq.n	8008562 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f947 	bl	80097e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f943 	bl	80097e4 <USBD_LL_StallEP>
 800855e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008560:	e020      	b.n	80085a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc7a 	bl	8008e5e <USBD_CtlError>
              break;
 800856a:	e01b      	b.n	80085a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10e      	bne.n	8008592 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <USBD_StdEPReq+0xfe>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b80      	cmp	r3, #128	; 0x80
 800857e:	d008      	beq.n	8008592 <USBD_StdEPReq+0xfe>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	88db      	ldrh	r3, [r3, #6]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f929 	bl	80097e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fd2e 	bl	8008ff4 <USBD_CtlSendStatus>

              break;
 8008598:	e004      	b.n	80085a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fc5e 	bl	8008e5e <USBD_CtlError>
              break;
 80085a2:	bf00      	nop
          }
          break;
 80085a4:	e107      	b.n	80087b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d002      	beq.n	80085b8 <USBD_StdEPReq+0x124>
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d016      	beq.n	80085e4 <USBD_StdEPReq+0x150>
 80085b6:	e04b      	b.n	8008650 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <USBD_StdEPReq+0x146>
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b80      	cmp	r3, #128	; 0x80
 80085c2:	d00a      	beq.n	80085da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f90b 	bl	80097e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f907 	bl	80097e4 <USBD_LL_StallEP>
 80085d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d8:	e040      	b.n	800865c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fc3e 	bl	8008e5e <USBD_CtlError>
              break;
 80085e2:	e03b      	b.n	800865c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	885b      	ldrh	r3, [r3, #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d136      	bne.n	800865a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f911 	bl	8009822 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fcf7 	bl	8008ff4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fde2 	bl	80081d4 <USBD_CoreFindEP>
 8008610:	4603      	mov	r3, r0
 8008612:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008614:	7b7b      	ldrb	r3, [r7, #13]
 8008616:	2bff      	cmp	r3, #255	; 0xff
 8008618:	d01f      	beq.n	800865a <USBD_StdEPReq+0x1c6>
 800861a:	7b7b      	ldrb	r3, [r7, #13]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11c      	bne.n	800865a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008620:	7b7a      	ldrb	r2, [r7, #13]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	32ae      	adds	r2, #174	; 0xae
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008638:	7b7a      	ldrb	r2, [r7, #13]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	32ae      	adds	r2, #174	; 0xae
 800863e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800864e:	e004      	b.n	800865a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc03 	bl	8008e5e <USBD_CtlError>
              break;
 8008658:	e000      	b.n	800865c <USBD_StdEPReq+0x1c8>
              break;
 800865a:	bf00      	nop
          }
          break;
 800865c:	e0ab      	b.n	80087b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d002      	beq.n	8008670 <USBD_StdEPReq+0x1dc>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d032      	beq.n	80086d4 <USBD_StdEPReq+0x240>
 800866e:	e097      	b.n	80087a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <USBD_StdEPReq+0x1f2>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b80      	cmp	r3, #128	; 0x80
 800867a:	d004      	beq.n	8008686 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbed 	bl	8008e5e <USBD_CtlError>
                break;
 8008684:	e091      	b.n	80087aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da0b      	bge.n	80086a6 <USBD_StdEPReq+0x212>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	3310      	adds	r3, #16
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	3304      	adds	r3, #4
 80086a4:	e00b      	b.n	80086be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	3304      	adds	r3, #4
 80086be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2202      	movs	r2, #2
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fc37 	bl	8008f40 <USBD_CtlSendData>
              break;
 80086d2:	e06a      	b.n	80087aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	da11      	bge.n	8008700 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	f003 020f 	and.w	r2, r3, #15
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	3324      	adds	r3, #36	; 0x24
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d117      	bne.n	8008726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fbb0 	bl	8008e5e <USBD_CtlError>
                  break;
 80086fe:	e054      	b.n	80087aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	f003 020f 	and.w	r2, r3, #15
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fb9d 	bl	8008e5e <USBD_CtlError>
                  break;
 8008724:	e041      	b.n	80087aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	da0b      	bge.n	8008746 <USBD_StdEPReq+0x2b2>
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	3310      	adds	r3, #16
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	3304      	adds	r3, #4
 8008744:	e00b      	b.n	800875e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	3304      	adds	r3, #4
 800875e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <USBD_StdEPReq+0x2d8>
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b80      	cmp	r3, #128	; 0x80
 800876a:	d103      	bne.n	8008774 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e00e      	b.n	8008792 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f871 	bl	8009860 <USBD_LL_IsStallEP>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2201      	movs	r2, #1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e002      	b.n	8008792 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2202      	movs	r2, #2
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbd1 	bl	8008f40 <USBD_CtlSendData>
              break;
 800879e:	e004      	b.n	80087aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb5b 	bl	8008e5e <USBD_CtlError>
              break;
 80087a8:	bf00      	nop
          }
          break;
 80087aa:	e004      	b.n	80087b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb55 	bl	8008e5e <USBD_CtlError>
          break;
 80087b4:	bf00      	nop
      }
      break;
 80087b6:	e005      	b.n	80087c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fb4f 	bl	8008e5e <USBD_CtlError>
      break;
 80087c0:	e000      	b.n	80087c4 <USBD_StdEPReq+0x330>
      break;
 80087c2:	bf00      	nop
  }

  return ret;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	2b06      	cmp	r3, #6
 80087f2:	f200 8128 	bhi.w	8008a46 <USBD_GetDescriptor+0x276>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <USBD_GetDescriptor+0x2c>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008819 	.word	0x08008819
 8008800:	08008831 	.word	0x08008831
 8008804:	08008871 	.word	0x08008871
 8008808:	08008a47 	.word	0x08008a47
 800880c:	08008a47 	.word	0x08008a47
 8008810:	080089e7 	.word	0x080089e7
 8008814:	08008a13 	.word	0x08008a13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7c12      	ldrb	r2, [r2, #16]
 8008824:	f107 0108 	add.w	r1, r7, #8
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
 800882c:	60f8      	str	r0, [r7, #12]
      break;
 800882e:	e112      	b.n	8008a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	7c1b      	ldrb	r3, [r3, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10d      	bne.n	8008854 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f107 0208 	add.w	r2, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	2202      	movs	r2, #2
 8008850:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008852:	e100      	b.n	8008a56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	f107 0208 	add.w	r2, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
      break;
 800886e:	e0f2      	b.n	8008a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b05      	cmp	r3, #5
 8008878:	f200 80ac 	bhi.w	80089d4 <USBD_GetDescriptor+0x204>
 800887c:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <USBD_GetDescriptor+0xb4>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088d1 	.word	0x080088d1
 800888c:	08008905 	.word	0x08008905
 8008890:	08008939 	.word	0x08008939
 8008894:	0800896d 	.word	0x0800896d
 8008898:	080089a1 	.word	0x080089a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088be:	e091      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 facb 	bl	8008e5e <USBD_CtlError>
            err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
          break;
 80088ce:	e089      	b.n	80089e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f2:	e077      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fab1 	bl	8008e5e <USBD_CtlError>
            err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
          break;
 8008902:	e06f      	b.n	80089e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e05d      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa97 	bl	8008e5e <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e055      	b.n	80089e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e043      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa7d 	bl	8008e5e <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e03b      	b.n	80089e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e029      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa63 	bl	8008e5e <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e021      	b.n	80089e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e00f      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa49 	bl	8008e5e <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e007      	b.n	80089e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa41 	bl	8008e5e <USBD_CtlError>
          err++;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	3301      	adds	r3, #1
 80089e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089e2:	bf00      	nop
      }
      break;
 80089e4:	e037      	b.n	8008a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7c1b      	ldrb	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	f107 0208 	add.w	r2, r7, #8
 80089fa:	4610      	mov	r0, r2
 80089fc:	4798      	blx	r3
 80089fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a00:	e029      	b.n	8008a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa2a 	bl	8008e5e <USBD_CtlError>
        err++;
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a10:	e021      	b.n	8008a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	7c1b      	ldrb	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10d      	bne.n	8008a36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	f107 0208 	add.w	r2, r7, #8
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
 8008a2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	2207      	movs	r2, #7
 8008a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a34:	e00f      	b.n	8008a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa10 	bl	8008e5e <USBD_CtlError>
        err++;
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	3301      	adds	r3, #1
 8008a42:	72fb      	strb	r3, [r7, #11]
      break;
 8008a44:	e007      	b.n	8008a56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa08 	bl	8008e5e <USBD_CtlError>
      err++;
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	3301      	adds	r3, #1
 8008a52:	72fb      	strb	r3, [r7, #11]
      break;
 8008a54:	bf00      	nop
  }

  if (err != 0U)
 8008a56:	7afb      	ldrb	r3, [r7, #11]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d11e      	bne.n	8008a9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	88db      	ldrh	r3, [r3, #6]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d016      	beq.n	8008a92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a64:	893b      	ldrh	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00e      	beq.n	8008a88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	88da      	ldrh	r2, [r3, #6]
 8008a6e:	893b      	ldrh	r3, [r7, #8]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	bf28      	it	cs
 8008a74:	4613      	movcs	r3, r2
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a7a:	893b      	ldrh	r3, [r7, #8]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa5d 	bl	8008f40 <USBD_CtlSendData>
 8008a86:	e009      	b.n	8008a9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9e7 	bl	8008e5e <USBD_CtlError>
 8008a90:	e004      	b.n	8008a9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 faae 	bl	8008ff4 <USBD_CtlSendStatus>
 8008a98:	e000      	b.n	8008a9c <USBD_GetDescriptor+0x2cc>
    return;
 8008a9a:	bf00      	nop
  }
}
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop

08008aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	889b      	ldrh	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d131      	bne.n	8008b1a <USBD_SetAddress+0x76>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	88db      	ldrh	r3, [r3, #6]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d12d      	bne.n	8008b1a <USBD_SetAddress+0x76>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ac4:	d829      	bhi.n	8008b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	885b      	ldrh	r3, [r3, #2]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d104      	bne.n	8008ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f9bc 	bl	8008e5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	e01d      	b.n	8008b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7bfa      	ldrb	r2, [r7, #15]
 8008aec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fedf 	bl	80098b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa7a 	bl	8008ff4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2202      	movs	r2, #2
 8008b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0e:	e009      	b.n	8008b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b18:	e004      	b.n	8008b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f99e 	bl	8008e5e <USBD_CtlError>
  }
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	4b4e      	ldr	r3, [pc, #312]	; (8008c7c <USBD_SetConfig+0x150>)
 8008b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b44:	4b4d      	ldr	r3, [pc, #308]	; (8008c7c <USBD_SetConfig+0x150>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d905      	bls.n	8008b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f985 	bl	8008e5e <USBD_CtlError>
    return USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e08c      	b.n	8008c72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d002      	beq.n	8008b6a <USBD_SetConfig+0x3e>
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d029      	beq.n	8008bbc <USBD_SetConfig+0x90>
 8008b68:	e075      	b.n	8008c56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b6a:	4b44      	ldr	r3, [pc, #272]	; (8008c7c <USBD_SetConfig+0x150>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d020      	beq.n	8008bb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b72:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <USBD_SetConfig+0x150>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b7c:	4b3f      	ldr	r3, [pc, #252]	; (8008c7c <USBD_SetConfig+0x150>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fe ffe1 	bl	8007b4a <USBD_SetClassConfig>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f962 	bl	8008e5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ba2:	e065      	b.n	8008c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa25 	bl	8008ff4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2203      	movs	r2, #3
 8008bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bb2:	e05d      	b.n	8008c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa1d 	bl	8008ff4 <USBD_CtlSendStatus>
      break;
 8008bba:	e059      	b.n	8008c70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bbc:	4b2f      	ldr	r3, [pc, #188]	; (8008c7c <USBD_SetConfig+0x150>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d112      	bne.n	8008bea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bcc:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <USBD_SetConfig+0x150>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bd6:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <USBD_SetConfig+0x150>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe ffd0 	bl	8007b82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa06 	bl	8008ff4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008be8:	e042      	b.n	8008c70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <USBD_SetConfig+0x150>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d02a      	beq.n	8008c4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7fe ffbe 	bl	8007b82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <USBD_SetConfig+0x150>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c10:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <USBD_SetConfig+0x150>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe ff97 	bl	8007b4a <USBD_SetClassConfig>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00f      	beq.n	8008c46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f918 	bl	8008e5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fe ffa3 	bl	8007b82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c44:	e014      	b.n	8008c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9d4 	bl	8008ff4 <USBD_CtlSendStatus>
      break;
 8008c4c:	e010      	b.n	8008c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f9d0 	bl	8008ff4 <USBD_CtlSendStatus>
      break;
 8008c54:	e00c      	b.n	8008c70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f900 	bl	8008e5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <USBD_SetConfig+0x150>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fe ff8c 	bl	8007b82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6e:	bf00      	nop
  }

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200003dc 	.word	0x200003dc

08008c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d004      	beq.n	8008c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8e2 	bl	8008e5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c9a:	e023      	b.n	8008ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	dc02      	bgt.n	8008cae <USBD_GetConfig+0x2e>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc03      	bgt.n	8008cb4 <USBD_GetConfig+0x34>
 8008cac:	e015      	b.n	8008cda <USBD_GetConfig+0x5a>
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d00b      	beq.n	8008cca <USBD_GetConfig+0x4a>
 8008cb2:	e012      	b.n	8008cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f93c 	bl	8008f40 <USBD_CtlSendData>
        break;
 8008cc8:	e00c      	b.n	8008ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f934 	bl	8008f40 <USBD_CtlSendData>
        break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f8be 	bl	8008e5e <USBD_CtlError>
        break;
 8008ce2:	bf00      	nop
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d81e      	bhi.n	8008d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	88db      	ldrh	r3, [r3, #6]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d004      	beq.n	8008d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8a5 	bl	8008e5e <USBD_CtlError>
        break;
 8008d14:	e01a      	b.n	8008d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f043 0202 	orr.w	r2, r3, #2
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	330c      	adds	r3, #12
 8008d36:	2202      	movs	r2, #2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f900 	bl	8008f40 <USBD_CtlSendData>
      break;
 8008d40:	e004      	b.n	8008d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f88a 	bl	8008e5e <USBD_CtlError>
      break;
 8008d4a:	bf00      	nop
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d107      	bne.n	8008d76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f940 	bl	8008ff4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d74:	e013      	b.n	8008d9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d10b      	bne.n	8008d96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	889b      	ldrh	r3, [r3, #4]
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f930 	bl	8008ff4 <USBD_CtlSendStatus>
}
 8008d94:	e003      	b.n	8008d9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f860 	bl	8008e5e <USBD_CtlError>
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d80b      	bhi.n	8008dd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10c      	bne.n	8008de0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f910 	bl	8008ff4 <USBD_CtlSendStatus>
      }
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f840 	bl	8008e5e <USBD_CtlError>
      break;
 8008dde:	e000      	b.n	8008de2 <USBD_ClrFeature+0x3c>
      break;
 8008de0:	bf00      	nop
  }
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781a      	ldrb	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3301      	adds	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff fa41 	bl	800829c <SWAPBYTE>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fa34 	bl	800829c <SWAPBYTE>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461a      	mov	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fa27 	bl	800829c <SWAPBYTE>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	461a      	mov	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	80da      	strh	r2, [r3, #6]
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e68:	2180      	movs	r1, #128	; 0x80
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fcba 	bl	80097e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e70:	2100      	movs	r1, #0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fcb6 	bl	80097e4 <USBD_LL_StallEP>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d036      	beq.n	8008f04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f836 	bl	8008f0c <USBD_GetLen>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ed0:	e013      	b.n	8008efa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
    idx++;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	4413      	add	r3, r2
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e7      	bne.n	8008ed2 <USBD_GetString+0x52>
 8008f02:	e000      	b.n	8008f06 <USBD_GetString+0x86>
    return;
 8008f04:	bf00      	nop
  }
}
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f1c:	e005      	b.n	8008f2a <USBD_GetLen+0x1e>
  {
    len++;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	3301      	adds	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f5      	bne.n	8008f1e <USBD_GetLen+0x12>
  }

  return len;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	2100      	movs	r1, #0
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 fcc5 	bl	80098f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	2100      	movs	r1, #0
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 fcb4 	bl	80098f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fcb8 	bl	8009938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fca7 	bl	8009938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2204      	movs	r2, #4
 8009000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009004:	2300      	movs	r3, #0
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fc73 	bl	80098f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2205      	movs	r2, #5
 8009026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc81 	bl	8009938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009044:	2200      	movs	r2, #0
 8009046:	4912      	ldr	r1, [pc, #72]	; (8009090 <MX_USB_DEVICE_Init+0x50>)
 8009048:	4812      	ldr	r0, [pc, #72]	; (8009094 <MX_USB_DEVICE_Init+0x54>)
 800904a:	f7fe fd01 	bl	8007a50 <USBD_Init>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009054:	f7f8 fbc4 	bl	80017e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009058:	490f      	ldr	r1, [pc, #60]	; (8009098 <MX_USB_DEVICE_Init+0x58>)
 800905a:	480e      	ldr	r0, [pc, #56]	; (8009094 <MX_USB_DEVICE_Init+0x54>)
 800905c:	f7fe fd28 	bl	8007ab0 <USBD_RegisterClass>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009066:	f7f8 fbbb 	bl	80017e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800906a:	490c      	ldr	r1, [pc, #48]	; (800909c <MX_USB_DEVICE_Init+0x5c>)
 800906c:	4809      	ldr	r0, [pc, #36]	; (8009094 <MX_USB_DEVICE_Init+0x54>)
 800906e:	f7fe fc5f 	bl	8007930 <USBD_CDC_RegisterInterface>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009078:	f7f8 fbb2 	bl	80017e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800907c:	4805      	ldr	r0, [pc, #20]	; (8009094 <MX_USB_DEVICE_Init+0x54>)
 800907e:	f7fe fd4d 	bl	8007b1c <USBD_Start>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009088:	f7f8 fbaa 	bl	80017e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800908c:	bf00      	nop
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200000e8 	.word	0x200000e8
 8009094:	200003e0 	.word	0x200003e0
 8009098:	20000054 	.word	0x20000054
 800909c:	200000d4 	.word	0x200000d4

080090a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090a4:	2200      	movs	r2, #0
 80090a6:	4905      	ldr	r1, [pc, #20]	; (80090bc <CDC_Init_FS+0x1c>)
 80090a8:	4805      	ldr	r0, [pc, #20]	; (80090c0 <CDC_Init_FS+0x20>)
 80090aa:	f7fe fc5b 	bl	8007964 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ae:	4905      	ldr	r1, [pc, #20]	; (80090c4 <CDC_Init_FS+0x24>)
 80090b0:	4803      	ldr	r0, [pc, #12]	; (80090c0 <CDC_Init_FS+0x20>)
 80090b2:	f7fe fc79 	bl	80079a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000ebc 	.word	0x20000ebc
 80090c0:	200003e0 	.word	0x200003e0
 80090c4:	200006bc 	.word	0x200006bc

080090c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	71fb      	strb	r3, [r7, #7]
 80090e4:	4613      	mov	r3, r2
 80090e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	2b23      	cmp	r3, #35	; 0x23
 80090ec:	d84a      	bhi.n	8009184 <CDC_Control_FS+0xac>
 80090ee:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <CDC_Control_FS+0x1c>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	08009185 	.word	0x08009185
 80090f8:	08009185 	.word	0x08009185
 80090fc:	08009185 	.word	0x08009185
 8009100:	08009185 	.word	0x08009185
 8009104:	08009185 	.word	0x08009185
 8009108:	08009185 	.word	0x08009185
 800910c:	08009185 	.word	0x08009185
 8009110:	08009185 	.word	0x08009185
 8009114:	08009185 	.word	0x08009185
 8009118:	08009185 	.word	0x08009185
 800911c:	08009185 	.word	0x08009185
 8009120:	08009185 	.word	0x08009185
 8009124:	08009185 	.word	0x08009185
 8009128:	08009185 	.word	0x08009185
 800912c:	08009185 	.word	0x08009185
 8009130:	08009185 	.word	0x08009185
 8009134:	08009185 	.word	0x08009185
 8009138:	08009185 	.word	0x08009185
 800913c:	08009185 	.word	0x08009185
 8009140:	08009185 	.word	0x08009185
 8009144:	08009185 	.word	0x08009185
 8009148:	08009185 	.word	0x08009185
 800914c:	08009185 	.word	0x08009185
 8009150:	08009185 	.word	0x08009185
 8009154:	08009185 	.word	0x08009185
 8009158:	08009185 	.word	0x08009185
 800915c:	08009185 	.word	0x08009185
 8009160:	08009185 	.word	0x08009185
 8009164:	08009185 	.word	0x08009185
 8009168:	08009185 	.word	0x08009185
 800916c:	08009185 	.word	0x08009185
 8009170:	08009185 	.word	0x08009185
 8009174:	08009185 	.word	0x08009185
 8009178:	08009185 	.word	0x08009185
 800917c:	08009185 	.word	0x08009185
 8009180:	08009185 	.word	0x08009185
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009184:	bf00      	nop
  }

  return (USBD_OK);
 8009186:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4805      	ldr	r0, [pc, #20]	; (80091b8 <CDC_Receive_FS+0x24>)
 80091a2:	f7fe fc01 	bl	80079a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091a6:	4804      	ldr	r0, [pc, #16]	; (80091b8 <CDC_Receive_FS+0x24>)
 80091a8:	f7fe fc1c 	bl	80079e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200003e0 	.word	0x200003e0

080091bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
	...

080091e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2212      	movs	r2, #18
 80091f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000104 	.word	0x20000104

08009204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2204      	movs	r2, #4
 8009214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009216:	4b03      	ldr	r3, [pc, #12]	; (8009224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	20000118 	.word	0x20000118

08009228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4907      	ldr	r1, [pc, #28]	; (800925c <USBD_FS_ProductStrDescriptor+0x34>)
 800923e:	4808      	ldr	r0, [pc, #32]	; (8009260 <USBD_FS_ProductStrDescriptor+0x38>)
 8009240:	f7ff fe1e 	bl	8008e80 <USBD_GetString>
 8009244:	e004      	b.n	8009250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <USBD_FS_ProductStrDescriptor+0x34>)
 800924a:	4805      	ldr	r0, [pc, #20]	; (8009260 <USBD_FS_ProductStrDescriptor+0x38>)
 800924c:	f7ff fe18 	bl	8008e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009250:	4b02      	ldr	r3, [pc, #8]	; (800925c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200016bc 	.word	0x200016bc
 8009260:	0800a3f8 	.word	0x0800a3f8

08009264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	4904      	ldr	r1, [pc, #16]	; (8009284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009274:	4804      	ldr	r0, [pc, #16]	; (8009288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009276:	f7ff fe03 	bl	8008e80 <USBD_GetString>
  return USBD_StrDesc;
 800927a:	4b02      	ldr	r3, [pc, #8]	; (8009284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200016bc 	.word	0x200016bc
 8009288:	0800a410 	.word	0x0800a410

0800928c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	221a      	movs	r2, #26
 800929c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800929e:	f000 f843 	bl	8009328 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092a2:	4b02      	ldr	r3, [pc, #8]	; (80092ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	2000011c 	.word	0x2000011c

080092b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d105      	bne.n	80092ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4907      	ldr	r1, [pc, #28]	; (80092e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092c6:	4808      	ldr	r0, [pc, #32]	; (80092e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092c8:	f7ff fdda 	bl	8008e80 <USBD_GetString>
 80092cc:	e004      	b.n	80092d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092d4:	f7ff fdd4 	bl	8008e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200016bc 	.word	0x200016bc
 80092e8:	0800a424 	.word	0x0800a424

080092ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d105      	bne.n	800930a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009302:	4808      	ldr	r0, [pc, #32]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009304:	f7ff fdbc 	bl	8008e80 <USBD_GetString>
 8009308:	e004      	b.n	8009314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4904      	ldr	r1, [pc, #16]	; (8009320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800930e:	4805      	ldr	r0, [pc, #20]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009310:	f7ff fdb6 	bl	8008e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200016bc 	.word	0x200016bc
 8009324:	0800a430 	.word	0x0800a430

08009328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <Get_SerialNum+0x44>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <Get_SerialNum+0x48>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <Get_SerialNum+0x4c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4413      	add	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800934e:	2208      	movs	r2, #8
 8009350:	4909      	ldr	r1, [pc, #36]	; (8009378 <Get_SerialNum+0x50>)
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f814 	bl	8009380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009358:	2204      	movs	r2, #4
 800935a:	4908      	ldr	r1, [pc, #32]	; (800937c <Get_SerialNum+0x54>)
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f000 f80f 	bl	8009380 <IntToUnicode>
  }
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	1fff7a10 	.word	0x1fff7a10
 8009370:	1fff7a14 	.word	0x1fff7a14
 8009374:	1fff7a18 	.word	0x1fff7a18
 8009378:	2000011e 	.word	0x2000011e
 800937c:	2000012e 	.word	0x2000012e

08009380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]
 8009396:	e027      	b.n	80093e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	2b09      	cmp	r3, #9
 800939e:	d80b      	bhi.n	80093b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0f1b      	lsrs	r3, r3, #28
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4619      	mov	r1, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	440b      	add	r3, r1
 80093b0:	3230      	adds	r2, #48	; 0x30
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e00a      	b.n	80093ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4619      	mov	r1, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	440b      	add	r3, r1
 80093c8:	3237      	adds	r2, #55	; 0x37
 80093ca:	b2d2      	uxtb	r2, r2
 80093cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	3301      	adds	r3, #1
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	3301      	adds	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
 80093e8:	7dfa      	ldrb	r2, [r7, #23]
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3d3      	bcc.n	8009398 <IntToUnicode+0x18>
  }
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
	...

08009400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009408:	f107 0314 	add.w	r3, r7, #20
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	609a      	str	r2, [r3, #8]
 8009414:	60da      	str	r2, [r3, #12]
 8009416:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009420:	d13a      	bne.n	8009498 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	4b1e      	ldr	r3, [pc, #120]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	4a1d      	ldr	r2, [pc, #116]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	6313      	str	r3, [r2, #48]	; 0x30
 8009432:	4b1b      	ldr	r3, [pc, #108]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800943e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009444:	2302      	movs	r3, #2
 8009446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944c:	2303      	movs	r3, #3
 800944e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009450:	230a      	movs	r3, #10
 8009452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009454:	f107 0314 	add.w	r3, r7, #20
 8009458:	4619      	mov	r1, r3
 800945a:	4812      	ldr	r0, [pc, #72]	; (80094a4 <HAL_PCD_MspInit+0xa4>)
 800945c:	f7f8 fe32 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	4a0e      	ldr	r2, [pc, #56]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946a:	6353      	str	r3, [r2, #52]	; 0x34
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009474:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 8009476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800947a:	6453      	str	r3, [r2, #68]	; 0x44
 800947c:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <HAL_PCD_MspInit+0xa0>)
 800947e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009488:	2200      	movs	r2, #0
 800948a:	2100      	movs	r1, #0
 800948c:	2043      	movs	r0, #67	; 0x43
 800948e:	f7f8 fd50 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009492:	2043      	movs	r0, #67	; 0x43
 8009494:	f7f8 fd69 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009498:	bf00      	nop
 800949a:	3728      	adds	r7, #40	; 0x28
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40023800 	.word	0x40023800
 80094a4:	40020000 	.word	0x40020000

080094a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7fe fb79 	bl	8007bb6 <USBD_LL_SetupStage>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	4619      	mov	r1, r3
 80094f6:	f7fe fbb3 	bl	8007c60 <USBD_LL_DataOutStage>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	3320      	adds	r3, #32
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	4619      	mov	r1, r3
 800952a:	f7fe fc4c 	bl	8007dc6 <USBD_LL_DataInStage>
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe fd86 	bl	8008056 <USBD_LL_SOF>
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800955a:	2301      	movs	r3, #1
 800955c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	79db      	ldrb	r3, [r3, #7]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	e008      	b.n	800957e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	79db      	ldrb	r3, [r3, #7]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d102      	bne.n	800957a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009574:	2301      	movs	r3, #1
 8009576:	73fb      	strb	r3, [r7, #15]
 8009578:	e001      	b.n	800957e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800957a:	f7f8 f931 	bl	80017e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009584:	7bfa      	ldrb	r2, [r7, #15]
 8009586:	4611      	mov	r1, r2
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fd20 	bl	8007fce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fcc8 	bl	8007f2a <USBD_LL_Reset>
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fd1b 	bl	8007fee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	7adb      	ldrb	r3, [r3, #11]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095d8:	4b04      	ldr	r3, [pc, #16]	; (80095ec <HAL_PCD_SuspendCallback+0x48>)
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	4a03      	ldr	r2, [pc, #12]	; (80095ec <HAL_PCD_SuspendCallback+0x48>)
 80095de:	f043 0306 	orr.w	r3, r3, #6
 80095e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	e000ed00 	.word	0xe000ed00

080095f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fd11 	bl	8008026 <USBD_LL_Resume>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fd69 	bl	80080fa <USBD_LL_IsoOUTIncomplete>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fd25 	bl	8008096 <USBD_LL_IsoINIncomplete>
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd7b 	bl	800815e <USBD_LL_DevConnected>
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fd78 	bl	8008174 <USBD_LL_DevDisconnected>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d13c      	bne.n	8009716 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800969c:	4a20      	ldr	r2, [pc, #128]	; (8009720 <USBD_LL_Init+0x94>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <USBD_LL_Init+0x94>)
 80096a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096ac:	4b1c      	ldr	r3, [pc, #112]	; (8009720 <USBD_LL_Init+0x94>)
 80096ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096b4:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <USBD_LL_Init+0x94>)
 80096b6:	2204      	movs	r2, #4
 80096b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096ba:	4b19      	ldr	r3, [pc, #100]	; (8009720 <USBD_LL_Init+0x94>)
 80096bc:	2202      	movs	r2, #2
 80096be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096c0:	4b17      	ldr	r3, [pc, #92]	; (8009720 <USBD_LL_Init+0x94>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096c6:	4b16      	ldr	r3, [pc, #88]	; (8009720 <USBD_LL_Init+0x94>)
 80096c8:	2202      	movs	r2, #2
 80096ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096cc:	4b14      	ldr	r3, [pc, #80]	; (8009720 <USBD_LL_Init+0x94>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096d2:	4b13      	ldr	r3, [pc, #76]	; (8009720 <USBD_LL_Init+0x94>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096d8:	4b11      	ldr	r3, [pc, #68]	; (8009720 <USBD_LL_Init+0x94>)
 80096da:	2200      	movs	r2, #0
 80096dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <USBD_LL_Init+0x94>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <USBD_LL_Init+0x94>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096ea:	480d      	ldr	r0, [pc, #52]	; (8009720 <USBD_LL_Init+0x94>)
 80096ec:	f7f8 feb7 	bl	800245e <HAL_PCD_Init>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096f6:	f7f8 f873 	bl	80017e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096fa:	2180      	movs	r1, #128	; 0x80
 80096fc:	4808      	ldr	r0, [pc, #32]	; (8009720 <USBD_LL_Init+0x94>)
 80096fe:	f7fa f8e2 	bl	80038c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009702:	2240      	movs	r2, #64	; 0x40
 8009704:	2100      	movs	r1, #0
 8009706:	4806      	ldr	r0, [pc, #24]	; (8009720 <USBD_LL_Init+0x94>)
 8009708:	f7fa f896 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800970c:	2280      	movs	r2, #128	; 0x80
 800970e:	2101      	movs	r1, #1
 8009710:	4803      	ldr	r0, [pc, #12]	; (8009720 <USBD_LL_Init+0x94>)
 8009712:	f7fa f891 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	200018bc 	.word	0x200018bc

08009724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800973a:	4618      	mov	r0, r3
 800973c:	f7f8 ff9e 	bl	800267c <HAL_PCD_Start>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f942 	bl	80099d0 <USBD_Get_USB_Status>
 800974c:	4603      	mov	r3, r0
 800974e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009750:	7bbb      	ldrb	r3, [r7, #14]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	4608      	mov	r0, r1
 8009764:	4611      	mov	r1, r2
 8009766:	461a      	mov	r2, r3
 8009768:	4603      	mov	r3, r0
 800976a:	70fb      	strb	r3, [r7, #3]
 800976c:	460b      	mov	r3, r1
 800976e:	70bb      	strb	r3, [r7, #2]
 8009770:	4613      	mov	r3, r2
 8009772:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009782:	78bb      	ldrb	r3, [r7, #2]
 8009784:	883a      	ldrh	r2, [r7, #0]
 8009786:	78f9      	ldrb	r1, [r7, #3]
 8009788:	f7f9 fc72 	bl	8003070 <HAL_PCD_EP_Open>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f91c 	bl	80099d0 <USBD_Get_USB_Status>
 8009798:	4603      	mov	r3, r0
 800979a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800979c:	7bbb      	ldrb	r3, [r7, #14]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7f9 fcbb 	bl	8003140 <HAL_PCD_EP_Close>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f8fd 	bl	80099d0 <USBD_Get_USB_Status>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097da:	7bbb      	ldrb	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7f9 fd73 	bl	80032ee <HAL_PCD_EP_SetStall>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f8de 	bl	80099d0 <USBD_Get_USB_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009818:	7bbb      	ldrb	r3, [r7, #14]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800983c:	78fa      	ldrb	r2, [r7, #3]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f7f9 fdb7 	bl	80033b4 <HAL_PCD_EP_ClrStall>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f8bf 	bl	80099d0 <USBD_Get_USB_Status>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009856:	7bbb      	ldrb	r3, [r7, #14]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009872:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009878:	2b00      	cmp	r3, #0
 800987a:	da0b      	bge.n	8009894 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	4613      	mov	r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	3316      	adds	r3, #22
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	e00b      	b.n	80098ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800989a:	68f9      	ldr	r1, [r7, #12]
 800989c:	4613      	mov	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	f203 2356 	addw	r3, r3, #598	; 0x256
 80098aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f9 fba6 	bl	8003028 <HAL_PCD_SetAddress>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f874 	bl	80099d0 <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
 8009902:	460b      	mov	r3, r1
 8009904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009914:	7af9      	ldrb	r1, [r7, #11]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	f7f9 fcae 	bl	800327a <HAL_PCD_EP_Transmit>
 800991e:	4603      	mov	r3, r0
 8009920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f853 	bl	80099d0 <USBD_Get_USB_Status>
 800992a:	4603      	mov	r3, r0
 800992c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800992e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	607a      	str	r2, [r7, #4]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	460b      	mov	r3, r1
 8009946:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009956:	7af9      	ldrb	r1, [r7, #11]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	f7f9 fc3a 	bl	80031d4 <HAL_PCD_EP_Receive>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 f832 	bl	80099d0 <USBD_Get_USB_Status>
 800996c:	4603      	mov	r3, r0
 800996e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009970:	7dbb      	ldrb	r3, [r7, #22]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800998c:	78fa      	ldrb	r2, [r7, #3]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7f9 fc5a 	bl	800324a <HAL_PCD_EP_GetRxCount>
 8009996:	4603      	mov	r3, r0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099a8:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <USBD_static_malloc+0x18>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20001da0 	.word	0x20001da0

080099bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d817      	bhi.n	8009a14 <USBD_Get_USB_Status+0x44>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <USBD_Get_USB_Status+0x1c>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	08009a03 	.word	0x08009a03
 80099f4:	08009a09 	.word	0x08009a09
 80099f8:	08009a0f 	.word	0x08009a0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009a00:	e00b      	b.n	8009a1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a02:	2303      	movs	r3, #3
 8009a04:	73fb      	strb	r3, [r7, #15]
    break;
 8009a06:	e008      	b.n	8009a1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0c:	e005      	b.n	8009a1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	73fb      	strb	r3, [r7, #15]
    break;
 8009a12:	e002      	b.n	8009a1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a14:	2303      	movs	r3, #3
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	bf00      	nop
  }
  return usb_status;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <_vsiprintf_r>:
 8009a28:	b500      	push	{lr}
 8009a2a:	b09b      	sub	sp, #108	; 0x6c
 8009a2c:	9100      	str	r1, [sp, #0]
 8009a2e:	9104      	str	r1, [sp, #16]
 8009a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a34:	9105      	str	r1, [sp, #20]
 8009a36:	9102      	str	r1, [sp, #8]
 8009a38:	4905      	ldr	r1, [pc, #20]	; (8009a50 <_vsiprintf_r+0x28>)
 8009a3a:	9103      	str	r1, [sp, #12]
 8009a3c:	4669      	mov	r1, sp
 8009a3e:	f000 f999 	bl	8009d74 <_svfiprintf_r>
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	b01b      	add	sp, #108	; 0x6c
 8009a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a4e:	bf00      	nop
 8009a50:	ffff0208 	.word	0xffff0208

08009a54 <vsiprintf>:
 8009a54:	4613      	mov	r3, r2
 8009a56:	460a      	mov	r2, r1
 8009a58:	4601      	mov	r1, r0
 8009a5a:	4802      	ldr	r0, [pc, #8]	; (8009a64 <vsiprintf+0x10>)
 8009a5c:	6800      	ldr	r0, [r0, #0]
 8009a5e:	f7ff bfe3 	b.w	8009a28 <_vsiprintf_r>
 8009a62:	bf00      	nop
 8009a64:	20000184 	.word	0x20000184

08009a68 <memset>:
 8009a68:	4402      	add	r2, r0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d100      	bne.n	8009a72 <memset+0xa>
 8009a70:	4770      	bx	lr
 8009a72:	f803 1b01 	strb.w	r1, [r3], #1
 8009a76:	e7f9      	b.n	8009a6c <memset+0x4>

08009a78 <__errno>:
 8009a78:	4b01      	ldr	r3, [pc, #4]	; (8009a80 <__errno+0x8>)
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	20000184 	.word	0x20000184

08009a84 <__libc_init_array>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4d0d      	ldr	r5, [pc, #52]	; (8009abc <__libc_init_array+0x38>)
 8009a88:	4c0d      	ldr	r4, [pc, #52]	; (8009ac0 <__libc_init_array+0x3c>)
 8009a8a:	1b64      	subs	r4, r4, r5
 8009a8c:	10a4      	asrs	r4, r4, #2
 8009a8e:	2600      	movs	r6, #0
 8009a90:	42a6      	cmp	r6, r4
 8009a92:	d109      	bne.n	8009aa8 <__libc_init_array+0x24>
 8009a94:	4d0b      	ldr	r5, [pc, #44]	; (8009ac4 <__libc_init_array+0x40>)
 8009a96:	4c0c      	ldr	r4, [pc, #48]	; (8009ac8 <__libc_init_array+0x44>)
 8009a98:	f000 fc6a 	bl	800a370 <_init>
 8009a9c:	1b64      	subs	r4, r4, r5
 8009a9e:	10a4      	asrs	r4, r4, #2
 8009aa0:	2600      	movs	r6, #0
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	d105      	bne.n	8009ab2 <__libc_init_array+0x2e>
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aac:	4798      	blx	r3
 8009aae:	3601      	adds	r6, #1
 8009ab0:	e7ee      	b.n	8009a90 <__libc_init_array+0xc>
 8009ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab6:	4798      	blx	r3
 8009ab8:	3601      	adds	r6, #1
 8009aba:	e7f2      	b.n	8009aa2 <__libc_init_array+0x1e>
 8009abc:	0800cfa0 	.word	0x0800cfa0
 8009ac0:	0800cfa0 	.word	0x0800cfa0
 8009ac4:	0800cfa0 	.word	0x0800cfa0
 8009ac8:	0800cfa4 	.word	0x0800cfa4

08009acc <__retarget_lock_acquire_recursive>:
 8009acc:	4770      	bx	lr

08009ace <__retarget_lock_release_recursive>:
 8009ace:	4770      	bx	lr

08009ad0 <_free_r>:
 8009ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ad2:	2900      	cmp	r1, #0
 8009ad4:	d044      	beq.n	8009b60 <_free_r+0x90>
 8009ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ada:	9001      	str	r0, [sp, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f1a1 0404 	sub.w	r4, r1, #4
 8009ae2:	bfb8      	it	lt
 8009ae4:	18e4      	addlt	r4, r4, r3
 8009ae6:	f000 f8df 	bl	8009ca8 <__malloc_lock>
 8009aea:	4a1e      	ldr	r2, [pc, #120]	; (8009b64 <_free_r+0x94>)
 8009aec:	9801      	ldr	r0, [sp, #4]
 8009aee:	6813      	ldr	r3, [r2, #0]
 8009af0:	b933      	cbnz	r3, 8009b00 <_free_r+0x30>
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	6014      	str	r4, [r2, #0]
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009afc:	f000 b8da 	b.w	8009cb4 <__malloc_unlock>
 8009b00:	42a3      	cmp	r3, r4
 8009b02:	d908      	bls.n	8009b16 <_free_r+0x46>
 8009b04:	6825      	ldr	r5, [r4, #0]
 8009b06:	1961      	adds	r1, r4, r5
 8009b08:	428b      	cmp	r3, r1
 8009b0a:	bf01      	itttt	eq
 8009b0c:	6819      	ldreq	r1, [r3, #0]
 8009b0e:	685b      	ldreq	r3, [r3, #4]
 8009b10:	1949      	addeq	r1, r1, r5
 8009b12:	6021      	streq	r1, [r4, #0]
 8009b14:	e7ed      	b.n	8009af2 <_free_r+0x22>
 8009b16:	461a      	mov	r2, r3
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	b10b      	cbz	r3, 8009b20 <_free_r+0x50>
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	d9fa      	bls.n	8009b16 <_free_r+0x46>
 8009b20:	6811      	ldr	r1, [r2, #0]
 8009b22:	1855      	adds	r5, r2, r1
 8009b24:	42a5      	cmp	r5, r4
 8009b26:	d10b      	bne.n	8009b40 <_free_r+0x70>
 8009b28:	6824      	ldr	r4, [r4, #0]
 8009b2a:	4421      	add	r1, r4
 8009b2c:	1854      	adds	r4, r2, r1
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	6011      	str	r1, [r2, #0]
 8009b32:	d1e0      	bne.n	8009af6 <_free_r+0x26>
 8009b34:	681c      	ldr	r4, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	6053      	str	r3, [r2, #4]
 8009b3a:	440c      	add	r4, r1
 8009b3c:	6014      	str	r4, [r2, #0]
 8009b3e:	e7da      	b.n	8009af6 <_free_r+0x26>
 8009b40:	d902      	bls.n	8009b48 <_free_r+0x78>
 8009b42:	230c      	movs	r3, #12
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	e7d6      	b.n	8009af6 <_free_r+0x26>
 8009b48:	6825      	ldr	r5, [r4, #0]
 8009b4a:	1961      	adds	r1, r4, r5
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	bf04      	itt	eq
 8009b50:	6819      	ldreq	r1, [r3, #0]
 8009b52:	685b      	ldreq	r3, [r3, #4]
 8009b54:	6063      	str	r3, [r4, #4]
 8009b56:	bf04      	itt	eq
 8009b58:	1949      	addeq	r1, r1, r5
 8009b5a:	6021      	streq	r1, [r4, #0]
 8009b5c:	6054      	str	r4, [r2, #4]
 8009b5e:	e7ca      	b.n	8009af6 <_free_r+0x26>
 8009b60:	b003      	add	sp, #12
 8009b62:	bd30      	pop	{r4, r5, pc}
 8009b64:	20002100 	.word	0x20002100

08009b68 <sbrk_aligned>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	4e0e      	ldr	r6, [pc, #56]	; (8009ba4 <sbrk_aligned+0x3c>)
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	6831      	ldr	r1, [r6, #0]
 8009b70:	4605      	mov	r5, r0
 8009b72:	b911      	cbnz	r1, 8009b7a <sbrk_aligned+0x12>
 8009b74:	f000 fba6 	bl	800a2c4 <_sbrk_r>
 8009b78:	6030      	str	r0, [r6, #0]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f000 fba1 	bl	800a2c4 <_sbrk_r>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	d00a      	beq.n	8009b9c <sbrk_aligned+0x34>
 8009b86:	1cc4      	adds	r4, r0, #3
 8009b88:	f024 0403 	bic.w	r4, r4, #3
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	d007      	beq.n	8009ba0 <sbrk_aligned+0x38>
 8009b90:	1a21      	subs	r1, r4, r0
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 fb96 	bl	800a2c4 <_sbrk_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d101      	bne.n	8009ba0 <sbrk_aligned+0x38>
 8009b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	20002104 	.word	0x20002104

08009ba8 <_malloc_r>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	1ccd      	adds	r5, r1, #3
 8009bae:	f025 0503 	bic.w	r5, r5, #3
 8009bb2:	3508      	adds	r5, #8
 8009bb4:	2d0c      	cmp	r5, #12
 8009bb6:	bf38      	it	cc
 8009bb8:	250c      	movcc	r5, #12
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	db01      	blt.n	8009bc4 <_malloc_r+0x1c>
 8009bc0:	42a9      	cmp	r1, r5
 8009bc2:	d905      	bls.n	8009bd0 <_malloc_r+0x28>
 8009bc4:	230c      	movs	r3, #12
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	2600      	movs	r6, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca4 <_malloc_r+0xfc>
 8009bd4:	f000 f868 	bl	8009ca8 <__malloc_lock>
 8009bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bdc:	461c      	mov	r4, r3
 8009bde:	bb5c      	cbnz	r4, 8009c38 <_malloc_r+0x90>
 8009be0:	4629      	mov	r1, r5
 8009be2:	4638      	mov	r0, r7
 8009be4:	f7ff ffc0 	bl	8009b68 <sbrk_aligned>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	4604      	mov	r4, r0
 8009bec:	d155      	bne.n	8009c9a <_malloc_r+0xf2>
 8009bee:	f8d8 4000 	ldr.w	r4, [r8]
 8009bf2:	4626      	mov	r6, r4
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	d145      	bne.n	8009c84 <_malloc_r+0xdc>
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d048      	beq.n	8009c8e <_malloc_r+0xe6>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4638      	mov	r0, r7
 8009c02:	eb04 0903 	add.w	r9, r4, r3
 8009c06:	f000 fb5d 	bl	800a2c4 <_sbrk_r>
 8009c0a:	4581      	cmp	r9, r0
 8009c0c:	d13f      	bne.n	8009c8e <_malloc_r+0xe6>
 8009c0e:	6821      	ldr	r1, [r4, #0]
 8009c10:	1a6d      	subs	r5, r5, r1
 8009c12:	4629      	mov	r1, r5
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7ff ffa7 	bl	8009b68 <sbrk_aligned>
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d037      	beq.n	8009c8e <_malloc_r+0xe6>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	442b      	add	r3, r5
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	f8d8 3000 	ldr.w	r3, [r8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d038      	beq.n	8009c9e <_malloc_r+0xf6>
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	42a2      	cmp	r2, r4
 8009c30:	d12b      	bne.n	8009c8a <_malloc_r+0xe2>
 8009c32:	2200      	movs	r2, #0
 8009c34:	605a      	str	r2, [r3, #4]
 8009c36:	e00f      	b.n	8009c58 <_malloc_r+0xb0>
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	1b52      	subs	r2, r2, r5
 8009c3c:	d41f      	bmi.n	8009c7e <_malloc_r+0xd6>
 8009c3e:	2a0b      	cmp	r2, #11
 8009c40:	d917      	bls.n	8009c72 <_malloc_r+0xca>
 8009c42:	1961      	adds	r1, r4, r5
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	6025      	str	r5, [r4, #0]
 8009c48:	bf18      	it	ne
 8009c4a:	6059      	strne	r1, [r3, #4]
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	bf08      	it	eq
 8009c50:	f8c8 1000 	streq.w	r1, [r8]
 8009c54:	5162      	str	r2, [r4, r5]
 8009c56:	604b      	str	r3, [r1, #4]
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f104 060b 	add.w	r6, r4, #11
 8009c5e:	f000 f829 	bl	8009cb4 <__malloc_unlock>
 8009c62:	f026 0607 	bic.w	r6, r6, #7
 8009c66:	1d23      	adds	r3, r4, #4
 8009c68:	1af2      	subs	r2, r6, r3
 8009c6a:	d0ae      	beq.n	8009bca <_malloc_r+0x22>
 8009c6c:	1b9b      	subs	r3, r3, r6
 8009c6e:	50a3      	str	r3, [r4, r2]
 8009c70:	e7ab      	b.n	8009bca <_malloc_r+0x22>
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	6862      	ldr	r2, [r4, #4]
 8009c76:	d1dd      	bne.n	8009c34 <_malloc_r+0x8c>
 8009c78:	f8c8 2000 	str.w	r2, [r8]
 8009c7c:	e7ec      	b.n	8009c58 <_malloc_r+0xb0>
 8009c7e:	4623      	mov	r3, r4
 8009c80:	6864      	ldr	r4, [r4, #4]
 8009c82:	e7ac      	b.n	8009bde <_malloc_r+0x36>
 8009c84:	4634      	mov	r4, r6
 8009c86:	6876      	ldr	r6, [r6, #4]
 8009c88:	e7b4      	b.n	8009bf4 <_malloc_r+0x4c>
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	e7cc      	b.n	8009c28 <_malloc_r+0x80>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	4638      	mov	r0, r7
 8009c94:	f000 f80e 	bl	8009cb4 <__malloc_unlock>
 8009c98:	e797      	b.n	8009bca <_malloc_r+0x22>
 8009c9a:	6025      	str	r5, [r4, #0]
 8009c9c:	e7dc      	b.n	8009c58 <_malloc_r+0xb0>
 8009c9e:	605b      	str	r3, [r3, #4]
 8009ca0:	deff      	udf	#255	; 0xff
 8009ca2:	bf00      	nop
 8009ca4:	20002100 	.word	0x20002100

08009ca8 <__malloc_lock>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	; (8009cb0 <__malloc_lock+0x8>)
 8009caa:	f7ff bf0f 	b.w	8009acc <__retarget_lock_acquire_recursive>
 8009cae:	bf00      	nop
 8009cb0:	200020fc 	.word	0x200020fc

08009cb4 <__malloc_unlock>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__malloc_unlock+0x8>)
 8009cb6:	f7ff bf0a 	b.w	8009ace <__retarget_lock_release_recursive>
 8009cba:	bf00      	nop
 8009cbc:	200020fc 	.word	0x200020fc

08009cc0 <__ssputs_r>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	688e      	ldr	r6, [r1, #8]
 8009cc6:	461f      	mov	r7, r3
 8009cc8:	42be      	cmp	r6, r7
 8009cca:	680b      	ldr	r3, [r1, #0]
 8009ccc:	4682      	mov	sl, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4690      	mov	r8, r2
 8009cd2:	d82c      	bhi.n	8009d2e <__ssputs_r+0x6e>
 8009cd4:	898a      	ldrh	r2, [r1, #12]
 8009cd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cda:	d026      	beq.n	8009d2a <__ssputs_r+0x6a>
 8009cdc:	6965      	ldr	r5, [r4, #20]
 8009cde:	6909      	ldr	r1, [r1, #16]
 8009ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce4:	eba3 0901 	sub.w	r9, r3, r1
 8009ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cec:	1c7b      	adds	r3, r7, #1
 8009cee:	444b      	add	r3, r9
 8009cf0:	106d      	asrs	r5, r5, #1
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	bf38      	it	cc
 8009cf6:	461d      	movcc	r5, r3
 8009cf8:	0553      	lsls	r3, r2, #21
 8009cfa:	d527      	bpl.n	8009d4c <__ssputs_r+0x8c>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7ff ff53 	bl	8009ba8 <_malloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	b360      	cbz	r0, 8009d60 <__ssputs_r+0xa0>
 8009d06:	6921      	ldr	r1, [r4, #16]
 8009d08:	464a      	mov	r2, r9
 8009d0a:	f000 faeb 	bl	800a2e4 <memcpy>
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	6126      	str	r6, [r4, #16]
 8009d1c:	6165      	str	r5, [r4, #20]
 8009d1e:	444e      	add	r6, r9
 8009d20:	eba5 0509 	sub.w	r5, r5, r9
 8009d24:	6026      	str	r6, [r4, #0]
 8009d26:	60a5      	str	r5, [r4, #8]
 8009d28:	463e      	mov	r6, r7
 8009d2a:	42be      	cmp	r6, r7
 8009d2c:	d900      	bls.n	8009d30 <__ssputs_r+0x70>
 8009d2e:	463e      	mov	r6, r7
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	4632      	mov	r2, r6
 8009d34:	4641      	mov	r1, r8
 8009d36:	f000 faab 	bl	800a290 <memmove>
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	1b9b      	subs	r3, r3, r6
 8009d3e:	60a3      	str	r3, [r4, #8]
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	4433      	add	r3, r6
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	2000      	movs	r0, #0
 8009d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	f000 fad7 	bl	800a300 <_realloc_r>
 8009d52:	4606      	mov	r6, r0
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1e0      	bne.n	8009d1a <__ssputs_r+0x5a>
 8009d58:	6921      	ldr	r1, [r4, #16]
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	f7ff feb8 	bl	8009ad0 <_free_r>
 8009d60:	230c      	movs	r3, #12
 8009d62:	f8ca 3000 	str.w	r3, [sl]
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	e7e9      	b.n	8009d48 <__ssputs_r+0x88>

08009d74 <_svfiprintf_r>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	4698      	mov	r8, r3
 8009d7a:	898b      	ldrh	r3, [r1, #12]
 8009d7c:	061b      	lsls	r3, r3, #24
 8009d7e:	b09d      	sub	sp, #116	; 0x74
 8009d80:	4607      	mov	r7, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	d50e      	bpl.n	8009da6 <_svfiprintf_r+0x32>
 8009d88:	690b      	ldr	r3, [r1, #16]
 8009d8a:	b963      	cbnz	r3, 8009da6 <_svfiprintf_r+0x32>
 8009d8c:	2140      	movs	r1, #64	; 0x40
 8009d8e:	f7ff ff0b 	bl	8009ba8 <_malloc_r>
 8009d92:	6028      	str	r0, [r5, #0]
 8009d94:	6128      	str	r0, [r5, #16]
 8009d96:	b920      	cbnz	r0, 8009da2 <_svfiprintf_r+0x2e>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e0d0      	b.n	8009f44 <_svfiprintf_r+0x1d0>
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	616b      	str	r3, [r5, #20]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9309      	str	r3, [sp, #36]	; 0x24
 8009daa:	2320      	movs	r3, #32
 8009dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db4:	2330      	movs	r3, #48	; 0x30
 8009db6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f5c <_svfiprintf_r+0x1e8>
 8009dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dbe:	f04f 0901 	mov.w	r9, #1
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	469a      	mov	sl, r3
 8009dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dca:	b10a      	cbz	r2, 8009dd0 <_svfiprintf_r+0x5c>
 8009dcc:	2a25      	cmp	r2, #37	; 0x25
 8009dce:	d1f9      	bne.n	8009dc4 <_svfiprintf_r+0x50>
 8009dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd4:	d00b      	beq.n	8009dee <_svfiprintf_r+0x7a>
 8009dd6:	465b      	mov	r3, fp
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff ff6f 	bl	8009cc0 <__ssputs_r>
 8009de2:	3001      	adds	r0, #1
 8009de4:	f000 80a9 	beq.w	8009f3a <_svfiprintf_r+0x1c6>
 8009de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dea:	445a      	add	r2, fp
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	f89a 3000 	ldrb.w	r3, [sl]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80a1 	beq.w	8009f3a <_svfiprintf_r+0x1c6>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e02:	f10a 0a01 	add.w	sl, sl, #1
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	9307      	str	r3, [sp, #28]
 8009e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e10:	4654      	mov	r4, sl
 8009e12:	2205      	movs	r2, #5
 8009e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e18:	4850      	ldr	r0, [pc, #320]	; (8009f5c <_svfiprintf_r+0x1e8>)
 8009e1a:	f7f6 f9d9 	bl	80001d0 <memchr>
 8009e1e:	9a04      	ldr	r2, [sp, #16]
 8009e20:	b9d8      	cbnz	r0, 8009e5a <_svfiprintf_r+0xe6>
 8009e22:	06d0      	lsls	r0, r2, #27
 8009e24:	bf44      	itt	mi
 8009e26:	2320      	movmi	r3, #32
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	0711      	lsls	r1, r2, #28
 8009e2e:	bf44      	itt	mi
 8009e30:	232b      	movmi	r3, #43	; 0x2b
 8009e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e36:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3c:	d015      	beq.n	8009e6a <_svfiprintf_r+0xf6>
 8009e3e:	9a07      	ldr	r2, [sp, #28]
 8009e40:	4654      	mov	r4, sl
 8009e42:	2000      	movs	r0, #0
 8009e44:	f04f 0c0a 	mov.w	ip, #10
 8009e48:	4621      	mov	r1, r4
 8009e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e4e:	3b30      	subs	r3, #48	; 0x30
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d94d      	bls.n	8009ef0 <_svfiprintf_r+0x17c>
 8009e54:	b1b0      	cbz	r0, 8009e84 <_svfiprintf_r+0x110>
 8009e56:	9207      	str	r2, [sp, #28]
 8009e58:	e014      	b.n	8009e84 <_svfiprintf_r+0x110>
 8009e5a:	eba0 0308 	sub.w	r3, r0, r8
 8009e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e62:	4313      	orrs	r3, r2
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	46a2      	mov	sl, r4
 8009e68:	e7d2      	b.n	8009e10 <_svfiprintf_r+0x9c>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	9103      	str	r1, [sp, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bfbb      	ittet	lt
 8009e76:	425b      	neglt	r3, r3
 8009e78:	f042 0202 	orrlt.w	r2, r2, #2
 8009e7c:	9307      	strge	r3, [sp, #28]
 8009e7e:	9307      	strlt	r3, [sp, #28]
 8009e80:	bfb8      	it	lt
 8009e82:	9204      	strlt	r2, [sp, #16]
 8009e84:	7823      	ldrb	r3, [r4, #0]
 8009e86:	2b2e      	cmp	r3, #46	; 0x2e
 8009e88:	d10c      	bne.n	8009ea4 <_svfiprintf_r+0x130>
 8009e8a:	7863      	ldrb	r3, [r4, #1]
 8009e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e8e:	d134      	bne.n	8009efa <_svfiprintf_r+0x186>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9203      	str	r2, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfb8      	it	lt
 8009e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea0:	3402      	adds	r4, #2
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f6c <_svfiprintf_r+0x1f8>
 8009ea8:	7821      	ldrb	r1, [r4, #0]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	4650      	mov	r0, sl
 8009eae:	f7f6 f98f 	bl	80001d0 <memchr>
 8009eb2:	b138      	cbz	r0, 8009ec4 <_svfiprintf_r+0x150>
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	eba0 000a 	sub.w	r0, r0, sl
 8009eba:	2240      	movs	r2, #64	; 0x40
 8009ebc:	4082      	lsls	r2, r0
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	3401      	adds	r4, #1
 8009ec2:	9304      	str	r3, [sp, #16]
 8009ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec8:	4825      	ldr	r0, [pc, #148]	; (8009f60 <_svfiprintf_r+0x1ec>)
 8009eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ece:	2206      	movs	r2, #6
 8009ed0:	f7f6 f97e 	bl	80001d0 <memchr>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d038      	beq.n	8009f4a <_svfiprintf_r+0x1d6>
 8009ed8:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <_svfiprintf_r+0x1f0>)
 8009eda:	bb1b      	cbnz	r3, 8009f24 <_svfiprintf_r+0x1b0>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	3307      	adds	r3, #7
 8009ee0:	f023 0307 	bic.w	r3, r3, #7
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eea:	4433      	add	r3, r6
 8009eec:	9309      	str	r3, [sp, #36]	; 0x24
 8009eee:	e768      	b.n	8009dc2 <_svfiprintf_r+0x4e>
 8009ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7a6      	b.n	8009e48 <_svfiprintf_r+0xd4>
 8009efa:	2300      	movs	r3, #0
 8009efc:	3401      	adds	r4, #1
 8009efe:	9305      	str	r3, [sp, #20]
 8009f00:	4619      	mov	r1, r3
 8009f02:	f04f 0c0a 	mov.w	ip, #10
 8009f06:	4620      	mov	r0, r4
 8009f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0c:	3a30      	subs	r2, #48	; 0x30
 8009f0e:	2a09      	cmp	r2, #9
 8009f10:	d903      	bls.n	8009f1a <_svfiprintf_r+0x1a6>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0c6      	beq.n	8009ea4 <_svfiprintf_r+0x130>
 8009f16:	9105      	str	r1, [sp, #20]
 8009f18:	e7c4      	b.n	8009ea4 <_svfiprintf_r+0x130>
 8009f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f1e:	4604      	mov	r4, r0
 8009f20:	2301      	movs	r3, #1
 8009f22:	e7f0      	b.n	8009f06 <_svfiprintf_r+0x192>
 8009f24:	ab03      	add	r3, sp, #12
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4b0f      	ldr	r3, [pc, #60]	; (8009f68 <_svfiprintf_r+0x1f4>)
 8009f2c:	a904      	add	r1, sp, #16
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f3af 8000 	nop.w
 8009f34:	1c42      	adds	r2, r0, #1
 8009f36:	4606      	mov	r6, r0
 8009f38:	d1d6      	bne.n	8009ee8 <_svfiprintf_r+0x174>
 8009f3a:	89ab      	ldrh	r3, [r5, #12]
 8009f3c:	065b      	lsls	r3, r3, #25
 8009f3e:	f53f af2d 	bmi.w	8009d9c <_svfiprintf_r+0x28>
 8009f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f44:	b01d      	add	sp, #116	; 0x74
 8009f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4a:	ab03      	add	r3, sp, #12
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <_svfiprintf_r+0x1f4>)
 8009f52:	a904      	add	r1, sp, #16
 8009f54:	4638      	mov	r0, r7
 8009f56:	f000 f879 	bl	800a04c <_printf_i>
 8009f5a:	e7eb      	b.n	8009f34 <_svfiprintf_r+0x1c0>
 8009f5c:	0800cf64 	.word	0x0800cf64
 8009f60:	0800cf6e 	.word	0x0800cf6e
 8009f64:	00000000 	.word	0x00000000
 8009f68:	08009cc1 	.word	0x08009cc1
 8009f6c:	0800cf6a 	.word	0x0800cf6a

08009f70 <_printf_common>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	4616      	mov	r6, r2
 8009f76:	4699      	mov	r9, r3
 8009f78:	688a      	ldr	r2, [r1, #8]
 8009f7a:	690b      	ldr	r3, [r1, #16]
 8009f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f80:	4293      	cmp	r3, r2
 8009f82:	bfb8      	it	lt
 8009f84:	4613      	movlt	r3, r2
 8009f86:	6033      	str	r3, [r6, #0]
 8009f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	b10a      	cbz	r2, 8009f96 <_printf_common+0x26>
 8009f92:	3301      	adds	r3, #1
 8009f94:	6033      	str	r3, [r6, #0]
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	0699      	lsls	r1, r3, #26
 8009f9a:	bf42      	ittt	mi
 8009f9c:	6833      	ldrmi	r3, [r6, #0]
 8009f9e:	3302      	addmi	r3, #2
 8009fa0:	6033      	strmi	r3, [r6, #0]
 8009fa2:	6825      	ldr	r5, [r4, #0]
 8009fa4:	f015 0506 	ands.w	r5, r5, #6
 8009fa8:	d106      	bne.n	8009fb8 <_printf_common+0x48>
 8009faa:	f104 0a19 	add.w	sl, r4, #25
 8009fae:	68e3      	ldr	r3, [r4, #12]
 8009fb0:	6832      	ldr	r2, [r6, #0]
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	42ab      	cmp	r3, r5
 8009fb6:	dc26      	bgt.n	800a006 <_printf_common+0x96>
 8009fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fbc:	1e13      	subs	r3, r2, #0
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	bf18      	it	ne
 8009fc2:	2301      	movne	r3, #1
 8009fc4:	0692      	lsls	r2, r2, #26
 8009fc6:	d42b      	bmi.n	800a020 <_printf_common+0xb0>
 8009fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4638      	mov	r0, r7
 8009fd0:	47c0      	blx	r8
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d01e      	beq.n	800a014 <_printf_common+0xa4>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	6922      	ldr	r2, [r4, #16]
 8009fda:	f003 0306 	and.w	r3, r3, #6
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	bf02      	ittt	eq
 8009fe2:	68e5      	ldreq	r5, [r4, #12]
 8009fe4:	6833      	ldreq	r3, [r6, #0]
 8009fe6:	1aed      	subeq	r5, r5, r3
 8009fe8:	68a3      	ldr	r3, [r4, #8]
 8009fea:	bf0c      	ite	eq
 8009fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff0:	2500      	movne	r5, #0
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	bfc4      	itt	gt
 8009ff6:	1a9b      	subgt	r3, r3, r2
 8009ff8:	18ed      	addgt	r5, r5, r3
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	341a      	adds	r4, #26
 8009ffe:	42b5      	cmp	r5, r6
 800a000:	d11a      	bne.n	800a038 <_printf_common+0xc8>
 800a002:	2000      	movs	r0, #0
 800a004:	e008      	b.n	800a018 <_printf_common+0xa8>
 800a006:	2301      	movs	r3, #1
 800a008:	4652      	mov	r2, sl
 800a00a:	4649      	mov	r1, r9
 800a00c:	4638      	mov	r0, r7
 800a00e:	47c0      	blx	r8
 800a010:	3001      	adds	r0, #1
 800a012:	d103      	bne.n	800a01c <_printf_common+0xac>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	3501      	adds	r5, #1
 800a01e:	e7c6      	b.n	8009fae <_printf_common+0x3e>
 800a020:	18e1      	adds	r1, r4, r3
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	2030      	movs	r0, #48	; 0x30
 800a026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a02a:	4422      	add	r2, r4
 800a02c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a034:	3302      	adds	r3, #2
 800a036:	e7c7      	b.n	8009fc8 <_printf_common+0x58>
 800a038:	2301      	movs	r3, #1
 800a03a:	4622      	mov	r2, r4
 800a03c:	4649      	mov	r1, r9
 800a03e:	4638      	mov	r0, r7
 800a040:	47c0      	blx	r8
 800a042:	3001      	adds	r0, #1
 800a044:	d0e6      	beq.n	800a014 <_printf_common+0xa4>
 800a046:	3601      	adds	r6, #1
 800a048:	e7d9      	b.n	8009ffe <_printf_common+0x8e>
	...

0800a04c <_printf_i>:
 800a04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a050:	7e0f      	ldrb	r7, [r1, #24]
 800a052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a054:	2f78      	cmp	r7, #120	; 0x78
 800a056:	4691      	mov	r9, r2
 800a058:	4680      	mov	r8, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	469a      	mov	sl, r3
 800a05e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a062:	d807      	bhi.n	800a074 <_printf_i+0x28>
 800a064:	2f62      	cmp	r7, #98	; 0x62
 800a066:	d80a      	bhi.n	800a07e <_printf_i+0x32>
 800a068:	2f00      	cmp	r7, #0
 800a06a:	f000 80d4 	beq.w	800a216 <_printf_i+0x1ca>
 800a06e:	2f58      	cmp	r7, #88	; 0x58
 800a070:	f000 80c0 	beq.w	800a1f4 <_printf_i+0x1a8>
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a07c:	e03a      	b.n	800a0f4 <_printf_i+0xa8>
 800a07e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a082:	2b15      	cmp	r3, #21
 800a084:	d8f6      	bhi.n	800a074 <_printf_i+0x28>
 800a086:	a101      	add	r1, pc, #4	; (adr r1, 800a08c <_printf_i+0x40>)
 800a088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a08c:	0800a0e5 	.word	0x0800a0e5
 800a090:	0800a0f9 	.word	0x0800a0f9
 800a094:	0800a075 	.word	0x0800a075
 800a098:	0800a075 	.word	0x0800a075
 800a09c:	0800a075 	.word	0x0800a075
 800a0a0:	0800a075 	.word	0x0800a075
 800a0a4:	0800a0f9 	.word	0x0800a0f9
 800a0a8:	0800a075 	.word	0x0800a075
 800a0ac:	0800a075 	.word	0x0800a075
 800a0b0:	0800a075 	.word	0x0800a075
 800a0b4:	0800a075 	.word	0x0800a075
 800a0b8:	0800a1fd 	.word	0x0800a1fd
 800a0bc:	0800a125 	.word	0x0800a125
 800a0c0:	0800a1b7 	.word	0x0800a1b7
 800a0c4:	0800a075 	.word	0x0800a075
 800a0c8:	0800a075 	.word	0x0800a075
 800a0cc:	0800a21f 	.word	0x0800a21f
 800a0d0:	0800a075 	.word	0x0800a075
 800a0d4:	0800a125 	.word	0x0800a125
 800a0d8:	0800a075 	.word	0x0800a075
 800a0dc:	0800a075 	.word	0x0800a075
 800a0e0:	0800a1bf 	.word	0x0800a1bf
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	1d1a      	adds	r2, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	602a      	str	r2, [r5, #0]
 800a0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e09f      	b.n	800a238 <_printf_i+0x1ec>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	0607      	lsls	r7, r0, #24
 800a0fe:	f103 0104 	add.w	r1, r3, #4
 800a102:	6029      	str	r1, [r5, #0]
 800a104:	d501      	bpl.n	800a10a <_printf_i+0xbe>
 800a106:	681e      	ldr	r6, [r3, #0]
 800a108:	e003      	b.n	800a112 <_printf_i+0xc6>
 800a10a:	0646      	lsls	r6, r0, #25
 800a10c:	d5fb      	bpl.n	800a106 <_printf_i+0xba>
 800a10e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a112:	2e00      	cmp	r6, #0
 800a114:	da03      	bge.n	800a11e <_printf_i+0xd2>
 800a116:	232d      	movs	r3, #45	; 0x2d
 800a118:	4276      	negs	r6, r6
 800a11a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11e:	485a      	ldr	r0, [pc, #360]	; (800a288 <_printf_i+0x23c>)
 800a120:	230a      	movs	r3, #10
 800a122:	e012      	b.n	800a14a <_printf_i+0xfe>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	6820      	ldr	r0, [r4, #0]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	6029      	str	r1, [r5, #0]
 800a12c:	0605      	lsls	r5, r0, #24
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0xe8>
 800a130:	681e      	ldr	r6, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0xee>
 800a134:	0641      	lsls	r1, r0, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0xe4>
 800a138:	881e      	ldrh	r6, [r3, #0]
 800a13a:	4853      	ldr	r0, [pc, #332]	; (800a288 <_printf_i+0x23c>)
 800a13c:	2f6f      	cmp	r7, #111	; 0x6f
 800a13e:	bf0c      	ite	eq
 800a140:	2308      	moveq	r3, #8
 800a142:	230a      	movne	r3, #10
 800a144:	2100      	movs	r1, #0
 800a146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14a:	6865      	ldr	r5, [r4, #4]
 800a14c:	60a5      	str	r5, [r4, #8]
 800a14e:	2d00      	cmp	r5, #0
 800a150:	bfa2      	ittt	ge
 800a152:	6821      	ldrge	r1, [r4, #0]
 800a154:	f021 0104 	bicge.w	r1, r1, #4
 800a158:	6021      	strge	r1, [r4, #0]
 800a15a:	b90e      	cbnz	r6, 800a160 <_printf_i+0x114>
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	d04b      	beq.n	800a1f8 <_printf_i+0x1ac>
 800a160:	4615      	mov	r5, r2
 800a162:	fbb6 f1f3 	udiv	r1, r6, r3
 800a166:	fb03 6711 	mls	r7, r3, r1, r6
 800a16a:	5dc7      	ldrb	r7, [r0, r7]
 800a16c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a170:	4637      	mov	r7, r6
 800a172:	42bb      	cmp	r3, r7
 800a174:	460e      	mov	r6, r1
 800a176:	d9f4      	bls.n	800a162 <_printf_i+0x116>
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d10b      	bne.n	800a194 <_printf_i+0x148>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07de      	lsls	r6, r3, #31
 800a180:	d508      	bpl.n	800a194 <_printf_i+0x148>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	4299      	cmp	r1, r3
 800a188:	bfde      	ittt	le
 800a18a:	2330      	movle	r3, #48	; 0x30
 800a18c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a190:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a194:	1b52      	subs	r2, r2, r5
 800a196:	6122      	str	r2, [r4, #16]
 800a198:	f8cd a000 	str.w	sl, [sp]
 800a19c:	464b      	mov	r3, r9
 800a19e:	aa03      	add	r2, sp, #12
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f7ff fee4 	bl	8009f70 <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d14a      	bne.n	800a242 <_printf_i+0x1f6>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	b004      	add	sp, #16
 800a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	f043 0320 	orr.w	r3, r3, #32
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	4833      	ldr	r0, [pc, #204]	; (800a28c <_printf_i+0x240>)
 800a1c0:	2778      	movs	r7, #120	; 0x78
 800a1c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	6829      	ldr	r1, [r5, #0]
 800a1ca:	061f      	lsls	r7, r3, #24
 800a1cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1d0:	d402      	bmi.n	800a1d8 <_printf_i+0x18c>
 800a1d2:	065f      	lsls	r7, r3, #25
 800a1d4:	bf48      	it	mi
 800a1d6:	b2b6      	uxthmi	r6, r6
 800a1d8:	07df      	lsls	r7, r3, #31
 800a1da:	bf48      	it	mi
 800a1dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a1e0:	6029      	str	r1, [r5, #0]
 800a1e2:	bf48      	it	mi
 800a1e4:	6023      	strmi	r3, [r4, #0]
 800a1e6:	b91e      	cbnz	r6, 800a1f0 <_printf_i+0x1a4>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	f023 0320 	bic.w	r3, r3, #32
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	e7a7      	b.n	800a144 <_printf_i+0xf8>
 800a1f4:	4824      	ldr	r0, [pc, #144]	; (800a288 <_printf_i+0x23c>)
 800a1f6:	e7e4      	b.n	800a1c2 <_printf_i+0x176>
 800a1f8:	4615      	mov	r5, r2
 800a1fa:	e7bd      	b.n	800a178 <_printf_i+0x12c>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	6826      	ldr	r6, [r4, #0]
 800a200:	6961      	ldr	r1, [r4, #20]
 800a202:	1d18      	adds	r0, r3, #4
 800a204:	6028      	str	r0, [r5, #0]
 800a206:	0635      	lsls	r5, r6, #24
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	d501      	bpl.n	800a210 <_printf_i+0x1c4>
 800a20c:	6019      	str	r1, [r3, #0]
 800a20e:	e002      	b.n	800a216 <_printf_i+0x1ca>
 800a210:	0670      	lsls	r0, r6, #25
 800a212:	d5fb      	bpl.n	800a20c <_printf_i+0x1c0>
 800a214:	8019      	strh	r1, [r3, #0]
 800a216:	2300      	movs	r3, #0
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	4615      	mov	r5, r2
 800a21c:	e7bc      	b.n	800a198 <_printf_i+0x14c>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	1d1a      	adds	r2, r3, #4
 800a222:	602a      	str	r2, [r5, #0]
 800a224:	681d      	ldr	r5, [r3, #0]
 800a226:	6862      	ldr	r2, [r4, #4]
 800a228:	2100      	movs	r1, #0
 800a22a:	4628      	mov	r0, r5
 800a22c:	f7f5 ffd0 	bl	80001d0 <memchr>
 800a230:	b108      	cbz	r0, 800a236 <_printf_i+0x1ea>
 800a232:	1b40      	subs	r0, r0, r5
 800a234:	6060      	str	r0, [r4, #4]
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	6123      	str	r3, [r4, #16]
 800a23a:	2300      	movs	r3, #0
 800a23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a240:	e7aa      	b.n	800a198 <_printf_i+0x14c>
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	462a      	mov	r2, r5
 800a246:	4649      	mov	r1, r9
 800a248:	4640      	mov	r0, r8
 800a24a:	47d0      	blx	sl
 800a24c:	3001      	adds	r0, #1
 800a24e:	d0ad      	beq.n	800a1ac <_printf_i+0x160>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	079b      	lsls	r3, r3, #30
 800a254:	d413      	bmi.n	800a27e <_printf_i+0x232>
 800a256:	68e0      	ldr	r0, [r4, #12]
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	4298      	cmp	r0, r3
 800a25c:	bfb8      	it	lt
 800a25e:	4618      	movlt	r0, r3
 800a260:	e7a6      	b.n	800a1b0 <_printf_i+0x164>
 800a262:	2301      	movs	r3, #1
 800a264:	4632      	mov	r2, r6
 800a266:	4649      	mov	r1, r9
 800a268:	4640      	mov	r0, r8
 800a26a:	47d0      	blx	sl
 800a26c:	3001      	adds	r0, #1
 800a26e:	d09d      	beq.n	800a1ac <_printf_i+0x160>
 800a270:	3501      	adds	r5, #1
 800a272:	68e3      	ldr	r3, [r4, #12]
 800a274:	9903      	ldr	r1, [sp, #12]
 800a276:	1a5b      	subs	r3, r3, r1
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dcf2      	bgt.n	800a262 <_printf_i+0x216>
 800a27c:	e7eb      	b.n	800a256 <_printf_i+0x20a>
 800a27e:	2500      	movs	r5, #0
 800a280:	f104 0619 	add.w	r6, r4, #25
 800a284:	e7f5      	b.n	800a272 <_printf_i+0x226>
 800a286:	bf00      	nop
 800a288:	0800cf75 	.word	0x0800cf75
 800a28c:	0800cf86 	.word	0x0800cf86

0800a290 <memmove>:
 800a290:	4288      	cmp	r0, r1
 800a292:	b510      	push	{r4, lr}
 800a294:	eb01 0402 	add.w	r4, r1, r2
 800a298:	d902      	bls.n	800a2a0 <memmove+0x10>
 800a29a:	4284      	cmp	r4, r0
 800a29c:	4623      	mov	r3, r4
 800a29e:	d807      	bhi.n	800a2b0 <memmove+0x20>
 800a2a0:	1e43      	subs	r3, r0, #1
 800a2a2:	42a1      	cmp	r1, r4
 800a2a4:	d008      	beq.n	800a2b8 <memmove+0x28>
 800a2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ae:	e7f8      	b.n	800a2a2 <memmove+0x12>
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	428a      	cmp	r2, r1
 800a2b6:	d100      	bne.n	800a2ba <memmove+0x2a>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c2:	e7f7      	b.n	800a2b4 <memmove+0x24>

0800a2c4 <_sbrk_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	; (800a2e0 <_sbrk_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f7 fbd2 	bl	8001a78 <_sbrk>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_sbrk_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_sbrk_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	200020f8 	.word	0x200020f8

0800a2e4 <memcpy>:
 800a2e4:	440a      	add	r2, r1
 800a2e6:	4291      	cmp	r1, r2
 800a2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2ec:	d100      	bne.n	800a2f0 <memcpy+0xc>
 800a2ee:	4770      	bx	lr
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	d1f9      	bne.n	800a2f2 <memcpy+0xe>
 800a2fe:	bd10      	pop	{r4, pc}

0800a300 <_realloc_r>:
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	4680      	mov	r8, r0
 800a306:	4614      	mov	r4, r2
 800a308:	460e      	mov	r6, r1
 800a30a:	b921      	cbnz	r1, 800a316 <_realloc_r+0x16>
 800a30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	4611      	mov	r1, r2
 800a312:	f7ff bc49 	b.w	8009ba8 <_malloc_r>
 800a316:	b92a      	cbnz	r2, 800a324 <_realloc_r+0x24>
 800a318:	f7ff fbda 	bl	8009ad0 <_free_r>
 800a31c:	4625      	mov	r5, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	f000 f81b 	bl	800a35e <_malloc_usable_size_r>
 800a328:	4284      	cmp	r4, r0
 800a32a:	4607      	mov	r7, r0
 800a32c:	d802      	bhi.n	800a334 <_realloc_r+0x34>
 800a32e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a332:	d812      	bhi.n	800a35a <_realloc_r+0x5a>
 800a334:	4621      	mov	r1, r4
 800a336:	4640      	mov	r0, r8
 800a338:	f7ff fc36 	bl	8009ba8 <_malloc_r>
 800a33c:	4605      	mov	r5, r0
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0ed      	beq.n	800a31e <_realloc_r+0x1e>
 800a342:	42bc      	cmp	r4, r7
 800a344:	4622      	mov	r2, r4
 800a346:	4631      	mov	r1, r6
 800a348:	bf28      	it	cs
 800a34a:	463a      	movcs	r2, r7
 800a34c:	f7ff ffca 	bl	800a2e4 <memcpy>
 800a350:	4631      	mov	r1, r6
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff fbbc 	bl	8009ad0 <_free_r>
 800a358:	e7e1      	b.n	800a31e <_realloc_r+0x1e>
 800a35a:	4635      	mov	r5, r6
 800a35c:	e7df      	b.n	800a31e <_realloc_r+0x1e>

0800a35e <_malloc_usable_size_r>:
 800a35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a362:	1f18      	subs	r0, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	bfbc      	itt	lt
 800a368:	580b      	ldrlt	r3, [r1, r0]
 800a36a:	18c0      	addlt	r0, r0, r3
 800a36c:	4770      	bx	lr
	...

0800a370 <_init>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr

0800a37c <_fini>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	bf00      	nop
 800a380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a382:	bc08      	pop	{r3}
 800a384:	469e      	mov	lr, r3
 800a386:	4770      	bx	lr
