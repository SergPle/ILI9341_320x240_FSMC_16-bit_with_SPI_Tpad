
407board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b714  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e498  0800e498  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e498  0800e498  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4a0  0800e4a0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4a0  0800e4a0  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a4  0800e4a4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800e4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00002060  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021dc  200021dc  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f8ee  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053ad  00000000  00000000  0003fadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001920  00000000  00000000  00044e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029453  00000000  00000000  000467b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002367a  00000000  00000000  0006fc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf51  00000000  00000000  0009327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000012da  00000000  00000000  0016f1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a9c  00000000  00000000  001704a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00176f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b88c 	.word	0x0800b88c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800b88c 	.word	0x0800b88c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000586:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800058a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_FSMC_Init+0xb8>)
 800058e:	4a26      	ldr	r2, [pc, #152]	; (8000628 <MX_FSMC_Init+0xbc>)
 8000590:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_FSMC_Init+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_FSMC_Init+0xb8>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_FSMC_Init+0xb8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80005f0:	2305      	movs	r3, #5
 80005f2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80005fc:	2311      	movs	r3, #17
 80005fe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_FSMC_Init+0xb8>)
 800060c:	f005 fb04 	bl	8005c18 <HAL_SRAM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000616:	f000 feb1 	bl	800137c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000198 	.word	0x20000198
 8000628:	a0000104 	.word	0xa0000104

0800062c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d141      	bne.n	80006cc <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_FSMC_MspInit+0xa8>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6393      	str	r3, [r2, #56]	; 0x38
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_FSMC_MspInit+0xac>)
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800066a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800066e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800067c:	230c      	movs	r3, #12
 800067e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <HAL_FSMC_MspInit+0xb0>)
 8000686:	f001 fc97 	bl	8001fb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800068a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800068e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800069c:	230c      	movs	r3, #12
 800069e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006a6:	f001 fc87 	bl	8001fb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80006aa:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80006ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006bc:	230c      	movs	r3, #12
 80006be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <HAL_FSMC_MspInit+0xb4>)
 80006c6:	f001 fc77 	bl	8001fb8 <HAL_GPIO_Init>
 80006ca:	e000      	b.n	80006ce <HAL_FSMC_MspInit+0xa2>
    return;
 80006cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200001e8 	.word	0x200001e8
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80006ec:	f7ff ff9e 	bl	800062c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <MX_GPIO_Init+0x148>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <MX_GPIO_Init+0x148>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b48      	ldr	r3, [pc, #288]	; (8000840 <MX_GPIO_Init+0x148>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a43      	ldr	r2, [pc, #268]	; (8000840 <MX_GPIO_Init+0x148>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_GPIO_Init+0x148>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x148>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <MX_GPIO_Init+0x148>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x148>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <MX_GPIO_Init+0x148>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a35      	ldr	r2, [pc, #212]	; (8000840 <MX_GPIO_Init+0x148>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b33      	ldr	r3, [pc, #204]	; (8000840 <MX_GPIO_Init+0x148>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_GPIO_Init+0x148>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <MX_GPIO_Init+0x148>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_GPIO_Init+0x148>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0x148>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <MX_GPIO_Init+0x148>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_GPIO_Init+0x148>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	21c0      	movs	r1, #192	; 0xc0
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <MX_GPIO_Init+0x14c>)
 80007bc:	f001 feac 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TPAD_EN_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f241 0102 	movw	r1, #4098	; 0x1002
 80007c6:	4820      	ldr	r0, [pc, #128]	; (8000848 <MX_GPIO_Init+0x150>)
 80007c8:	f001 fea6 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80007cc:	2318      	movs	r3, #24
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <MX_GPIO_Init+0x154>)
 80007e0:	f001 fbea 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007e4:	23c0      	movs	r3, #192	; 0xc0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x14c>)
 80007fc:	f001 fbdc 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PEN_PRESENT_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PEN_PRESENT_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <MX_GPIO_Init+0x158>)
 8000814:	f001 fbd0 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TPAD_EN_Pin;
 8000818:	f241 0302 	movw	r3, #4098	; 0x1002
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x150>)
 8000832:	f001 fbc1 	bl	8001fb8 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020400 	.word	0x40020400
 800084c:	40021000 	.word	0x40021000
 8000850:	40020800 	.word	0x40020800

08000854 <_Z7lcdInitv>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800085a:	2300      	movs	r3, #0
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	2301      	movs	r3, #1
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	2101      	movs	r1, #1
 8000868:	2000      	movs	r0, #0
 800086a:	f000 fc27 	bl	80010bc <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4bae      	ldr	r3, [pc, #696]	; (8000b2c <_Z7lcdInitv+0x2d8>)
 8000874:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000876:	2300      	movs	r3, #0
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	2201      	movs	r2, #1
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fc19 	bl	80010bc <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4ba8      	ldr	r3, [pc, #672]	; (8000b30 <_Z7lcdInitv+0x2dc>)
 8000890:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000892:	2300      	movs	r3, #0
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2301      	movs	r3, #1
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fc0b 	bl	80010bc <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4ba2      	ldr	r3, [pc, #648]	; (8000b34 <_Z7lcdInitv+0x2e0>)
 80008ac:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80008ae:	2300      	movs	r3, #0
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	2301      	movs	r3, #1
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fbfd 	bl	80010bc <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b9c      	ldr	r3, [pc, #624]	; (8000b38 <_Z7lcdInitv+0x2e4>)
 80008c8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80008ca:	f000 fbcd 	bl	8001068 <_ZL8lcdResetv>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f000 fbd4 	bl	800107c <_ZL15lcdWriteCommandh>

  lcdWriteCommand(0xCF);
 80008d4:	20cf      	movs	r0, #207	; 0xcf
 80008d6:	f000 fbd1 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fbde 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x83);
 80008e0:	2083      	movs	r0, #131	; 0x83
 80008e2:	f000 fbdb 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x30);
 80008e6:	2030      	movs	r0, #48	; 0x30
 80008e8:	f000 fbd8 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xED);
 80008ec:	20ed      	movs	r0, #237	; 0xed
 80008ee:	f000 fbc5 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x64);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fbd2 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x03);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 fbcf 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x12);
 80008fe:	2012      	movs	r0, #18
 8000900:	f000 fbcc 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x81);
 8000904:	2081      	movs	r0, #129	; 0x81
 8000906:	f000 fbc9 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xE8);
 800090a:	20e8      	movs	r0, #232	; 0xe8
 800090c:	f000 fbb6 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x85);
 8000910:	2085      	movs	r0, #133	; 0x85
 8000912:	f000 fbc3 	bl	800109c <_ZL12lcdWriteDatat>
    //lcdWriteData(0x01);
  lcdWriteData(0x00);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fbc0 	bl	800109c <_ZL12lcdWriteDatat>
    //lcdWriteData(0x79);
  lcdWriteData(0x78);
 800091c:	2078      	movs	r0, #120	; 0x78
 800091e:	f000 fbbd 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xCB);
 8000922:	20cb      	movs	r0, #203	; 0xcb
 8000924:	f000 fbaa 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x39);
 8000928:	2039      	movs	r0, #57	; 0x39
 800092a:	f000 fbb7 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x2C);
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f000 fbb4 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fbb1 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x34);
 800093a:	2034      	movs	r0, #52	; 0x34
 800093c:	f000 fbae 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8000940:	2002      	movs	r0, #2
 8000942:	f000 fbab 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF7);
 8000946:	20f7      	movs	r0, #247	; 0xf7
 8000948:	f000 fb98 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x20);
 800094c:	2020      	movs	r0, #32
 800094e:	f000 fba5 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xEA);
 8000952:	20ea      	movs	r0, #234	; 0xea
 8000954:	f000 fb92 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fb9f 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fb9c 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000964:	20c0      	movs	r0, #192	; 0xc0
 8000966:	f000 fb89 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x26);
 800096a:	2026      	movs	r0, #38	; 0x26
 800096c:	f000 fb96 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000970:	20c1      	movs	r0, #193	; 0xc1
 8000972:	f000 fb83 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x11);
 8000976:	2011      	movs	r0, #17
 8000978:	f000 fb90 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 800097c:	20c5      	movs	r0, #197	; 0xc5
 800097e:	f000 fb7d 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x35);
 8000982:	2035      	movs	r0, #53	; 0x35
 8000984:	f000 fb8a 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3E);
 8000988:	203e      	movs	r0, #62	; 0x3e
 800098a:	f000 fb87 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800098e:	20c7      	movs	r0, #199	; 0xc7
 8000990:	f000 fb74 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0xBE);
 8000994:	20be      	movs	r0, #190	; 0xbe
 8000996:	f000 fb81 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800099a:	2036      	movs	r0, #54	; 0x36
 800099c:	f000 fb6e 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(lcdPortraitConfig);
 80009a0:	4b62      	ldr	r3, [pc, #392]	; (8000b2c <_Z7lcdInitv+0x2d8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fb78 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80009ac:	203a      	movs	r0, #58	; 0x3a
 80009ae:	f000 fb65 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x55);
 80009b2:	2055      	movs	r0, #85	; 0x55
 80009b4:	f000 fb72 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80009b8:	20b1      	movs	r0, #177	; 0xb1
 80009ba:	f000 fb5f 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fb6c 	bl	800109c <_ZL12lcdWriteDatat>
    //lcdWriteData(0x1B);
  lcdWriteData(0x18);
 80009c4:	2018      	movs	r0, #24
 80009c6:	f000 fb69 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(0xF2);
 80009ca:	20f2      	movs	r0, #242	; 0xf2
 80009cc:	f000 fb56 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x08);
 80009d0:	2008      	movs	r0, #8
 80009d2:	f000 fb63 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_GAMMASET);
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f000 fb50 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x01);
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fb5d 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80009e2:	20e0      	movs	r0, #224	; 0xe0
 80009e4:	f000 fb4a 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x1F);
 80009e8:	201f      	movs	r0, #31
 80009ea:	f000 fb57 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x1A);
 80009ee:	201a      	movs	r0, #26
 80009f0:	f000 fb54 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 80009f4:	2018      	movs	r0, #24
 80009f6:	f000 fb51 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f000 fb4e 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0F);
 8000a00:	200f      	movs	r0, #15
 8000a02:	f000 fb4b 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x06);
 8000a06:	2006      	movs	r0, #6
 8000a08:	f000 fb48 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x45);
 8000a0c:	2045      	movs	r0, #69	; 0x45
 8000a0e:	f000 fb45 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x87);
 8000a12:	2087      	movs	r0, #135	; 0x87
 8000a14:	f000 fb42 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x32);
 8000a18:	2032      	movs	r0, #50	; 0x32
 8000a1a:	f000 fb3f 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0A);
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f000 fb3c 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8000a24:	2007      	movs	r0, #7
 8000a26:	f000 fb39 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x02);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fb36 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x07);
 8000a30:	2007      	movs	r0, #7
 8000a32:	f000 fb33 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000a36:	2005      	movs	r0, #5
 8000a38:	f000 fb30 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 fb2d 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000a42:	20e1      	movs	r0, #225	; 0xe1
 8000a44:	f000 fb1a 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fb27 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x25);
 8000a4e:	2025      	movs	r0, #37	; 0x25
 8000a50:	f000 fb24 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8000a54:	2027      	movs	r0, #39	; 0x27
 8000a56:	f000 fb21 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000a5a:	2005      	movs	r0, #5
 8000a5c:	f000 fb1e 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x10);
 8000a60:	2010      	movs	r0, #16
 8000a62:	f000 fb1b 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x09);
 8000a66:	2009      	movs	r0, #9
 8000a68:	f000 fb18 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8000a6c:	203a      	movs	r0, #58	; 0x3a
 8000a6e:	f000 fb15 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x78);
 8000a72:	2078      	movs	r0, #120	; 0x78
 8000a74:	f000 fb12 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x4D);
 8000a78:	204d      	movs	r0, #77	; 0x4d
 8000a7a:	f000 fb0f 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x05);
 8000a7e:	2005      	movs	r0, #5
 8000a80:	f000 fb0c 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x18);
 8000a84:	2018      	movs	r0, #24
 8000a86:	f000 fb09 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x0D);
 8000a8a:	200d      	movs	r0, #13
 8000a8c:	f000 fb06 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x38);
 8000a90:	2038      	movs	r0, #56	; 0x38
 8000a92:	f000 fb03 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3A);
 8000a96:	203a      	movs	r0, #58	; 0x3a
 8000a98:	f000 fb00 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x1F);
 8000a9c:	201f      	movs	r0, #31
 8000a9e:	f000 fafd 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000aa2:	202a      	movs	r0, #42	; 0x2a
 8000aa4:	f000 faea 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 faf7 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 faf4 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 faf1 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0xEF);
 8000aba:	20ef      	movs	r0, #239	; 0xef
 8000abc:	f000 faee 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8000ac0:	202b      	movs	r0, #43	; 0x2b
 8000ac2:	f000 fadb 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x00);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fae8 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 fae5 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x01);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 fae2 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x3F);
 8000ad8:	203f      	movs	r0, #63	; 0x3f
 8000ada:	f000 fadf 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8000ade:	20b7      	movs	r0, #183	; 0xb7
 8000ae0:	f000 facc 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x07);
 8000ae4:	2007      	movs	r0, #7
 8000ae6:	f000 fad9 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8000aea:	20b6      	movs	r0, #182	; 0xb6
 8000aec:	f000 fac6 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(0x0A);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f000 fad3 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x82);
 8000af6:	2082      	movs	r0, #130	; 0x82
 8000af8:	f000 fad0 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x27);
 8000afc:	2027      	movs	r0, #39	; 0x27
 8000afe:	f000 facd 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(0x00);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 faca 	bl	800109c <_ZL12lcdWriteDatat>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000b08:	2011      	movs	r0, #17
 8000b0a:	f000 fab7 	bl	800107c <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8000b0e:	2064      	movs	r0, #100	; 0x64
 8000b10:	f001 f858 	bl	8001bc4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000b14:	2029      	movs	r0, #41	; 0x29
 8000b16:	f000 fab1 	bl	800107c <_ZL15lcdWriteCommandh>
  HAL_Delay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f001 f852 	bl	8001bc4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000b20:	202c      	movs	r0, #44	; 0x2c
 8000b22:	f000 faab 	bl	800107c <_ZL15lcdWriteCommandh>
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001f0 	.word	0x200001f0
 8000b30:	200001f1 	.word	0x200001f1
 8000b34:	200001f2 	.word	0x200001f2
 8000b38:	200001f3 	.word	0x200001f3

08000b3c <_Z10lcdFillRGBt>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <_Z10lcdFillRGBt+0x5c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <_Z10lcdFillRGBt+0x5c>)
 8000b50:	885b      	ldrh	r3, [r3, #2]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fa29 	bl	8000fb0 <_Z12lcdSetWindowtttt>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <_Z10lcdFillRGBt+0x5c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <_Z10lcdFillRGBt+0x5c>)
 8000b66:	885b      	ldrh	r3, [r3, #2]
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000b6e:	e003      	b.n	8000b78 <_Z10lcdFillRGBt+0x3c>
  {
    lcdWriteData(color);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fa92 	bl	800109c <_ZL12lcdWriteDatat>
  while(dimensions--)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	60fa      	str	r2, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf14      	ite	ne
 8000b82:	2301      	movne	r3, #1
 8000b84:	2300      	moveq	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f1      	bne.n	8000b70 <_Z10lcdFillRGBt+0x34>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000018 	.word	0x20000018

08000b9c <_Z12lcdDrawPixelttt>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	80bb      	strh	r3, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <_Z12lcdDrawPixelttt+0x44>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d20f      	bcs.n	8000bd8 <_Z12lcdDrawPixelttt+0x3c>
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <_Z12lcdDrawPixelttt+0x44>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d20a      	bcs.n	8000bd8 <_Z12lcdDrawPixelttt+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	88fa      	ldrh	r2, [r7, #6]
 8000bc6:	88b9      	ldrh	r1, [r7, #4]
 8000bc8:	88f8      	ldrh	r0, [r7, #6]
 8000bca:	f000 f9f1 	bl	8000fb0 <_Z12lcdSetWindowtttt>
    lcdWriteData(color);
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa63 	bl	800109c <_ZL12lcdWriteDatat>
 8000bd6:	e000      	b.n	8000bda <_Z12lcdDrawPixelttt+0x3e>
        return;
 8000bd8:	bf00      	nop
}
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000018 	.word	0x20000018

08000be4 <_Z11lcdDrawCharsshtt>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <_Z11lcdDrawCharsshtt+0x14c>)
 8000c08:	8812      	ldrh	r2, [r2, #0]
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f280 808b 	bge.w	8000d26 <_Z11lcdDrawCharsshtt+0x142>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000c10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c14:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <_Z11lcdDrawCharsshtt+0x14c>)
 8000c16:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	f280 8084 	bge.w	8000d26 <_Z11lcdDrawCharsshtt+0x142>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c22:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000c24:	6892      	ldr	r2, [r2, #8]
 8000c26:	8892      	ldrh	r2, [r2, #4]
 8000c28:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db7b      	blt.n	8000d26 <_Z11lcdDrawCharsshtt+0x142>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c32:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000c34:	6892      	ldr	r2, [r2, #8]
 8000c36:	88d2      	ldrh	r2, [r2, #6]
 8000c38:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db73      	blt.n	8000d26 <_Z11lcdDrawCharsshtt+0x142>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	88db      	ldrh	r3, [r3, #6]
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	e061      	b.n	8000d18 <_Z11lcdDrawCharsshtt+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
 8000c58:	e055      	b.n	8000d06 <_Z11lcdDrawCharsshtt+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	3a20      	subs	r2, #32
 8000c64:	4933      	ldr	r1, [pc, #204]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000c66:	6889      	ldr	r1, [r1, #8]
 8000c68:	88c9      	ldrh	r1, [r1, #6]
 8000c6a:	fb01 f202 	mul.w	r2, r1, r2
 8000c6e:	7ab9      	ldrb	r1, [r7, #10]
 8000c70:	fb02 f101 	mul.w	r1, r2, r1
 8000c74:	7bba      	ldrb	r2, [r7, #14]
 8000c76:	7ab8      	ldrb	r0, [r7, #10]
 8000c78:	fb00 f202 	mul.w	r2, r0, r2
 8000c7c:	4411      	add	r1, r2
 8000c7e:	7b3a      	ldrb	r2, [r7, #12]
 8000c80:	440a      	add	r2, r1
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	72fb      	strb	r3, [r7, #11]
 8000c8c:	e032      	b.n	8000cf4 <_Z11lcdDrawCharsshtt+0x110>
			{
				if((line & 0x80) == 0x80)
 8000c8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da12      	bge.n	8000cbc <_Z11lcdDrawCharsshtt+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b298      	uxth	r0, r3
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	883a      	ldrh	r2, [r7, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff ff71 	bl	8000b9c <_Z12lcdDrawPixelttt>
 8000cba:	e015      	b.n	8000ce8 <_Z11lcdDrawCharsshtt+0x104>
				}
				else if (bg != color)
 8000cbc:	8c3a      	ldrh	r2, [r7, #32]
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d011      	beq.n	8000ce8 <_Z11lcdDrawCharsshtt+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b298      	uxth	r0, r3
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	8c3a      	ldrh	r2, [r7, #32]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff ff5a 	bl	8000b9c <_Z12lcdDrawPixelttt>
				}
				line <<= 1;
 8000ce8:	7b7b      	ldrb	r3, [r7, #13]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000cee:	7afb      	ldrb	r3, [r7, #11]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	72fb      	strb	r3, [r7, #11]
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9c9      	bls.n	8000c8e <_Z11lcdDrawCharsshtt+0xaa>
			}

			xP += 8;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	3308      	adds	r3, #8
 8000cfe:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000d00:	7b3b      	ldrb	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	733b      	strb	r3, [r7, #12]
 8000d06:	7b3a      	ldrb	r2, [r7, #12]
 8000d08:	7abb      	ldrb	r3, [r7, #10]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3a5      	bcc.n	8000c5a <_Z11lcdDrawCharsshtt+0x76>
		}

		xP = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	3301      	adds	r3, #1
 8000d16:	73bb      	strb	r3, [r7, #14]
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <_Z11lcdDrawCharsshtt+0x150>)
 8000d1c:	6892      	ldr	r2, [r2, #8]
 8000d1e:	88d2      	ldrh	r2, [r2, #6]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	db97      	blt.n	8000c54 <_Z11lcdDrawCharsshtt+0x70>
 8000d24:	e000      	b.n	8000d28 <_Z11lcdDrawCharsshtt+0x144>
		return;
 8000d26:	bf00      	nop
	}
}
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000018 	.word	0x20000018
 8000d34:	20000020 	.word	0x20000020

08000d38 <_Z9lcdPrintfPKcz>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000d38:	b40f      	push	{r0, r1, r2, r3}
 8000d3a:	b590      	push	{r4, r7, lr}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af02      	add	r7, sp, #8
	static char buf[256];

	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	69b9      	ldr	r1, [r7, #24]
 8000d4a:	483e      	ldr	r0, [pc, #248]	; (8000e44 <_Z9lcdPrintfPKcz+0x10c>)
 8000d4c:	f00a f910 	bl	800af70 <vsiprintf>
	va_end(lst);

	p = buf;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <_Z9lcdPrintfPKcz+0x10c>)
 8000d52:	607b      	str	r3, [r7, #4]
	while (*p)
 8000d54:	e069      	b.n	8000e2a <_Z9lcdPrintfPKcz+0xf2>
	{
		if (*p == '\n')
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d10e      	bne.n	8000d7c <_Z9lcdPrintfPKcz+0x44>
		{
			cursorXY.y += lcdFont.pFont->Height + 1;
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000d60:	885a      	ldrh	r2, [r3, #2]
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	88db      	ldrh	r3, [r3, #6]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000d72:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	801a      	strh	r2, [r3, #0]
 8000d7a:	e04a      	b.n	8000e12 <_Z9lcdPrintfPKcz+0xda>
		}
		else if (*p == '\r')
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b0d      	cmp	r3, #13
 8000d82:	d046      	beq.n	8000e12 <_Z9lcdPrintfPKcz+0xda>
		{
			// skip em
		}
		else if (*p == '\t')
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d10b      	bne.n	8000da4 <_Z9lcdPrintfPKcz+0x6c>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000d8e:	881a      	ldrh	r2, [r3, #0]
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	e036      	b.n	8000e12 <_Z9lcdPrintfPKcz+0xda>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b218      	sxth	r0, r3
 8000daa:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000dac:	885b      	ldrh	r3, [r3, #2]
 8000dae:	b219      	sxth	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b29c      	uxth	r4, r3
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	f7ff ff0e 	bl	8000be4 <_Z11lcdDrawCharsshtt>
			cursorXY.x += lcdFont.pFont->Width;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000dca:	881a      	ldrh	r2, [r3, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	889b      	ldrh	r3, [r3, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000dd8:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000ddc:	7b1b      	ldrb	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d017      	beq.n	8000e12 <_Z9lcdPrintfPKcz+0xda>
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <_Z9lcdPrintfPKcz+0x118>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	889b      	ldrh	r3, [r3, #4]
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dd0b      	ble.n	8000e12 <_Z9lcdPrintfPKcz+0xda>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000dfc:	885a      	ldrh	r2, [r3, #2]
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_Z9lcdPrintfPKcz+0x114>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	88db      	ldrh	r3, [r3, #6]
 8000e04:	4413      	add	r3, r2
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000e0a:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000e1a:	885a      	ldrh	r2, [r3, #2]
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <_Z9lcdPrintfPKcz+0x118>)
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d302      	bcc.n	8000e2a <_Z9lcdPrintfPKcz+0xf2>
		{
			cursorXY.y = 0;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_Z9lcdPrintfPKcz+0x110>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d191      	bne.n	8000d56 <_Z9lcdPrintfPKcz+0x1e>
		}
	}

}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e3e:	b004      	add	sp, #16
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200001f4 	.word	0x200001f4
 8000e48:	200001ec 	.word	0x200001ec
 8000e4c:	20000020 	.word	0x20000020
 8000e50:	20000018 	.word	0x20000018

08000e54 <_Z14lcdSetTextFontP6_tFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <_Z14lcdSetTextFontP6_tFont+0x1c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6093      	str	r3, [r2, #8]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000020 	.word	0x20000020

08000e74 <_Z15lcdSetTextColortt>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	80fb      	strh	r3, [r7, #6]
 8000e80:	4613      	mov	r3, r2
 8000e82:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_Z15lcdSetTextColortt+0x28>)
 8000e88:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <_Z15lcdSetTextColortt+0x28>)
 8000e8e:	6053      	str	r3, [r2, #4]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000020 	.word	0x20000020

08000ea0 <_Z17lcdSetOrientation21lcdOrientationTypeDef>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000eb0:	2036      	movs	r0, #54	; 0x36
 8000eb2:	f000 f8e3 	bl	800107c <_ZL15lcdWriteCommandh>

	switch (lcdProperties.orientation)
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d842      	bhi.n	8000f44 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa4>
 8000ebe:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0x24>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000f0d 	.word	0x08000f0d
 8000ecc:	08000ef1 	.word	0x08000ef1
 8000ed0:	08000f29 	.word	0x08000f29
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xcc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f8de 	bl	800109c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000ee2:	22f0      	movs	r2, #240	; 0xf0
 8000ee4:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eec:	805a      	strh	r2, [r3, #2]
			break;
 8000eee:	e02a      	b.n	8000f46 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8d0 	bl	800109c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000efe:	22f0      	movs	r2, #240	; 0xf0
 8000f00:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f08:	805a      	strh	r2, [r3, #2]
			break;
 8000f0a:	e01c      	b.n	8000f46 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd4>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8c2 	bl	800109c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f1e:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f22:	22f0      	movs	r2, #240	; 0xf0
 8000f24:	805a      	strh	r2, [r3, #2]
			break;
 8000f26:	e00e      	b.n	8000f46 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xd8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8b4 	bl	800109c <_ZL12lcdWriteDatat>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f3a:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f3e:	22f0      	movs	r2, #240	; 0xf0
 8000f40:	805a      	strh	r2, [r3, #2]
			break;
 8000f42:	e000      	b.n	8000f46 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xa6>
		default:
			break;
 8000f44:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <_Z17lcdSetOrientation21lcdOrientationTypeDef+0xc8>)
 8000f50:	885b      	ldrh	r3, [r3, #2]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f829 	bl	8000fb0 <_Z12lcdSetWindowtttt>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	200001f0 	.word	0x200001f0
 8000f70:	200001f2 	.word	0x200001f2
 8000f74:	200001f1 	.word	0x200001f1
 8000f78:	200001f3 	.word	0x200001f3

08000f7c <_Z12lcdSetCursortt>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <_Z12lcdSetCursortt+0x30>)
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <_Z12lcdSetCursortt+0x30>)
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	88f8      	ldrh	r0, [r7, #6]
 8000fa0:	f000 f806 	bl	8000fb0 <_Z12lcdSetWindowtttt>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001ec 	.word	0x200001ec

08000fb0 <_Z12lcdSetWindowtttt>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	803b      	strh	r3, [r7, #0]
//  lcdWriteData((y0 >> 8) & 0xFF);
//  lcdWriteData(y0 & 0xFF);
//  lcdWriteData((y1 >> 8) & 0xFF);
//  lcdWriteData(y1 & 0xFF);
//  lcdWriteCommand(ILI9341_MEMORYWRITE);
  lcdWriteCommand(ILI9341_COLADDRSET);
 8000fce:	202a      	movs	r0, #42	; 0x2a
 8000fd0:	f000 f854 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(x0 >> 8) ;
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f85e 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(x0 );
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f85a 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(x1 >> 8);
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f854 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(x1);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f850 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8000ffc:	202b      	movs	r0, #43	; 0x2b
 8000ffe:	f000 f83d 	bl	800107c <_ZL15lcdWriteCommandh>
  lcdWriteData(y0 >> 8);
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	b29b      	uxth	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f847 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(y0);
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f843 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(y1 >> 8);
 8001016:	883b      	ldrh	r3, [r7, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f83d 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteData(y1);
 8001022:	883b      	ldrh	r3, [r7, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f839 	bl	800109c <_ZL12lcdWriteDatat>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800102a:	202c      	movs	r0, #44	; 0x2c
 800102c:	f000 f826 	bl	800107c <_ZL15lcdWriteCommandh>
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <_Z12lcdGetHeightv>:
{
  return lcdProperties.width;
}

uint16_t lcdGetHeight(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <_Z12lcdGetHeightv+0x14>)
 800103e:	885b      	ldrh	r3, [r3, #2]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000018 	.word	0x20000018

08001050 <_Z14lcdGetTextFontv>:
{
  return lcdProperties.orientation;
}

sFONT* lcdGetTextFont(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <_Z14lcdGetTextFontv+0x14>)
 8001056:	689b      	ldr	r3, [r3, #8]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000020 	.word	0x20000020

08001068 <_ZL8lcdResetv>:

  while(i < sizeof(*data)/ sizeof(data[1]));
}

static void lcdReset(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 800106c:	2001      	movs	r0, #1
 800106e:	f000 f805 	bl	800107c <_ZL15lcdWriteCommandh>
	HAL_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f000 fda6 	bl	8001bc4 <HAL_Delay>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZL15lcdWriteCommandh>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001086:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	b292      	uxth	r2, r2
 800108e:	801a      	strh	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_ZL12lcdWriteDatat>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <_ZL12lcdWriteDatat+0x1c>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	8013      	strh	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	60080000 	.word	0x60080000

080010bc <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 80010bc:	b490      	push	{r4, r7}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) 	value 	|= ILI9341_MADCTL_MH;
 80010de:	7f3b      	ldrb	r3, [r7, #28]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x30>
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) 		value 	|= ILI9341_MADCTL_BGR;
 80010ec:	7e3b      	ldrb	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x3e>
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) 	value 	|= ILI9341_MADCTL_ML;
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x4c>
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) 	value 	|= ILI9341_MADCTL_MV;
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x5a>
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) 	value 	|= ILI9341_MADCTL_MX;
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x68>
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001122:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) 		value 	|= ILI9341_MADCTL_MY;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <_ZL33lcdBuildMemoryAccessControlConfigbbbbbb+0x76>
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001130:	73fb      	strb	r3, [r7, #15]
  return value;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bc90      	pop	{r4, r7}
 800113c:	4770      	bx	lr
	...

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fccb 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f86d 	bl	8001228 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f7ff fad3 	bl	80006f8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001152:	f7ff fa0b 	bl	800056c <MX_FSMC_Init>
  MX_RTC_Init();
 8001156:	f000 f917 	bl	8001388 <MX_RTC_Init>
  // MX_SDIO_SD_Init();
  MX_SPI1_Init();
 800115a:	f000 f965 	bl	8001428 <MX_SPI1_Init>
  MX_SPI2_Init();
 800115e:	f000 f999 	bl	8001494 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001162:	f000 fc19 	bl	8001998 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001166:	f009 f9f9 	bl	800a55c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  time.Hours = 22;
//  time.Minutes = 59;
//  time.Seconds = 00;
//  HAL_RTC_SetTime(&rtc, &time , RTC_HOURFORMAT_24);
  LCD_BL_ON();
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	4828      	ldr	r0, [pc, #160]	; (8001210 <main+0xd0>)
 8001170:	f001 f9d2 	bl	8002518 <HAL_GPIO_WritePin>
   lcdInit();
 8001174:	f7ff fb6e 	bl	8000854 <_Z7lcdInitv>
   int i = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
   lcdSetOrientation((lcdOrientationTypeDef)i);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe8d 	bl	8000ea0 <_Z17lcdSetOrientation21lcdOrientationTypeDef>
   TpadInit();
 8001186:	f000 fb49 	bl	800181c <_Z8TpadInitv>
   HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f000 fd1a 	bl	8001bc4 <HAL_Delay>
  // HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
   lcdFillRGB(COLOR_BLACK);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fcd3 	bl	8000b3c <_Z10lcdFillRGBt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
      	if(TpadGetCoordinates(penX, penY)){
 8001196:	491f      	ldr	r1, [pc, #124]	; (8001214 <main+0xd4>)
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <main+0xd8>)
 800119a:	f000 fb89 	bl	80018b0 <_Z18TpadGetCoordinatesRtS_>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d014      	beq.n	80011ce <main+0x8e>
      		lcdSetTextFont(&Font16);
 80011a4:	481d      	ldr	r0, [pc, #116]	; (800121c <main+0xdc>)
 80011a6:	f7ff fe55 	bl	8000e54 <_Z14lcdSetTextFontP6_tFont>
      	      	lcdSetCursor(1 , 1);
 80011aa:	2101      	movs	r1, #1
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fee5 	bl	8000f7c <_Z12lcdSetCursortt>
      	      	lcdSetTextColor(COLOR_GREENYELLOW, COLOR_BLACK);
 80011b2:	2100      	movs	r1, #0
 80011b4:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 80011b8:	f7ff fe5c 	bl	8000e74 <_Z15lcdSetTextColortt>
      	      	lcdPrintf("PEN: X %5i  Y %5i", penX, penY);
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <main+0xd8>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <main+0xd4>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <main+0xe0>)
 80011ca:	f7ff fdb5 	bl	8000d38 <_Z9lcdPrintfPKcz>
      	}
      	unsigned long t = testText();
 80011ce:	f000 f8a1 	bl	8001314 <_Z8testTextv>
 80011d2:	6038      	str	r0, [r7, #0]
      		lcdSetTextFont(&Font16);
 80011d4:	4811      	ldr	r0, [pc, #68]	; (800121c <main+0xdc>)
 80011d6:	f7ff fe3d 	bl	8000e54 <_Z14lcdSetTextFontP6_tFont>
      		lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80011da:	f7ff ff2d 	bl	8001038 <_Z12lcdGetHeightv>
 80011de:	4603      	mov	r3, r0
 80011e0:	461c      	mov	r4, r3
 80011e2:	f7ff ff35 	bl	8001050 <_Z14lcdGetTextFontv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	88db      	ldrh	r3, [r3, #6]
 80011ea:	1ae3      	subs	r3, r4, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff fec1 	bl	8000f7c <_Z12lcdSetCursortt>
      		lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80011fa:	2100      	movs	r1, #0
 80011fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001200:	f7ff fe38 	bl	8000e74 <_Z15lcdSetTextColortt>
      		lcdPrintf("Time: %4lu ms", t);
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <main+0xe4>)
 8001208:	f7ff fd96 	bl	8000d38 <_Z9lcdPrintfPKcz>
      		// HAL_Delay(_delay);

//      demoLCD(i);
//    	  i++;
      }
 800120c:	e7c3      	b.n	8001196 <main+0x56>
 800120e:	bf00      	nop
 8001210:	40020400 	.word	0x40020400
 8001214:	2000030a 	.word	0x2000030a
 8001218:	20000308 	.word	0x20000308
 800121c:	20000008 	.word	0x20000008
 8001220:	0800b8a4 	.word	0x0800b8a4
 8001224:	0800b8b8 	.word	0x0800b8b8

08001228 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f009 fea4 	bl	800af84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <_Z18SystemClock_Configv+0xe4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <_Z18SystemClock_Configv+0xe4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <_Z18SystemClock_Configv+0xe4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <_Z18SystemClock_Configv+0xe8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <_Z18SystemClock_Configv+0xe8>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <_Z18SystemClock_Configv+0xe8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012a0:	23a8      	movs	r3, #168	; 0xa8
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a8:	2307      	movs	r3, #7
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fb9b 	bl	80039ec <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80012c6:	f000 f859 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2302      	movs	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2105      	movs	r1, #5
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fdf7 	bl	8003edc <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80012fe:	f000 f83d 	bl	800137c <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	; 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <_Z8testTextv>:
	lcdFillRGB(COLOR_BLACK);
	return t += HAL_GetTick() - start;
}

unsigned long testText()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick();
 800131a:	f000 fc47 	bl	8001bac <HAL_GetTick>
 800131e:	6078      	str	r0, [r7, #4]
	//lcdFillRGB(COLOR_BLACK);
	HAL_RTC_GetTime(&hrtc, &time, RTC_HOURFORMAT_24);
 8001320:	2200      	movs	r2, #0
 8001322:	4912      	ldr	r1, [pc, #72]	; (800136c <_Z8testTextv+0x58>)
 8001324:	4812      	ldr	r0, [pc, #72]	; (8001370 <_Z8testTextv+0x5c>)
 8001326:	f003 f95e 	bl	80045e6 <HAL_RTC_GetTime>
	lcdSetCursor(50, 60);
 800132a:	213c      	movs	r1, #60	; 0x3c
 800132c:	2032      	movs	r0, #50	; 0x32
 800132e:	f7ff fe25 	bl	8000f7c <_Z12lcdSetCursortt>
//	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
//	lcdSetTextFont(&Font16);
//	lcdPrintf("Hello World!\r\n\n\n");
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8001332:	2100      	movs	r1, #0
 8001334:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001338:	f7ff fd9c 	bl	8000e74 <_Z15lcdSetTextColortt>
	lcdSetTextFont(&Font24);
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <_Z8testTextv+0x60>)
 800133e:	f7ff fd89 	bl	8000e54 <_Z14lcdSetTextFontP6_tFont>
	lcdPrintf("%02i : %02i : %02i ", time.Hours, time.Minutes, time.Seconds);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <_Z8testTextv+0x58>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_Z8testTextv+0x58>)
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	461a      	mov	r2, r3
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_Z8testTextv+0x58>)
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <_Z8testTextv+0x64>)
 8001354:	f7ff fcf0 	bl	8000d38 <_Z9lcdPrintfPKcz>
//	lcdPrintf("O, HO, HO! \r\n");
//	lcdPrintf("Furry cat coming\r\n");
//	lcdPrintf("Miauuuu!\r\n");
//	lcdPrintf("MUUUURRRRR,\r\n");
//	lcdPrintf("murrr\r\n");
	return HAL_GetTick() - start;
 8001358:	f000 fc28 	bl	8001bac <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002f4 	.word	0x200002f4
 8001370:	2000030c 	.word	0x2000030c
 8001374:	20000010 	.word	0x20000010
 8001378:	0800b8e4 	.word	0x0800b8e4

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_RTC_Init+0x44>)
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <MX_RTC_Init+0x48>)
 8001390:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_RTC_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_RTC_Init+0x44>)
 800139a:	227f      	movs	r2, #127	; 0x7f
 800139c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_RTC_Init+0x44>)
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_RTC_Init+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_RTC_Init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_RTC_Init+0x44>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_RTC_Init+0x44>)
 80013b8:	f003 f892 	bl	80044e0 <HAL_RTC_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80013c2:	f7ff ffdb 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000030c 	.word	0x2000030c
 80013d0:	40002800 	.word	0x40002800

080013d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <HAL_RTC_MspInit+0x4c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d111      	bne.n	8001418 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4618      	mov	r0, r3
 8001404:	f002 ff8a 	bl	800431c <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800140e:	f7ff ffb5 	bl	800137c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_RTC_MspInit+0x50>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40002800 	.word	0x40002800
 8001424:	42470e3c 	.word	0x42470e3c

08001428 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_SPI1_Init+0x64>)
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <MX_SPI1_Init+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SPI1_Init+0x64>)
 8001434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SPI1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SPI1_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SPI1_Init+0x64>)
 8001454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_SPI1_Init+0x64>)
 8001474:	220a      	movs	r2, #10
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_SPI1_Init+0x64>)
 800147a:	f003 fcbd 	bl	8004df8 <HAL_SPI_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001484:	f7ff ff7a 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200003b0 	.word	0x200003b0
 8001490:	40013000 	.word	0x40013000

08001494 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_SPI2_Init+0x64>)
 800149a:	4a18      	ldr	r2, [pc, #96]	; (80014fc <MX_SPI2_Init+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014c8:	2218      	movs	r2, #24
 80014ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014e0:	220a      	movs	r2, #10
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_SPI2_Init+0x64>)
 80014e6:	f003 fc87 	bl	8004df8 <HAL_SPI_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014f0:	f7ff ff44 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000408 	.word	0x20000408
 80014fc:	40003800 	.word	0x40003800

08001500 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <HAL_SPI_MspInit+0x108>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d134      	bne.n	800158c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_SPI_MspInit+0x10c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a38      	ldr	r2, [pc, #224]	; (800160c <HAL_SPI_MspInit+0x10c>)
 800152c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_SPI_MspInit+0x10c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_SPI_MspInit+0x10c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <HAL_SPI_MspInit+0x10c>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_SPI_MspInit+0x10c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800155a:	2338      	movs	r3, #56	; 0x38
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156a:	2305      	movs	r3, #5
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4826      	ldr	r0, [pc, #152]	; (8001610 <HAL_SPI_MspInit+0x110>)
 8001576:	f000 fd1f 	bl	8001fb8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2023      	movs	r0, #35	; 0x23
 8001580:	f000 fc43 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001584:	2023      	movs	r0, #35	; 0x23
 8001586:	f000 fc5c 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800158a:	e039      	b.n	8001600 <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_SPI_MspInit+0x114>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d134      	bne.n	8001600 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_SPI_MspInit+0x10c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_SPI_MspInit+0x10c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x10c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_SPI_MspInit+0x10c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_SPI_MspInit+0x10c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_SPI_MspInit+0x10c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e0:	2305      	movs	r3, #5
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_SPI_MspInit+0x110>)
 80015ec:	f000 fce4 	bl	8001fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2024      	movs	r0, #36	; 0x24
 80015f6:	f000 fc08 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015fa:	2024      	movs	r0, #36	; 0x24
 80015fc:	f000 fc21 	bl	8001e42 <HAL_NVIC_EnableIRQ>
}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	; 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400
 8001614:	40003800 	.word	0x40003800

08001618 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_SPI_MspDeInit+0x5c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10d      	bne.n	8001646 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_SPI_MspDeInit+0x60>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <HAL_SPI_MspDeInit+0x60>)
 8001630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8001636:	2138      	movs	r1, #56	; 0x38
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <HAL_SPI_MspDeInit+0x64>)
 800163a:	f000 fe59 	bl	80022f0 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800163e:	2023      	movs	r0, #35	; 0x23
 8001640:	f000 fc0d 	bl	8001e5e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8001644:	e012      	b.n	800166c <HAL_SPI_MspDeInit+0x54>
  else if(spiHandle->Instance==SPI2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_SPI_MspDeInit+0x68>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d10d      	bne.n	800166c <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_SPI_MspDeInit+0x60>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_SPI_MspDeInit+0x60>)
 8001656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800165c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001660:	4806      	ldr	r0, [pc, #24]	; (800167c <HAL_SPI_MspDeInit+0x64>)
 8001662:	f000 fe45 	bl	80022f0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001666:	2024      	movs	r0, #36	; 0x24
 8001668:	f000 fbf9 	bl	8001e5e <HAL_NVIC_DisableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013000 	.word	0x40013000
 8001678:	40023800 	.word	0x40023800
 800167c:	40020400 	.word	0x40020400
 8001680:	40003800 	.word	0x40003800

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 fa30 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <SPI1_IRQHandler+0x10>)
 800172e:	f004 f81f 	bl	8005770 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200003b0 	.word	0x200003b0

0800173c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <SPI2_IRQHandler+0x10>)
 8001742:	f004 f815 	bl	8005770 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000408 	.word	0x20000408

08001750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <USART1_IRQHandler+0x10>)
 8001756:	f004 faf7 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000464 	.word	0x20000464

08001764 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <SDIO_IRQHandler+0x10>)
 800176a:	f003 f83b 	bl	80047e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000032c 	.word	0x2000032c

08001778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <OTG_FS_IRQHandler+0x10>)
 800177e:	f001 f828 	bl	80027d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001990 	.word	0x20001990

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f009 fbea 	bl	800af94 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20020000 	.word	0x20020000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	20000460 	.word	0x20000460
 80017f4:	200021e0 	.word	0x200021e0

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <_Z8TpadInitv>:
 *  Created on: Dec 29, 2023
 *      Author: Сергей
 */
#include "tpad.h"

void TpadInit(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TPAD_EN_GPIO_Port, TPAD_EN_Pin, GPIO_PIN_SET );
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <_Z8TpadInitv+0x60>)
 8001828:	f000 fe76 	bl	8002518 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800182c:	200a      	movs	r0, #10
 800182e:	f000 f9c9 	bl	8001bc4 <HAL_Delay>
  if (HAL_SPI_DeInit(&SPI_PORT) != HAL_OK){
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <_Z8TpadInitv+0x64>)
 8001834:	f003 fb69 	bl	8004f0a <HAL_SPI_DeInit>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_Z8TpadInitv+0x30>
     Error_Handler();
 8001848:	f7ff fd98 	bl	800137c <Error_Handler>
   }
    SPI_PORT.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <_Z8TpadInitv+0x64>)
 800184e:	2228      	movs	r2, #40	; 0x28
 8001850:	61da      	str	r2, [r3, #28]
    if(HAL_SPI_Init(&SPI_PORT) != HAL_OK){
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <_Z8TpadInitv+0x64>)
 8001854:	f003 fad0 	bl	8004df8 <HAL_SPI_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_Z8TpadInitv+0x50>
	Error_Handler();
 8001868:	f7ff fd88 	bl	800137c <Error_Handler>
      };
    HAL_GPIO_WritePin(TPAD_EN_GPIO_Port, TPAD_EN_Pin, GPIO_PIN_RESET );
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <_Z8TpadInitv+0x60>)
 8001874:	f000 fe50 	bl	8002518 <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020400 	.word	0x40020400
 8001880:	20000408 	.word	0x20000408

08001884 <_Z14TpadPenPresentv>:
   {
     Error_Handler();
   }
}

bool TpadPenPresent(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  if(HAL_GPIO_ReadPin(PEN_PRESENT_GPIO_Port, PEN_PRESENT_Pin) == 0){
 8001888:	2120      	movs	r1, #32
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <_Z14TpadPenPresentv+0x28>)
 800188c:	f000 fe2c 	bl	80024e8 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_Z14TpadPenPresentv+0x20>
      return true;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <_Z14TpadPenPresentv+0x22>
  }
  return false;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40020800 	.word	0x40020800

080018b0 <_Z18TpadGetCoordinatesRtS_>:

bool TpadGetCoordinates(uint16_t& Xcoord, uint16_t& Ycoord){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]

  uint8_t  ReadXcom[1] = {0xD0},
 80018ba:	23d0      	movs	r3, #208	; 0xd0
 80018bc:	763b      	strb	r3, [r7, #24]
	   ReadYcom[1] = {0x90};
 80018be:	2390      	movs	r3, #144	; 0x90
 80018c0:	753b      	strb	r3, [r7, #20]
  uint16_t rawX = 0,
 80018c2:	2300      	movs	r3, #0
 80018c4:	83fb      	strh	r3, [r7, #30]
	   rawY = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	83bb      	strh	r3, [r7, #28]
  uint8_t  sample = 8;
 80018ca:	2308      	movs	r3, #8
 80018cc:	76bb      	strb	r3, [r7, #26]
  uint8_t _x[2], _y[2];


  for(uint8_t i = 0; i < sample; ++i){
 80018ce:	2300      	movs	r3, #0
 80018d0:	76fb      	strb	r3, [r7, #27]
 80018d2:	e042      	b.n	800195a <_Z18TpadGetCoordinatesRtS_+0xaa>
      if(! TpadPenPresent()) {
 80018d4:	f7ff ffd6 	bl	8001884 <_Z14TpadPenPresentv>
 80018d8:	4603      	mov	r3, r0
 80018da:	f083 0301 	eor.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <_Z18TpadGetCoordinatesRtS_+0x38>
	  return false;} // no pen detected
 80018e4:	2300      	movs	r3, #0
 80018e6:	e050      	b.n	800198a <_Z18TpadGetCoordinatesRtS_+0xda>

      HAL_SPI_Transmit(&SPI_PORT,ReadXcom, 1, HAL_MAX_DELAY);
 80018e8:	f107 0118 	add.w	r1, r7, #24
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2201      	movs	r2, #1
 80018f2:	4828      	ldr	r0, [pc, #160]	; (8001994 <_Z18TpadGetCoordinatesRtS_+0xe4>)
 80018f4:	f003 fb31 	bl	8004f5a <HAL_SPI_Transmit>
      HAL_SPI_Receive(&SPI_PORT, _x, 2, HAL_MAX_DELAY);
 80018f8:	f107 0110 	add.w	r1, r7, #16
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	2202      	movs	r2, #2
 8001902:	4824      	ldr	r0, [pc, #144]	; (8001994 <_Z18TpadGetCoordinatesRtS_+0xe4>)
 8001904:	f003 fc6c 	bl	80051e0 <HAL_SPI_Receive>

      HAL_SPI_Transmit(&SPI_PORT,ReadYcom, 1, HAL_MAX_DELAY);
 8001908:	f107 0114 	add.w	r1, r7, #20
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2201      	movs	r2, #1
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <_Z18TpadGetCoordinatesRtS_+0xe4>)
 8001914:	f003 fb21 	bl	8004f5a <HAL_SPI_Transmit>
      HAL_SPI_Receive(&SPI_PORT, _y, 2, HAL_MAX_DELAY);
 8001918:	f107 010c 	add.w	r1, r7, #12
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	2202      	movs	r2, #2
 8001922:	481c      	ldr	r0, [pc, #112]	; (8001994 <_Z18TpadGetCoordinatesRtS_+0xe4>)
 8001924:	f003 fc5c 	bl	80051e0 <HAL_SPI_Receive>
      rawX += (((uint16_t) _x[0]) << 8) | ((uint16_t) _x[1]);
 8001928:	7c3b      	ldrb	r3, [r7, #16]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21a      	sxth	r2, r3
 800192e:	7c7b      	ldrb	r3, [r7, #17]
 8001930:	b21b      	sxth	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b21b      	sxth	r3, r3
 8001936:	b29a      	uxth	r2, r3
 8001938:	8bfb      	ldrh	r3, [r7, #30]
 800193a:	4413      	add	r3, r2
 800193c:	83fb      	strh	r3, [r7, #30]
      rawY += (((uint16_t) _y[0]) << 8) | ((uint16_t) _y[1]);
 800193e:	7b3b      	ldrb	r3, [r7, #12]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	b29a      	uxth	r2, r3
 800194e:	8bbb      	ldrh	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	83bb      	strh	r3, [r7, #28]
  for(uint8_t i = 0; i < sample; ++i){
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	3301      	adds	r3, #1
 8001958:	76fb      	strb	r3, [r7, #27]
 800195a:	7efa      	ldrb	r2, [r7, #27]
 800195c:	7ebb      	ldrb	r3, [r7, #26]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3b8      	bcc.n	80018d4 <_Z18TpadGetCoordinatesRtS_+0x24>
  }
  if (sample == 0) {
 8001962:	7ebb      	ldrb	r3, [r7, #26]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <_Z18TpadGetCoordinatesRtS_+0xbc>
      return false;}
 8001968:	2300      	movs	r3, #0
 800196a:	e00e      	b.n	800198a <_Z18TpadGetCoordinatesRtS_+0xda>
  Xcoord = rawX / sample;
 800196c:	8bfa      	ldrh	r2, [r7, #30]
 800196e:	7ebb      	ldrb	r3, [r7, #26]
 8001970:	fb92 f3f3 	sdiv	r3, r2, r3
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	801a      	strh	r2, [r3, #0]
  Ycoord = rawY / sample;
 800197a:	8bba      	ldrh	r2, [r7, #28]
 800197c:	7ebb      	ldrb	r3, [r7, #26]
 800197e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001982:	b29a      	uxth	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	801a      	strh	r2, [r3, #0]
  return true;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000408 	.word	0x20000408

08001998 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART1_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019d0:	f004 f96a 	bl	8005ca8 <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f7ff fccf 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000464 	.word	0x20000464
 80019e8:	40011000 	.word	0x40011000

080019ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_UART_MspInit+0x94>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d134      	bne.n	8001a78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_UART_MspInit+0x98>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <HAL_UART_MspInit+0x9c>)
 8001a64:	f000 faa8 	bl	8001fb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2025      	movs	r0, #37	; 0x25
 8001a6e:	f000 f9cc 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a72:	2025      	movs	r0, #37	; 0x25
 8001a74:	f000 f9e5 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a90:	f7ff feb2 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f009 fa71 	bl	800afa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fb3f 	bl	8001140 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001ad0:	0800e4a8 	.word	0x0800e4a8
  ldr r2, =_sbss
 8001ad4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001ad8:	200021dc 	.word	0x200021dc

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f973 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fdb6 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f999 	bl	8001e7a <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f953 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000030 	.word	0x20000030
 8001b7c:	20000038 	.word	0x20000038
 8001b80:	20000034 	.word	0x20000034

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000038 	.word	0x20000038
 8001ba8:	200004ac 	.word	0x200004ac

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200004ac 	.word	0x200004ac

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000038 	.word	0x20000038

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db12      	blt.n	8001ce4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <__NVIC_DisableIRQ+0x44>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	3320      	adds	r3, #32
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff05 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff1a 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff0d 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff1d 	bl	8001cac <__NVIC_DisableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff94 	bl	8001db0 <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff fe84 	bl	8001bac <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d008      	beq.n	8001ec4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e052      	b.n	8001f6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0216 	bic.w	r2, r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_DMA_Abort+0x62>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0208 	bic.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f14:	e013      	b.n	8001f3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f16:	f7ff fe49 	bl	8001bac <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d90c      	bls.n	8001f3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e015      	b.n	8001f6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e4      	bne.n	8001f16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	223f      	movs	r2, #63	; 0x3f
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00c      	b.n	8001faa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2205      	movs	r2, #5
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e16b      	b.n	80022ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 815a 	bne.w	80022a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d005      	beq.n	800200a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d130      	bne.n	800206c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80b4 	beq.w	80022a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b60      	ldr	r3, [pc, #384]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_GPIO_Init+0x310>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x226>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x222>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x21e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x320>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_GPIO_Init+0x324>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_GPIO_Init+0x328>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x212>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_GPIO_Init+0x32c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_GPIO_Init+0x330>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x20a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c2:	2308      	movs	r3, #8
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x310>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_GPIO_Init+0x334>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_GPIO_Init+0x334>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x334>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_GPIO_Init+0x334>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae90 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e0cd      	b.n	80024a8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	f040 80bd 	bne.w	80024a2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002328:	4a65      	ldr	r2, [pc, #404]	; (80024c0 <HAL_GPIO_DeInit+0x1d0>)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_GPIO_DeInit+0x1d4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d02b      	beq.n	80023aa <HAL_GPIO_DeInit+0xba>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a5c      	ldr	r2, [pc, #368]	; (80024c8 <HAL_GPIO_DeInit+0x1d8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_DeInit+0xb6>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_GPIO_DeInit+0x1dc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_DeInit+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_GPIO_DeInit+0x1e0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_DeInit+0xae>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <HAL_GPIO_DeInit+0x1e4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_DeInit+0xaa>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_GPIO_DeInit+0x1e8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_DeInit+0xa6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_GPIO_DeInit+0x1ec>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_DeInit+0xa2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <HAL_GPIO_DeInit+0x1f0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_DeInit+0x9e>
 800238a:	2307      	movs	r3, #7
 800238c:	e00e      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 800238e:	2308      	movs	r3, #8
 8002390:	e00c      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 8002392:	2306      	movs	r3, #6
 8002394:	e00a      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 8002396:	2305      	movs	r3, #5
 8002398:	e008      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 800239a:	2304      	movs	r3, #4
 800239c:	e006      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 800239e:	2303      	movs	r3, #3
 80023a0:	e004      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_GPIO_DeInit+0xbc>
 80023aa:	2300      	movs	r3, #0
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	f002 0203 	and.w	r2, r2, #3
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	4093      	lsls	r3, r2
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d132      	bne.n	8002422 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80023bc:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4947      	ldr	r1, [pc, #284]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4944      	ldr	r1, [pc, #272]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	4940      	ldr	r1, [pc, #256]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	493d      	ldr	r1, [pc, #244]	; (80024e4 <HAL_GPIO_DeInit+0x1f4>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <HAL_GPIO_DeInit+0x1d0>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	43da      	mvns	r2, r3
 8002414:	482a      	ldr	r0, [pc, #168]	; (80024c0 <HAL_GPIO_DeInit+0x1d0>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	400a      	ands	r2, r1
 800241c:	3302      	adds	r3, #2
 800241e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2103      	movs	r1, #3
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	08d2      	lsrs	r2, r2, #3
 8002458:	4019      	ands	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2103      	movs	r1, #3
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2103      	movs	r1, #3
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f af2e 	bls.w	800230c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40021c00 	.word	0x40021c00
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af02      	add	r7, sp, #8
 8002550:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e101      	b.n	8002760 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f008 f9d0 	bl	800a91c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258a:	d102      	bne.n	8002592 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fe2d 	bl	80071f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7c1a      	ldrb	r2, [r3, #16]
 80025a4:	f88d 2000 	strb.w	r2, [sp]
 80025a8:	3304      	adds	r3, #4
 80025aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ac:	f004 fd0c 	bl	8006fc8 <USB_CoreInit>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0ce      	b.n	8002760 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fe25 	bl	8007218 <USB_SetCurrentMode>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0bf      	b.n	8002760 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e04a      	b.n	800267c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3315      	adds	r3, #21
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3314      	adds	r3, #20
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	b298      	uxth	r0, r3
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	332e      	adds	r3, #46	; 0x2e
 8002622:	4602      	mov	r2, r0
 8002624:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3318      	adds	r3, #24
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	331c      	adds	r3, #28
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3320      	adds	r3, #32
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	3324      	adds	r3, #36	; 0x24
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	3301      	adds	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	791b      	ldrb	r3, [r3, #4]
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3af      	bcc.n	80025e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e044      	b.n	8002716 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	3301      	adds	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	429a      	cmp	r2, r3
 800271e:	d3b5      	bcc.n	800268c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7c1a      	ldrb	r2, [r3, #16]
 8002728:	f88d 2000 	strb.w	r2, [sp]
 800272c:	3304      	adds	r3, #4
 800272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002730:	f004 fdbe 	bl	80072b0 <USB_DevInit>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e00c      	b.n	8002760 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f005 fe02 	bl	8008362 <USB_DevDisconnect>

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_Start+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e022      	b.n	80027ca <HAL_PCD_Start+0x62>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 fd0f 	bl	80071d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fdb0 	bl	8008320 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027d2:	b590      	push	{r4, r7, lr}
 80027d4:	b08d      	sub	sp, #52	; 0x34
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 fe6e 	bl	80084ca <USB_GetMode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 848c 	bne.w	800310e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fdd2 	bl	80083a4 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8482 	beq.w	800310c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f005 fdbf 	bl	80083a4 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d107      	bne.n	8002840 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f002 0202 	and.w	r2, r2, #2
 800283e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f005 fdad 	bl	80083a4 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b10      	cmp	r3, #16
 8002852:	d161      	bne.n	8002918 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0210 	bic.w	r2, r2, #16
 8002862:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	0c5b      	lsrs	r3, r3, #17
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	2b02      	cmp	r3, #2
 800288e:	d124      	bne.n	80028da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d035      	beq.n	8002908 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6a38      	ldr	r0, [r7, #32]
 80028b0:	f005 fbe4 	bl	800807c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c0:	441a      	add	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d2:	441a      	add	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	e016      	b.n	8002908 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	0c5b      	lsrs	r3, r3, #17
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d110      	bne.n	8002908 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80028ec:	2208      	movs	r2, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	6a38      	ldr	r0, [r7, #32]
 80028f2:	f005 fbc3 	bl	800807c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002902:	441a      	add	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0210 	orr.w	r2, r2, #16
 8002916:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f005 fd41 	bl	80083a4 <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002928:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800292c:	f040 80a7 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f005 fd46 	bl	80083ca <USB_ReadDevAllOutEpInterrupt>
 800293e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002940:	e099      	b.n	8002a76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 808e 	beq.w	8002a6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f005 fd6a 	bl	8008432 <USB_ReadDevOutEPInterrupt>
 800295e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	461a      	mov	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fea2 	bl	80036c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299a:	461a      	mov	r2, r3
 800299c:	2308      	movs	r3, #8
 800299e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 ff78 	bl	8003898 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029be:	461a      	mov	r2, r3
 80029c0:	2310      	movs	r3, #16
 80029c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d030      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d109      	bne.n	80029ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f008 f885 	bl	800ab28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	2320      	movs	r3, #32
 8002a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f af62 	bne.w	8002942 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 fc8e 	bl	80083a4 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a92:	f040 80db 	bne.w	8002c4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 fcaf 	bl	80083fe <USB_ReadDevAllInEpInterrupt>
 8002aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002aa6:	e0cd      	b.n	8002c44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80c2 	beq.w	8002c38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 fcd5 	bl	800846e <USB_ReadDevInEPInterrupt>
 8002ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d057      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002af0:	4013      	ands	r3, r2
 8002af2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b00:	461a      	mov	r2, r3
 8002b02:	2301      	movs	r3, #1
 8002b04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	799b      	ldrb	r3, [r3, #6]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d132      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4403      	add	r3, r0
 8002b2e:	331c      	adds	r3, #28
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4419      	add	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4403      	add	r3, r0
 8002b42:	3320      	adds	r3, #32
 8002b44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x3a2>
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2101      	movs	r1, #1
 8002b70:	f005 fcdc 	bl	800852c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f007 ff4f 	bl	800aa1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b96:	461a      	mov	r2, r3
 8002b98:	2308      	movs	r3, #8
 8002b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2340      	movs	r3, #64	; 0x40
 8002bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d023      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002be0:	6a38      	ldr	r0, [r7, #32]
 8002be2:	f004 fcc9 	bl	8007578 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	78db      	ldrb	r3, [r3, #3]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f007 ff9c 	bl	800ab4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c20:	461a      	mov	r2, r3
 8002c22:	2302      	movs	r3, #2
 8002c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fcbb 	bl	80035ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f af2e 	bne.w	8002aa8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 fba7 	bl	80083a4 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c60:	d122      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fea2 	bl	80039d4 <HAL_PCDEx_LPM_Callback>
 8002c90:	e002      	b.n	8002c98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f007 ff3a 	bl	800ab0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f005 fb79 	bl	80083a4 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d112      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f007 fef6 	bl	800aac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 fb5b 	bl	80083a4 <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	f040 80b7 	bne.w	8002e6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2110      	movs	r1, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fc2e 	bl	8007578 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d20:	e046      	b.n	8002db0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d46:	0151      	lsls	r1, r2, #5
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	440a      	add	r2, r1
 8002d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d62:	461a      	mov	r2, r3
 8002d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7a:	0151      	lsls	r1, r2, #5
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	440a      	add	r2, r1
 8002d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002da8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	3301      	adds	r3, #1
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	791b      	ldrb	r3, [r3, #4]
 8002db4:	461a      	mov	r2, r3
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d3b2      	bcc.n	8002d22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7bdb      	ldrb	r3, [r3, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d016      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de8:	f043 030b 	orr.w	r3, r3, #11
 8002dec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f043 030b 	orr.w	r3, r3, #11
 8002e02:	6453      	str	r3, [r2, #68]	; 0x44
 8002e04:	e015      	b.n	8002e32 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e18:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2c:	f043 030b 	orr.w	r3, r3, #11
 8002e30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e54:	461a      	mov	r2, r3
 8002e56:	f005 fb69 	bl	800852c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 fa98 	bl	80083a4 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7e:	d123      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 fb2e 	bl	80084e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fbeb 	bl	800766a <USB_GetDevSpeed>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681c      	ldr	r4, [r3, #0]
 8002ea0:	f001 fa08 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4620      	mov	r0, r4
 8002eae:	f004 f8ef 	bl	8007090 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f007 fddb 	bl	800aa6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 fa69 	bl	80083a4 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d10a      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f007 fdb8 	bl	800aa52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 0208 	and.w	r2, r2, #8
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 fa54 	bl	80083a4 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d123      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e014      	b.n	8002f42 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb08 	bl	800354c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	3301      	adds	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	461a      	mov	r2, r3
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d3e4      	bcc.n	8002f18 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f005 fa26 	bl	80083a4 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f62:	d13c      	bne.n	8002fde <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	e02b      	b.n	8002fc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3318      	adds	r3, #24
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d115      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da12      	bge.n	8002fbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3317      	adds	r3, #23
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fac8 	bl	800354c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	791b      	ldrb	r3, [r3, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d3cd      	bcc.n	8002f6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 f9de 	bl	80083a4 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff2:	d156      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e045      	b.n	8003086 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d12e      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003022:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	da2b      	bge.n	8003080 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003034:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003038:	429a      	cmp	r2, r3
 800303a:	d121      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307c:	6053      	str	r3, [r2, #4]
            break;
 800307e:	e008      	b.n	8003092 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	3301      	adds	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	791b      	ldrb	r3, [r3, #4]
 800308a:	461a      	mov	r2, r3
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	4293      	cmp	r3, r2
 8003090:	d3b3      	bcc.n	8002ffa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f005 f97c 	bl	80083a4 <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d10a      	bne.n	80030ce <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f007 fd59 	bl	800ab70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f005 f966 	bl	80083a4 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d115      	bne.n	800310e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f007 fd49 	bl	800ab8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	e000      	b.n	800310e <HAL_PCD_IRQHandler+0x93c>
      return;
 800310c:	bf00      	nop
    }
  }
}
 800310e:	3734      	adds	r7, #52	; 0x34
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_SetAddress+0x1a>
 800312a:	2302      	movs	r3, #2
 800312c:	e012      	b.n	8003154 <HAL_PCD_SetAddress+0x40>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f005 f8c5 	bl	80082d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	70fb      	strb	r3, [r7, #3]
 800316e:	460b      	mov	r3, r1
 8003170:	803b      	strh	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317e:	2b00      	cmp	r3, #0
 8003180:	da0f      	bge.n	80031a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3310      	adds	r3, #16
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	705a      	strb	r2, [r3, #1]
 80031a0:	e00f      	b.n	80031c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	3304      	adds	r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031ce:	883a      	ldrh	r2, [r7, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	78ba      	ldrb	r2, [r7, #2]
 80031d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031ec:	78bb      	ldrb	r3, [r7, #2]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_PCD_EP_Open+0xaa>
 8003202:	2302      	movs	r3, #2
 8003204:	e00e      	b.n	8003224 <HAL_PCD_EP_Open+0xc8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fa4d 	bl	80076b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003222:	7afb      	ldrb	r3, [r7, #11]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0f      	bge.n	8003260 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
 800325e:	e00f      	b.n	8003280 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	3304      	adds	r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_Close+0x6e>
 8003296:	2302      	movs	r3, #2
 8003298:	e00e      	b.n	80032b8 <HAL_PCD_EP_Close+0x8c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 fa8b 	bl	80077c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	460b      	mov	r3, r1
 80032ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	799b      	ldrb	r3, [r3, #6]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	799b      	ldrb	r3, [r3, #6]
 8003324:	461a      	mov	r2, r3
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	f004 fb28 	bl	800797c <USB_EPStartXfer>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003358:	681b      	ldr	r3, [r3, #0]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	460b      	mov	r3, r1
 8003374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	3310      	adds	r3, #16
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	3304      	adds	r3, #4
 800338c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a6:	7afb      	ldrb	r3, [r7, #11]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	799b      	ldrb	r3, [r3, #6]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	799b      	ldrb	r3, [r3, #6]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	f004 fad6 	bl	800797c <USB_EPStartXfer>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	7912      	ldrb	r2, [r2, #4]
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04f      	b.n	8003498 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0f      	bge.n	8003420 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3310      	adds	r3, #16
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	705a      	strb	r2, [r3, #1]
 800341e:	e00d      	b.n	800343c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_PCD_EP_SetStall+0x82>
 8003458:	2302      	movs	r3, #2
 800345a:	e01d      	b.n	8003498 <HAL_PCD_EP_SetStall+0xbe>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fe5e 	bl	800812c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7999      	ldrb	r1, [r3, #6]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003488:	461a      	mov	r2, r3
 800348a:	f005 f84f 	bl	800852c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	7912      	ldrb	r2, [r2, #4]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e042      	b.n	8003544 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da0f      	bge.n	80034e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3310      	adds	r3, #16
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	705a      	strb	r2, [r3, #1]
 80034e4:	e00f      	b.n	8003506 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	3304      	adds	r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_PCD_EP_ClrStall+0x86>
 8003522:	2302      	movs	r3, #2
 8003524:	e00e      	b.n	8003544 <HAL_PCD_EP_ClrStall+0xa4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	4618      	mov	r0, r3
 8003536:	f004 fe67 	bl	8008208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355c:	2b00      	cmp	r3, #0
 800355e:	da0c      	bge.n	800357a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3310      	adds	r3, #16
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e00c      	b.n	8003594 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 020f 	and.w	r2, r3, #15
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fc86 	bl	8007eac <USB_EPStopXfer>
 80035a0:	4603      	mov	r3, r0
 80035a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035a4:	7afb      	ldrb	r3, [r7, #11]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b08a      	sub	sp, #40	; 0x28
 80035b2:	af02      	add	r7, sp, #8
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	3310      	adds	r3, #16
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d901      	bls.n	80035e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d902      	bls.n	8003602 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3303      	adds	r3, #3
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800360a:	e02a      	b.n	8003662 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	429a      	cmp	r2, r3
 8003620:	d902      	bls.n	8003628 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3303      	adds	r3, #3
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68d9      	ldr	r1, [r3, #12]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4603      	mov	r3, r0
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f004 fcdb 	bl	8008000 <USB_WritePacket>

    ep->xfer_buff  += len;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	d809      	bhi.n	800368c <PCD_WriteEmptyTxFifo+0xde>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003680:	429a      	cmp	r2, r3
 8003682:	d203      	bcs.n	800368c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1bf      	bne.n	800360c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d811      	bhi.n	80036bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	2201      	movs	r2, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b8:	4013      	ands	r3, r2
 80036ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	333c      	adds	r3, #60	; 0x3c
 80036e0:	3304      	adds	r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	799b      	ldrb	r3, [r3, #6]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d17b      	bne.n	80037f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	4a61      	ldr	r2, [pc, #388]	; (8003890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	f240 80b9 	bls.w	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80b3 	beq.w	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003730:	6093      	str	r3, [r2, #8]
 8003732:	e0a7      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	2320      	movs	r3, #32
 800374e:	6093      	str	r3, [r2, #8]
 8003750:	e098      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 8093 	bne.w	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d90f      	bls.n	8003786 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	6093      	str	r3, [r2, #8]
 8003784:	e07e      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	3304      	adds	r3, #4
 800379a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d114      	bne.n	80037e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80037d0:	461a      	mov	r2, r3
 80037d2:	2101      	movs	r1, #1
 80037d4:	f004 feaa 	bl	800852c <USB_EP0_OutStart>
 80037d8:	e006      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f007 f8fa 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
 80037f4:	e046      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d124      	bne.n	8003848 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	e032      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	2320      	movs	r3, #32
 8003838:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	4619      	mov	r1, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f007 f8d1 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
 8003846:	e01d      	b.n	8003884 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d114      	bne.n	8003878 <PCD_EP_OutXfrComplete_int+0x1b0>
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003870:	461a      	mov	r2, r3
 8003872:	2100      	movs	r1, #0
 8003874:	f004 fe5a 	bl	800852c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f007 f8b2 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	4f54300a 	.word	0x4f54300a
 8003894:	4f54310a 	.word	0x4f54310a

08003898 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	333c      	adds	r3, #60	; 0x3c
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d90e      	bls.n	80038ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e4:	461a      	mov	r2, r3
 80038e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f007 f869 	bl	800a9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <PCD_EP_OutSetupPacket_int+0x88>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d90c      	bls.n	8003914 <PCD_EP_OutSetupPacket_int+0x7c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	799b      	ldrb	r3, [r3, #6]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800390c:	461a      	mov	r2, r3
 800390e:	2101      	movs	r1, #1
 8003910:	f004 fe0c 	bl	800852c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	4f54300a 	.word	0x4f54300a

08003924 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
 8003930:	4613      	mov	r3, r2
 8003932:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003942:	883b      	ldrh	r3, [r7, #0]
 8003944:	0419      	lsls	r1, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	430a      	orrs	r2, r1
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
 8003950:	e028      	b.n	80039a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4413      	add	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e00d      	b.n	8003982 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	3340      	adds	r3, #64	; 0x40
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	3301      	adds	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	3b01      	subs	r3, #1
 8003988:	429a      	cmp	r2, r3
 800398a:	d3ec      	bcc.n	8003966 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800398c:	883b      	ldrh	r3, [r7, #0]
 800398e:	0418      	lsls	r0, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	3b01      	subs	r3, #1
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4302      	orrs	r2, r0
 800399c:	3340      	adds	r3, #64	; 0x40
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e267      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0a:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b85      	ldr	r3, [pc, #532]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b7e      	ldr	r3, [pc, #504]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e242      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a75      	ldr	r2, [pc, #468]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6f      	ldr	r2, [pc, #444]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6c      	ldr	r2, [pc, #432]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b69      	ldr	r3, [pc, #420]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a65      	ldr	r2, [pc, #404]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f882 	bl	8001bac <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe f87e 	bl	8001bac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e207      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f86e 	bl	8001bac <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe f86a 	bl	8001bac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f3      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b02:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b44      	ldr	r3, [pc, #272]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c7      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4937      	ldr	r1, [pc, #220]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe f823 	bl	8001bac <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe f81f 	bl	8001bac <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a8      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4925      	ldr	r1, [pc, #148]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f802 	bl	8001bac <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fd fffe 	bl	8001bac <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e187      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d036      	beq.n	8003c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd ffe2 	bl	8001bac <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fd ffde 	bl	8001bac <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e167      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fd ffcb 	bl	8001bac <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e00e      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fd ffc7 	bl	8001bac <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d907      	bls.n	8003c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e150      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470000 	.word	0x42470000
 8003c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ea      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8097 	beq.w	8003d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b7d      	ldr	r3, [pc, #500]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b7a      	ldr	r3, [pc, #488]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b77      	ldr	r3, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	; (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd ff87 	bl	8001bac <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fd ff83 	bl	8001bac <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e10c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2ea>
 8003cc8:	4b64      	ldr	r3, [pc, #400]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	4a63      	ldr	r2, [pc, #396]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x30c>
 8003cde:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a5e      	ldr	r2, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a5b      	ldr	r2, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cf8:	4b58      	ldr	r3, [pc, #352]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	; 0x70
 8003d04:	4b55      	ldr	r3, [pc, #340]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd ff48 	bl	8001bac <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd ff44 	bl	8001bac <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0cb      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ee      	beq.n	8003d20 <HAL_RCC_OscConfig+0x334>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7fd ff32 	bl	8001bac <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd ff2e 	bl	8001bac <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0b5      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ee      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a1 	beq.w	8003ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d8a:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d05c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d141      	bne.n	8003e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd ff02 	bl	8001bac <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd fefe 	bl	8001bac <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e087      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fed7 	bl	8001bac <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd fed3 	bl	8001bac <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e05c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x416>
 8003e20:	e054      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd fec0 	bl	8001bac <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd febc 	bl	8001bac <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e045      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x444>
 8003e4e:	e03d      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e038      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d121      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fdee 	bl	8001bac <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fd fdea 	bl	8001bac <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fd4e 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	0800e44c 	.word	0x0800e44c
 80040a0:	20000030 	.word	0x20000030
 80040a4:	20000034 	.word	0x20000034

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b094      	sub	sp, #80	; 0x50
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	647b      	str	r3, [r7, #68]	; 0x44
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	2300      	movs	r3, #0
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80e1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0db      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040e0:	e0db      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b73      	ldr	r3, [pc, #460]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e6:	e0d8      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
 8004108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4621      	mov	r1, r4
 8004134:	1a51      	subs	r1, r2, r1
 8004136:	6139      	str	r1, [r7, #16]
 8004138:	4629      	mov	r1, r5
 800413a:	eb63 0301 	sbc.w	r3, r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	018b      	lsls	r3, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004156:	4651      	mov	r1, sl
 8004158:	018a      	lsls	r2, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ebb2 0801 	subs.w	r8, r2, r1
 8004160:	4659      	mov	r1, fp
 8004162:	eb63 0901 	sbc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	462b      	mov	r3, r5
 8004188:	eb49 0303 	adc.w	r3, r9, r3
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800419a:	4629      	mov	r1, r5
 800419c:	024b      	lsls	r3, r1, #9
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a4:	4621      	mov	r1, r4
 80041a6:	024a      	lsls	r2, r1, #9
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b8:	f7fc f85a 	bl	8000270 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	e058      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4611      	mov	r1, r2
 80041d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0159      	lsls	r1, r3, #5
 80041ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f2:	0150      	lsls	r0, r2, #5
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4641      	mov	r1, r8
 80041fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb63 0b01 	sbc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004218:	ebb2 040a 	subs.w	r4, r2, sl
 800421c:	eb63 050b 	sbc.w	r5, r3, fp
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	464b      	mov	r3, r9
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	61fa      	str	r2, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	f7fc f800 	bl	8000270 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800429c:	4618      	mov	r0, r3
 800429e:	3750      	adds	r7, #80	; 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000030 	.word	0x20000030

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800e45c 	.word	0x0800e45c

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	0800e45c 	.word	0x0800e45c

0800431c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004340:	2b00      	cmp	r3, #0
 8004342:	d035      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004344:	4b62      	ldr	r3, [pc, #392]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800434a:	f7fd fc2f 	bl	8001bac <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004352:	f7fd fc2b 	bl	8001bac <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e0b0      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004364:	4b5b      	ldr	r3, [pc, #364]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	019a      	lsls	r2, r3, #6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	071b      	lsls	r3, r3, #28
 800437c:	4955      	ldr	r1, [pc, #340]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004384:	4b52      	ldr	r3, [pc, #328]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800438a:	f7fd fc0f 	bl	8001bac <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004392:	f7fd fc0b 	bl	8001bac <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e090      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8083 	beq.w	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b44      	ldr	r3, [pc, #272]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a43      	ldr	r2, [pc, #268]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3e      	ldr	r2, [pc, #248]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fbe1 	bl	8001bac <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ee:	f7fd fbdd 	bl	8001bac <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e062      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004400:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800440c:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02f      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d028      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004440:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d114      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd fbab 	bl	8001bac <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd fba7 	bl	8001bac <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e02a      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ee      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d10d      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	490d      	ldr	r1, [pc, #52]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
 80044a4:	e005      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044b0:	6093      	str	r3, [r2, #8]
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044be:	4905      	ldr	r1, [pc, #20]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	42470068 	.word	0x42470068
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000
 80044dc:	42470e40 	.word	0x42470e40

080044e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e073      	b.n	80045de <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7f5b      	ldrb	r3, [r3, #29]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc ff64 	bl	80013d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d055      	beq.n	80045cc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	22ca      	movs	r2, #202	; 0xca
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2253      	movs	r2, #83	; 0x53
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8dd 	bl	80046f0 <RTC_EnterInitMode>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12c      	bne.n	800459a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	041a      	lsls	r2, r3, #16
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8e4 	bl	800475e <RTC_ExitInitMode>
 8004596:	4603      	mov	r3, r0
 8004598:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	22ff      	movs	r2, #255	; 0xff
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24
 80045ca:	e001      	b.n	80045d0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004618:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800461c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0d9b      	lsrs	r3, r3, #22
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11a      	bne.n	8004698 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f89e 	bl	80047a8 <RTC_Bcd2ToByte>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f895 	bl	80047a8 <RTC_Bcd2ToByte>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f88c 	bl	80047a8 <RTC_Bcd2ToByte>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <HAL_RTC_WaitForSynchro+0x48>)
 80046b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046b8:	f7fd fa78 	bl	8001bac <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046c0:	f7fd fa74 	bl	8001bac <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ce:	d901      	bls.n	80046d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e007      	b.n	80046e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ee      	beq.n	80046c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00017f5f 	.word	0x00017f5f

080046f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d122      	bne.n	8004754 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800471c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fd fa45 	bl	8001bac <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004724:	e00c      	b.n	8004740 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004726:	f7fd fa41 	bl	8001bac <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004734:	d904      	bls.n	8004740 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <RTC_EnterInitMode+0x64>
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d1e8      	bne.n	8004726 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004778:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff8b 	bl	80046a4 <HAL_RTC_WaitForSynchro>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2204      	movs	r2, #4
 8004798:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	b2db      	uxtb	r3, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_SD_IRQHandler+0x2e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa4e 	bl	8004cac <SD_Read_IT>
 8004810:	e165      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 808f 	beq.w	8004940 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800483a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800483e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d039      	beq.n	80048ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_SD_IRQHandler+0x8a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f002 fa76 	bl	8006d64 <SDMMC_CmdStopTransfer>
 8004878:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f943 	bl	8004b18 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f240 523a 	movw	r2, #1338	; 0x53a
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_SD_IRQHandler+0xda>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f920 	bl	8004b04 <HAL_SD_RxCpltCallback>
 80048c4:	e10b      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f912 	bl	8004af0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048cc:	e107      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8102 	beq.w	8004ade <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f002 fa3b 	bl	8006d64 <SDMMC_CmdStopTransfer>
 80048ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f908 	bl	8004b18 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 80e5 	bne.w	8004ade <HAL_SD_IRQHandler+0x2fa>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 80df 	bne.w	8004ade <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0208 	bic.w	r2, r2, #8
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8d9 	bl	8004af0 <HAL_SD_TxCpltCallback>
}
 800493e:	e0ce      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_SD_IRQHandler+0x17c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9f8 	bl	8004d4e <SD_Write_IT>
 800495e:	e0be      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004966:	f240 233a 	movw	r3, #570	; 0x23a
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80b6 	beq.w	8004ade <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f043 0202 	orr.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	f043 0208 	orr.w	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f240 723a 	movw	r2, #1850	; 0x73a
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004a0c:	f023 0302 	bic.w	r3, r3, #2
 8004a10:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f002 f9a4 	bl	8006d64 <SDMMC_CmdStopTransfer>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f869 	bl	8004b18 <HAL_SD_ErrorCallback>
}
 8004a46:	e04a      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d045      	beq.n	8004ade <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_SD_IRQHandler+0x282>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d011      	beq.n	8004a8a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_SD_IRQHandler+0x304>)
 8004a6c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fa7d 	bl	8001f72 <HAL_DMA_Abort_IT>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02f      	beq.n	8004ade <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f87c 	bl	8004b80 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a88:	e029      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_SD_IRQHandler+0x2ba>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <HAL_SD_IRQHandler+0x308>)
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fa61 	bl	8001f72 <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d013      	beq.n	8004ade <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f897 	bl	8004bee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ac0:	e00d      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f828 	bl	8004b2c <HAL_SD_AbortCallback>
}
 8004adc:	e7ff      	b.n	8004ade <HAL_SD_IRQHandler+0x2fa>
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08004b81 	.word	0x08004b81
 8004aec:	08004bef 	.word	0x08004bef

08004af0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004b4c:	f107 030c 	add.w	r3, r7, #12
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f882 	bl	8004c5c <SD_SendStatus>
 8004b58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0a5b      	lsrs	r3, r3, #9
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004b76:	693b      	ldr	r3, [r7, #16]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff ffd1 	bl	8004b40 <HAL_SD_GetCardState>
 8004b9e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d002      	beq.n	8004bba <SD_DMATxAbort+0x3a>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d10a      	bne.n	8004bd0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f002 f8d0 	bl	8006d64 <SDMMC_CmdStopTransfer>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff ffa7 	bl	8004b2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bde:	e002      	b.n	8004be6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff ff99 	bl	8004b18 <HAL_SD_ErrorCallback>
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff ff9a 	bl	8004b40 <HAL_SD_GetCardState>
 8004c0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d002      	beq.n	8004c28 <SD_DMARxAbort+0x3a>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d10a      	bne.n	8004c3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 f899 	bl	8006d64 <SDMMC_CmdStopTransfer>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff70 	bl	8004b2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c4c:	e002      	b.n	8004c54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ff62 	bl	8004b18 <HAL_SD_ErrorCallback>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c70:	e018      	b.n	8004ca4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f002 f892 	bl	8006da8 <SDMMC_CmdSendStatus>
 8004c84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	e009      	b.n	8004ca4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f002 f851 	bl	8006d3e <SDIO_GetResponse>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03f      	beq.n	8004d46 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e033      	b.n	8004d34 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 ffdf 	bl	8006c94 <SDIO_ReadFIFO>
 8004cd6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0e1b      	lsrs	r3, r3, #24
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3301      	adds	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	d9c8      	bls.n	8004ccc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d043      	beq.n	8004df0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e037      	b.n	8004dde <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	021a      	lsls	r2, r3, #8
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	041a      	lsls	r2, r3, #16
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	061a      	lsls	r2, r3, #24
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f107 0208 	add.w	r2, r7, #8
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 ff6b 	bl	8006cae <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	d9c4      	bls.n	8004d6e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07b      	b.n	8004f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fb58 	bl	8001500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	ea42 0103 	orr.w	r1, r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0104 	and.w	r1, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0210 	and.w	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e01a      	b.n	8004f52 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc fb6f 	bl	8001618 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b088      	sub	sp, #32
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_SPI_Transmit+0x22>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e12d      	b.n	80051d8 <HAL_SPI_Transmit+0x27e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f84:	f7fc fe12 	bl	8001bac <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d002      	beq.n	8004fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f9e:	e116      	b.n	80051ce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0x52>
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fb0:	e10d      	b.n	80051ce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d10f      	bne.n	800501a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d007      	beq.n	8005038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005040:	d14f      	bne.n	80050e2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_SPI_Transmit+0xf6>
 800504a:	8afb      	ldrh	r3, [r7, #22]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d142      	bne.n	80050d6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	881a      	ldrh	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	1c9a      	adds	r2, r3, #2
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005074:	e02f      	b.n	80050d6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d112      	bne.n	80050aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	881a      	ldrh	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	1c9a      	adds	r2, r3, #2
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80050a8:	e015      	b.n	80050d6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050aa:	f7fc fd7f 	bl	8001bac <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d803      	bhi.n	80050c2 <HAL_SPI_Transmit+0x168>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d102      	bne.n	80050c8 <HAL_SPI_Transmit+0x16e>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80050d4:	e07b      	b.n	80051ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ca      	bne.n	8005076 <HAL_SPI_Transmit+0x11c>
 80050e0:	e050      	b.n	8005184 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Transmit+0x196>
 80050ea:	8afb      	ldrh	r3, [r7, #22]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d144      	bne.n	800517a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005116:	e030      	b.n	800517a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d113      	bne.n	800514e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	7812      	ldrb	r2, [r2, #0]
 8005132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	86da      	strh	r2, [r3, #54]	; 0x36
 800514c:	e015      	b.n	800517a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514e:	f7fc fd2d 	bl	8001bac <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d803      	bhi.n	8005166 <HAL_SPI_Transmit+0x20c>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d102      	bne.n	800516c <HAL_SPI_Transmit+0x212>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005178:	e029      	b.n	80051ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1c9      	bne.n	8005118 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fcf1 	bl	8005b70 <SPI_EndRxTxTransaction>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e003      	b.n	80051ce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005200:	2302      	movs	r3, #2
 8005202:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005204:	e0fb      	b.n	80053fe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520e:	d112      	bne.n	8005236 <HAL_SPI_Receive+0x56>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10e      	bne.n	8005236 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2204      	movs	r2, #4
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f8ef 	bl	8005410 <HAL_SPI_TransmitReceive>
 8005232:	4603      	mov	r3, r0
 8005234:	e0e8      	b.n	8005408 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_SPI_Receive+0x64>
 8005240:	2302      	movs	r3, #2
 8005242:	e0e1      	b.n	8005408 <HAL_SPI_Receive+0x228>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524c:	f7fc fcae 	bl	8001bac <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Receive+0x7e>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005262:	e0cc      	b.n	80053fe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2204      	movs	r2, #4
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d10f      	bne.n	80052cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d16a      	bne.n	80053c8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052f2:	e032      	b.n	800535a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d115      	bne.n	800532e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f103 020c 	add.w	r2, r3, #12
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532c:	e015      	b.n	800535a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532e:	f7fc fc3d 	bl	8001bac <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d803      	bhi.n	8005346 <HAL_SPI_Receive+0x166>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d102      	bne.n	800534c <HAL_SPI_Receive+0x16c>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005358:	e051      	b.n	80053fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1c7      	bne.n	80052f4 <HAL_SPI_Receive+0x114>
 8005364:	e035      	b.n	80053d2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d113      	bne.n	800539c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	b292      	uxth	r2, r2
 8005380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800539a:	e015      	b.n	80053c8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539c:	f7fc fc06 	bl	8001bac <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d803      	bhi.n	80053b4 <HAL_SPI_Receive+0x1d4>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d102      	bne.n	80053ba <HAL_SPI_Receive+0x1da>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80053c6:	e01a      	b.n	80053fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1c9      	bne.n	8005366 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fb64 	bl	8005aa4 <SPI_EndRxTransaction>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
 80053f4:	e003      	b.n	80053fe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	; 0x30
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800541e:	2301      	movs	r3, #1
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x26>
 8005432:	2302      	movs	r3, #2
 8005434:	e198      	b.n	8005768 <HAL_SPI_TransmitReceive+0x358>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800543e:	f7fc fbb5 	bl	8001bac <HAL_GetTick>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800545c:	2b01      	cmp	r3, #1
 800545e:	d00f      	beq.n	8005480 <HAL_SPI_TransmitReceive+0x70>
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005466:	d107      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x68>
 8005470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005474:	2b04      	cmp	r3, #4
 8005476:	d003      	beq.n	8005480 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005478:	2302      	movs	r3, #2
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800547e:	e16d      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_SPI_TransmitReceive+0x82>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_SPI_TransmitReceive+0x82>
 800548c:	887b      	ldrh	r3, [r7, #2]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005498:	e160      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d003      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2205      	movs	r2, #5
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	887a      	ldrh	r2, [r7, #2]
 80054be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	887a      	ldrh	r2, [r7, #2]
 80054c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d007      	beq.n	8005502 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550a:	d17c      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_SPI_TransmitReceive+0x10a>
 8005514:	8b7b      	ldrh	r3, [r7, #26]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d16a      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	881a      	ldrh	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800553e:	e057      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d11b      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x176>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x176>
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d113      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	881a      	ldrh	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	1c9a      	adds	r2, r3, #2
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d119      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d014      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	b292      	uxth	r2, r2
 80055aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055c8:	f7fc faf0 	bl	8001bac <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d80b      	bhi.n	80055f0 <HAL_SPI_TransmitReceive+0x1e0>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d007      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80055ee:	e0b5      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1a2      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x130>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d19d      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x130>
 8005604:	e080      	b.n	8005708 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x204>
 800560e:	8b7b      	ldrh	r3, [r7, #26]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d16f      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563a:	e05b      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d11c      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x274>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x274>
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d114      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d119      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x2b6>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d014      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c2:	2301      	movs	r3, #1
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056c6:	f7fc fa71 	bl	8001bac <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d803      	bhi.n	80056de <HAL_SPI_TransmitReceive+0x2ce>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x2d4>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d107      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80056f2:	e033      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d19e      	bne.n	800563c <HAL_SPI_TransmitReceive+0x22c>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d199      	bne.n	800563c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa2f 	bl	8005b70 <SPI_EndRxTxTransaction>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d006      	beq.n	8005726 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005724:	e01a      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005752:	e003      	b.n	800575c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005768:	4618      	mov	r0, r3
 800576a:	3730      	adds	r7, #48	; 0x30
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10e      	bne.n	80057b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
    return;
 80057ae:	e0ce      	b.n	800594e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_SPI_IRQHandler+0x5e>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
    return;
 80057cc:	e0bf      	b.n	800594e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_SPI_IRQHandler+0x7e>
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80b0 	beq.w	800594e <HAL_SPI_IRQHandler+0x1de>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80aa 	beq.w	800594e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d023      	beq.n	800584c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b03      	cmp	r3, #3
 800580e:	d011      	beq.n	8005834 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	e00b      	b.n	800584c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005834:	2300      	movs	r3, #0
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
        return;
 800584a:	e080      	b.n	800594e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d014      	beq.n	8005880 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d04f      	beq.n	800594c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_SPI_IRQHandler+0x168>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d034      	beq.n	8005942 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0203 	bic.w	r2, r2, #3
 80058e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d011      	beq.n	8005914 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <HAL_SPI_IRQHandler+0x1e4>)
 80058f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fc fb38 	bl	8001f72 <HAL_DMA_Abort_IT>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <HAL_SPI_IRQHandler+0x1e4>)
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005928:	4618      	mov	r0, r3
 800592a:	f7fc fb22 	bl	8001f72 <HAL_DMA_Abort_IT>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005940:	e003      	b.n	800594a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f808 	bl	8005958 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005948:	e000      	b.n	800594c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800594a:	bf00      	nop
    return;
 800594c:	bf00      	nop
  }
}
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	0800596d 	.word	0x0800596d

08005958 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ffe6 	bl	8005958 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059a4:	f7fc f902 	bl	8001bac <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059b4:	f7fc f8fa 	bl	8001bac <HAL_GetTick>
 80059b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	015b      	lsls	r3, r3, #5
 80059c0:	0d1b      	lsrs	r3, r3, #20
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ca:	e054      	b.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d050      	beq.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059d4:	f7fc f8ea 	bl	8001bac <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d902      	bls.n	80059ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d13d      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a02:	d111      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0c:	d004      	beq.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a16:	d107      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a30:	d10f      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e017      	b.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d19b      	bne.n	80059cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000030 	.word	0x20000030

08005aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab8:	d111      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d004      	beq.n	8005ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005acc:	d107      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae6:	d12a      	bne.n	8005b3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af0:	d012      	beq.n	8005b18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff ff49 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02d      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e026      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2101      	movs	r1, #1
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff ff36 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01a      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e013      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2101      	movs	r1, #1
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff ff23 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e000      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2201      	movs	r2, #1
 8005b84:	2102      	movs	r1, #2
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff04 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e032      	b.n	8005c08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <SPI_EndRxTxTransaction+0xa0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <SPI_EndRxTxTransaction+0xa4>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0d5b      	lsrs	r3, r3, #21
 8005bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc0:	d112      	bne.n	8005be8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fee1 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d016      	beq.n	8005c06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e00f      	b.n	8005c08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d0f2      	beq.n	8005be8 <SPI_EndRxTxTransaction+0x78>
 8005c02:	e000      	b.n	8005c06 <SPI_EndRxTxTransaction+0x96>
        break;
 8005c04:	bf00      	nop
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000030 	.word	0x20000030
 8005c14:	165e9f81 	.word	0x165e9f81

08005c18 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e038      	b.n	8005ca0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7fa fd4e 	bl	80006e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f000 ff46 	bl	8006ae4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	f000 ffa8 	bl	8006bb8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6858      	ldr	r0, [r3, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	f000 ffd5 	bl	8006c24 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	6892      	ldr	r2, [r2, #8]
 8005c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6892      	ldr	r2, [r2, #8]
 8005c8e:	f041 0101 	orr.w	r1, r1, #1
 8005c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e042      	b.n	8005d40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fe8c 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2224      	movs	r2, #36	; 0x24
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc85 	bl	80065fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b0ba      	sub	sp, #232	; 0xe8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10f      	bne.n	8005dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fb69 	bl	800647e <UART_Receive_IT>
      return;
 8005dac:	e25b      	b.n	8006266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80de 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
 8005db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80d1 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	f043 0204 	orr.w	r2, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 81f2 	beq.w	800625c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 faf4 	bl	800647e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x17a>
 8005eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04f      	beq.n	8005f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9fc 	bl	80062c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d141      	bne.n	8005f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1d9      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d013      	beq.n	8005f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	4a7e      	ldr	r2, [pc, #504]	; (8006128 <HAL_UART_IRQHandler+0x3e0>)
 8005f30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc f81b 	bl	8001f72 <HAL_DMA_Abort_IT>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e00e      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f99e 	bl	8006294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00a      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f99a 	bl	8006294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e006      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f996 	bl	8006294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f6e:	e175      	b.n	800625c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	bf00      	nop
    return;
 8005f72:	e173      	b.n	800625c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 814f 	bne.w	800621c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8148 	beq.w	800621c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8141 	beq.w	800621c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	f040 80b6 	bne.w	800612c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8145 	beq.w	8006260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f080 813e 	bcs.w	8006260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	f000 8088 	beq.w	800610a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1d9      	bne.n	8005ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800606a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e1      	bne.n	8006046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e3      	bne.n	80060c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	4618      	mov	r0, r3
 8006106:	f7fb fec4 	bl	8001e92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006118:	b29b      	uxth	r3, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8c1 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006126:	e09b      	b.n	8006260 <HAL_UART_IRQHandler+0x518>
 8006128:	08006387 	.word	0x08006387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 808e 	beq.w	8006264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8089 	beq.w	8006264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006176:	647a      	str	r2, [r7, #68]	; 0x44
 8006178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800617c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e3      	bne.n	8006152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	623b      	str	r3, [r7, #32]
   return(result);
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3314      	adds	r3, #20
 80061aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061ae:	633a      	str	r2, [r7, #48]	; 0x30
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e3      	bne.n	800618a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	69b9      	ldr	r1, [r7, #24]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	617b      	str	r3, [r7, #20]
   return(result);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e3      	bne.n	80061d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800620e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f847 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800621a:	e023      	b.n	8006264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800621c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_UART_IRQHandler+0x4f4>
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f8ba 	bl	80063ae <UART_Transmit_IT>
    return;
 800623a:	e014      	b.n	8006266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <HAL_UART_IRQHandler+0x51e>
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8fa 	bl	800644e <UART_EndTransmit_IT>
    return;
 800625a:	e004      	b.n	8006266 <HAL_UART_IRQHandler+0x51e>
    return;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <HAL_UART_IRQHandler+0x51e>
      return;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HAL_UART_IRQHandler+0x51e>
      return;
 8006264:	bf00      	nop
  }
}
 8006266:	37e8      	adds	r7, #232	; 0xe8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b095      	sub	sp, #84	; 0x54
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062e8:	643a      	str	r2, [r7, #64]	; 0x40
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3314      	adds	r3, #20
 8006302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	61fb      	str	r3, [r7, #28]
   return(result);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3314      	adds	r3, #20
 800631a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800631c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e5      	bne.n	80062fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	2b01      	cmp	r3, #1
 8006336:	d119      	bne.n	800636c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	60bb      	str	r3, [r7, #8]
   return(result);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0310 	bic.w	r3, r3, #16
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006358:	61ba      	str	r2, [r7, #24]
 800635a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	613b      	str	r3, [r7, #16]
   return(result);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800637a:	bf00      	nop
 800637c:	3754      	adds	r7, #84	; 0x54
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ff77 	bl	8006294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b21      	cmp	r3, #33	; 0x21
 80063c0:	d13e      	bne.n	8006440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d114      	bne.n	80063f6 <UART_Transmit_IT+0x48>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	1c9a      	adds	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	621a      	str	r2, [r3, #32]
 80063f4:	e008      	b.n	8006408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6211      	str	r1, [r2, #32]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4619      	mov	r1, r3
 8006416:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10f      	bne.n	800643c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fefc 	bl	800626c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08c      	sub	sp, #48	; 0x30
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b22      	cmp	r3, #34	; 0x22
 8006490:	f040 80ae 	bne.w	80065f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649c:	d117      	bne.n	80064ce <UART_Receive_IT+0x50>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d113      	bne.n	80064ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	b29a      	uxth	r2, r3
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
 80064cc:	e026      	b.n	800651c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e0:	d007      	beq.n	80064f2 <UART_Receive_IT+0x74>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <UART_Receive_IT+0x82>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e008      	b.n	8006512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4619      	mov	r1, r3
 800652a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800652c:	2b00      	cmp	r3, #0
 800652e:	d15d      	bne.n	80065ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0220 	bic.w	r2, r2, #32
 800653e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800654e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	2b01      	cmp	r3, #1
 8006574:	d135      	bne.n	80065e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	613b      	str	r3, [r7, #16]
   return(result);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659c:	623a      	str	r2, [r7, #32]
 800659e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69f9      	ldr	r1, [r7, #28]
 80065a2:	6a3a      	ldr	r2, [r7, #32]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d10a      	bne.n	80065d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fe64 	bl	80062a8 <HAL_UARTEx_RxEventCallback>
 80065e0:	e002      	b.n	80065e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fe4c 	bl	8006280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e002      	b.n	80065f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e000      	b.n	80065f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b0c0      	sub	sp, #256	; 0x100
 8006602:	af00      	add	r7, sp, #0
 8006604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	68d9      	ldr	r1, [r3, #12]
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	ea40 0301 	orr.w	r3, r0, r1
 8006624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	431a      	orrs	r2, r3
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006654:	f021 010c 	bic.w	r1, r1, #12
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006662:	430b      	orrs	r3, r1
 8006664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006676:	6999      	ldr	r1, [r3, #24]
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	ea40 0301 	orr.w	r3, r0, r1
 8006682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <UART_SetConfig+0x2cc>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d005      	beq.n	800669c <UART_SetConfig+0xa0>
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b8d      	ldr	r3, [pc, #564]	; (80068cc <UART_SetConfig+0x2d0>)
 8006698:	429a      	cmp	r2, r3
 800669a:	d104      	bne.n	80066a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fd fe2a 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 80066a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066a4:	e003      	b.n	80066ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066a6:	f7fd fe11 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 80066aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	f040 810c 	bne.w	80068d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	1891      	adds	r1, r2, r2
 80066d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80066d6:	415b      	adcs	r3, r3
 80066d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066de:	4621      	mov	r1, r4
 80066e0:	eb12 0801 	adds.w	r8, r2, r1
 80066e4:	4629      	mov	r1, r5
 80066e6:	eb43 0901 	adc.w	r9, r3, r1
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fe:	4690      	mov	r8, r2
 8006700:	4699      	mov	r9, r3
 8006702:	4623      	mov	r3, r4
 8006704:	eb18 0303 	adds.w	r3, r8, r3
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800670c:	462b      	mov	r3, r5
 800670e:	eb49 0303 	adc.w	r3, r9, r3
 8006712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800672a:	460b      	mov	r3, r1
 800672c:	18db      	adds	r3, r3, r3
 800672e:	653b      	str	r3, [r7, #80]	; 0x50
 8006730:	4613      	mov	r3, r2
 8006732:	eb42 0303 	adc.w	r3, r2, r3
 8006736:	657b      	str	r3, [r7, #84]	; 0x54
 8006738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800673c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006740:	f7f9 fd96 	bl	8000270 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2302 	umull	r2, r3, r3, r2
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	011c      	lsls	r4, r3, #4
 8006752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800675c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	1891      	adds	r1, r2, r2
 800676a:	64b9      	str	r1, [r7, #72]	; 0x48
 800676c:	415b      	adcs	r3, r3
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006774:	4641      	mov	r1, r8
 8006776:	eb12 0a01 	adds.w	sl, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb43 0b01 	adc.w	fp, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800678c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006794:	4692      	mov	sl, r2
 8006796:	469b      	mov	fp, r3
 8006798:	4643      	mov	r3, r8
 800679a:	eb1a 0303 	adds.w	r3, sl, r3
 800679e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a2:	464b      	mov	r3, r9
 80067a4:	eb4b 0303 	adc.w	r3, fp, r3
 80067a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c0:	460b      	mov	r3, r1
 80067c2:	18db      	adds	r3, r3, r3
 80067c4:	643b      	str	r3, [r7, #64]	; 0x40
 80067c6:	4613      	mov	r3, r2
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	647b      	str	r3, [r7, #68]	; 0x44
 80067ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067d6:	f7f9 fd4b 	bl	8000270 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	4b3b      	ldr	r3, [pc, #236]	; (80068d0 <UART_SetConfig+0x2d4>)
 80067e2:	fba3 2301 	umull	r2, r3, r3, r1
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2264      	movs	r2, #100	; 0x64
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	1acb      	subs	r3, r1, r3
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067f6:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <UART_SetConfig+0x2d4>)
 80067f8:	fba3 2302 	umull	r2, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006804:	441c      	add	r4, r3
 8006806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	1891      	adds	r1, r2, r2
 800681e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006820:	415b      	adcs	r3, r3
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006828:	4641      	mov	r1, r8
 800682a:	1851      	adds	r1, r2, r1
 800682c:	6339      	str	r1, [r7, #48]	; 0x30
 800682e:	4649      	mov	r1, r9
 8006830:	414b      	adcs	r3, r1
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006840:	4659      	mov	r1, fp
 8006842:	00cb      	lsls	r3, r1, #3
 8006844:	4651      	mov	r1, sl
 8006846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684a:	4651      	mov	r1, sl
 800684c:	00ca      	lsls	r2, r1, #3
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	4603      	mov	r3, r0
 8006854:	4642      	mov	r2, r8
 8006856:	189b      	adds	r3, r3, r2
 8006858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800685c:	464b      	mov	r3, r9
 800685e:	460a      	mov	r2, r1
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800687c:	460b      	mov	r3, r1
 800687e:	18db      	adds	r3, r3, r3
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	4613      	mov	r3, r2
 8006884:	eb42 0303 	adc.w	r3, r2, r3
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800688e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006892:	f7f9 fced 	bl	8000270 <__aeabi_uldivmod>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <UART_SetConfig+0x2d4>)
 800689c:	fba3 1302 	umull	r1, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	2164      	movs	r1, #100	; 0x64
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <UART_SetConfig+0x2d4>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f003 0207 	and.w	r2, r3, #7
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4422      	add	r2, r4
 80068c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068c4:	e106      	b.n	8006ad4 <UART_SetConfig+0x4d8>
 80068c6:	bf00      	nop
 80068c8:	40011000 	.word	0x40011000
 80068cc:	40011400 	.word	0x40011400
 80068d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	1891      	adds	r1, r2, r2
 80068ec:	6239      	str	r1, [r7, #32]
 80068ee:	415b      	adcs	r3, r3
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
 80068f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068f6:	4641      	mov	r1, r8
 80068f8:	1854      	adds	r4, r2, r1
 80068fa:	4649      	mov	r1, r9
 80068fc:	eb43 0501 	adc.w	r5, r3, r1
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	00eb      	lsls	r3, r5, #3
 800690a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800690e:	00e2      	lsls	r2, r4, #3
 8006910:	4614      	mov	r4, r2
 8006912:	461d      	mov	r5, r3
 8006914:	4643      	mov	r3, r8
 8006916:	18e3      	adds	r3, r4, r3
 8006918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800691c:	464b      	mov	r3, r9
 800691e:	eb45 0303 	adc.w	r3, r5, r3
 8006922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006942:	4629      	mov	r1, r5
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	4621      	mov	r1, r4
 8006948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694c:	4621      	mov	r1, r4
 800694e:	008a      	lsls	r2, r1, #2
 8006950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006954:	f7f9 fc8c 	bl	8000270 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4b60      	ldr	r3, [pc, #384]	; (8006ae0 <UART_SetConfig+0x4e4>)
 800695e:	fba3 2302 	umull	r2, r3, r3, r2
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	011c      	lsls	r4, r3, #4
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	2200      	movs	r2, #0
 800696c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	1891      	adds	r1, r2, r2
 800697e:	61b9      	str	r1, [r7, #24]
 8006980:	415b      	adcs	r3, r3
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006988:	4641      	mov	r1, r8
 800698a:	1851      	adds	r1, r2, r1
 800698c:	6139      	str	r1, [r7, #16]
 800698e:	4649      	mov	r1, r9
 8006990:	414b      	adcs	r3, r1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a0:	4659      	mov	r1, fp
 80069a2:	00cb      	lsls	r3, r1, #3
 80069a4:	4651      	mov	r1, sl
 80069a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069aa:	4651      	mov	r1, sl
 80069ac:	00ca      	lsls	r2, r1, #3
 80069ae:	4610      	mov	r0, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	4642      	mov	r2, r8
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069bc:	464b      	mov	r3, r9
 80069be:	460a      	mov	r2, r1
 80069c0:	eb42 0303 	adc.w	r3, r2, r3
 80069c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069e0:	4649      	mov	r1, r9
 80069e2:	008b      	lsls	r3, r1, #2
 80069e4:	4641      	mov	r1, r8
 80069e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ea:	4641      	mov	r1, r8
 80069ec:	008a      	lsls	r2, r1, #2
 80069ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069f2:	f7f9 fc3d 	bl	8000270 <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4611      	mov	r1, r2
 80069fc:	4b38      	ldr	r3, [pc, #224]	; (8006ae0 <UART_SetConfig+0x4e4>)
 80069fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2264      	movs	r2, #100	; 0x64
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	1acb      	subs	r3, r1, r3
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	3332      	adds	r3, #50	; 0x32
 8006a10:	4a33      	ldr	r2, [pc, #204]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1c:	441c      	add	r4, r3
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a22:	2200      	movs	r2, #0
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
 8006a26:	677a      	str	r2, [r7, #116]	; 0x74
 8006a28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	464b      	mov	r3, r9
 8006a30:	1891      	adds	r1, r2, r2
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	415b      	adcs	r3, r3
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	1851      	adds	r1, r2, r1
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	4649      	mov	r1, r9
 8006a44:	414b      	adcs	r3, r1
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a54:	4659      	mov	r1, fp
 8006a56:	00cb      	lsls	r3, r1, #3
 8006a58:	4651      	mov	r1, sl
 8006a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a5e:	4651      	mov	r1, sl
 8006a60:	00ca      	lsls	r2, r1, #3
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	4642      	mov	r2, r8
 8006a6a:	189b      	adds	r3, r3, r2
 8006a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6e:	464b      	mov	r3, r9
 8006a70:	460a      	mov	r2, r1
 8006a72:	eb42 0303 	adc.w	r3, r2, r3
 8006a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	663b      	str	r3, [r7, #96]	; 0x60
 8006a82:	667a      	str	r2, [r7, #100]	; 0x64
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a90:	4649      	mov	r1, r9
 8006a92:	008b      	lsls	r3, r1, #2
 8006a94:	4641      	mov	r1, r8
 8006a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	008a      	lsls	r2, r1, #2
 8006a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aa2:	f7f9 fbe5 	bl	8000270 <__aeabi_uldivmod>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006aac:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	2164      	movs	r1, #100	; 0x64
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	3332      	adds	r3, #50	; 0x32
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <UART_SetConfig+0x4e4>)
 8006ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f003 020f 	and.w	r2, r3, #15
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4422      	add	r2, r4
 8006ad2:	609a      	str	r2, [r3, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ada:	46bd      	mov	sp, r7
 8006adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae0:	51eb851f 	.word	0x51eb851f

08006ae4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	f023 0101 	bic.w	r1, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d102      	bne.n	8006b14 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006b0e:	2340      	movs	r3, #64	; 0x40
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e001      	b.n	8006b18 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006b24:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006b2a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006b30:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006b36:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006b3c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006b42:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006b48:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006b4e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006b54:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <FSMC_NORSRAM_Init+0xd0>)
 8006b74:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b7c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006b84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	ea02 0103 	and.w	r1, r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4319      	orrs	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	0008fb7f 	.word	0x0008fb7f

08006bb8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	051b      	lsls	r3, r3, #20
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	3b02      	subs	r3, #2
 8006bfe:	061b      	lsls	r3, r3, #24
 8006c00:	431a      	orrs	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	4319      	orrs	r1, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c38:	d11d      	bne.n	8006c76 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c42:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	6811      	ldr	r1, [r2, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	6852      	ldr	r2, [r2, #4]
 8006c4e:	0112      	lsls	r2, r2, #4
 8006c50:	4311      	orrs	r1, r2
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	6892      	ldr	r2, [r2, #8]
 8006c56:	0212      	lsls	r2, r2, #8
 8006c58:	4311      	orrs	r1, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	6992      	ldr	r2, [r2, #24]
 8006c5e:	4311      	orrs	r1, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	68d2      	ldr	r2, [r2, #12]
 8006c64:	0412      	lsls	r2, r2, #16
 8006c66:	430a      	orrs	r2, r1
 8006c68:	ea43 0102 	orr.w	r1, r3, r2
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006c74:	e005      	b.n	8006c82 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	cff00000 	.word	0xcff00000

08006c94 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006cf4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006cfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d0a:	f023 030f 	bic.w	r3, r3, #15
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	b2db      	uxtb	r3, r3
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3314      	adds	r3, #20
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
}  
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006d70:	230c      	movs	r3, #12
 8006d72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ffa1 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006d8e:	4a05      	ldr	r2, [pc, #20]	; (8006da4 <SDMMC_CmdStopTransfer+0x40>)
 8006d90:	210c      	movs	r1, #12
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f82a 	bl	8006dec <SDMMC_GetCmdResp1>
 8006d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	05f5e100 	.word	0x05f5e100

08006da8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006db6:	230d      	movs	r3, #13
 8006db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dc8:	f107 0308 	add.w	r3, r7, #8
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff7e 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	210d      	movs	r1, #13
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f806 	bl	8006dec <SDMMC_GetCmdResp1>
 8006de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de2:	69fb      	ldr	r3, [r7, #28]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	460b      	mov	r3, r1
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <SDMMC_GetCmdResp1+0x1d0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a70      	ldr	r2, [pc, #448]	; (8006fc0 <SDMMC_GetCmdResp1+0x1d4>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	0a5a      	lsrs	r2, r3, #9
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	1e5a      	subs	r2, r3, #1
 8006e12:	61fa      	str	r2, [r7, #28]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e1c:	e0c9      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0ef      	beq.n	8006e0e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1ea      	bne.n	8006e0e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2204      	movs	r2, #4
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4a:	2304      	movs	r3, #4
 8006e4c:	e0b1      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0a6      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	22c5      	movs	r2, #197	; 0xc5
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff ff5a 	bl	8006d24 <SDIO_GetCommandResponse>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d001      	beq.n	8006e7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e099      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e7e:	2100      	movs	r1, #0
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff ff5c 	bl	8006d3e <SDIO_GetResponse>
 8006e86:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4b4e      	ldr	r3, [pc, #312]	; (8006fc4 <SDMMC_GetCmdResp1+0x1d8>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e08d      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da02      	bge.n	8006ea2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea0:	e087      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	e080      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	e079      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ecc:	e071      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006edc:	e069      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eec:	e061      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006efc:	e059      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f0c:	e051      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f1c:	e049      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f2c:	e041      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3c:	e039      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f4c:	e031      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f5c:	e029      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006f68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f6c:	e021      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f7c:	e019      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f8c:	e011      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f9c:	e009      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006fa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006fac:	e001      	b.n	8006fb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000030 	.word	0x20000030
 8006fc0:	10624dd3 	.word	0x10624dd3
 8006fc4:	fdffe008 	.word	0xfdffe008

08006fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc8:	b084      	sub	sp, #16
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	f107 001c 	add.w	r0, r7, #28
 8006fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d123      	bne.n	800702a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800700a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800700e:	2b01      	cmp	r3, #1
 8007010:	d105      	bne.n	800701e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fae2 	bl	80085e8 <USB_CoreReset>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	e01b      	b.n	8007062 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fad6 	bl	80085e8 <USB_CoreReset>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007040:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
 8007054:	e005      	b.n	8007062 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007062:	7fbb      	ldrb	r3, [r7, #30]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d10b      	bne.n	8007080 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f043 0206 	orr.w	r2, r3, #6
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0220 	orr.w	r2, r3, #32
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800708c:	b004      	add	sp, #16
 800708e:	4770      	bx	lr

08007090 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d165      	bne.n	8007170 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4a41      	ldr	r2, [pc, #260]	; (80071ac <USB_SetTurnaroundTime+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d906      	bls.n	80070ba <USB_SetTurnaroundTime+0x2a>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <USB_SetTurnaroundTime+0x120>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d202      	bcs.n	80070ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070b4:	230f      	movs	r3, #15
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e062      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4a3c      	ldr	r2, [pc, #240]	; (80071b0 <USB_SetTurnaroundTime+0x120>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d306      	bcc.n	80070d0 <USB_SetTurnaroundTime+0x40>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4a3b      	ldr	r2, [pc, #236]	; (80071b4 <USB_SetTurnaroundTime+0x124>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d202      	bcs.n	80070d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070ca:	230e      	movs	r3, #14
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e057      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <USB_SetTurnaroundTime+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d306      	bcc.n	80070e6 <USB_SetTurnaroundTime+0x56>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a37      	ldr	r2, [pc, #220]	; (80071b8 <USB_SetTurnaroundTime+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d202      	bcs.n	80070e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070e0:	230d      	movs	r3, #13
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e04c      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <USB_SetTurnaroundTime+0x128>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d306      	bcc.n	80070fc <USB_SetTurnaroundTime+0x6c>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a32      	ldr	r2, [pc, #200]	; (80071bc <USB_SetTurnaroundTime+0x12c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d802      	bhi.n	80070fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070f6:	230c      	movs	r3, #12
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e041      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <USB_SetTurnaroundTime+0x12c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d906      	bls.n	8007112 <USB_SetTurnaroundTime+0x82>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <USB_SetTurnaroundTime+0x130>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d802      	bhi.n	8007112 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800710c:	230b      	movs	r3, #11
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e036      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <USB_SetTurnaroundTime+0x130>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d906      	bls.n	8007128 <USB_SetTurnaroundTime+0x98>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4a29      	ldr	r2, [pc, #164]	; (80071c4 <USB_SetTurnaroundTime+0x134>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d802      	bhi.n	8007128 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007122:	230a      	movs	r3, #10
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e02b      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a26      	ldr	r2, [pc, #152]	; (80071c4 <USB_SetTurnaroundTime+0x134>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d906      	bls.n	800713e <USB_SetTurnaroundTime+0xae>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <USB_SetTurnaroundTime+0x138>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d202      	bcs.n	800713e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007138:	2309      	movs	r3, #9
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e020      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a21      	ldr	r2, [pc, #132]	; (80071c8 <USB_SetTurnaroundTime+0x138>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d306      	bcc.n	8007154 <USB_SetTurnaroundTime+0xc4>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <USB_SetTurnaroundTime+0x13c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d802      	bhi.n	8007154 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800714e:	2308      	movs	r3, #8
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e015      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <USB_SetTurnaroundTime+0x13c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d906      	bls.n	800716a <USB_SetTurnaroundTime+0xda>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <USB_SetTurnaroundTime+0x140>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d202      	bcs.n	800716a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007164:	2307      	movs	r3, #7
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e00a      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800716a:	2306      	movs	r3, #6
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e007      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007176:	2309      	movs	r3, #9
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	e001      	b.n	8007180 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800717c:	2309      	movs	r3, #9
 800717e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007198:	431a      	orrs	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	00d8acbf 	.word	0x00d8acbf
 80071b0:	00e4e1c0 	.word	0x00e4e1c0
 80071b4:	00f42400 	.word	0x00f42400
 80071b8:	01067380 	.word	0x01067380
 80071bc:	011a499f 	.word	0x011a499f
 80071c0:	01312cff 	.word	0x01312cff
 80071c4:	014ca43f 	.word	0x014ca43f
 80071c8:	016e3600 	.word	0x016e3600
 80071cc:	01a6ab1f 	.word	0x01a6ab1f
 80071d0:	01e84800 	.word	0x01e84800

080071d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f043 0201 	orr.w	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d115      	bne.n	8007266 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007246:	200a      	movs	r0, #10
 8007248:	f7fa fcbc 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	330a      	adds	r3, #10
 8007250:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 f939 	bl	80084ca <USB_GetMode>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d01e      	beq.n	800729c <USB_SetCurrentMode+0x84>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2bc7      	cmp	r3, #199	; 0xc7
 8007262:	d9f0      	bls.n	8007246 <USB_SetCurrentMode+0x2e>
 8007264:	e01a      	b.n	800729c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d115      	bne.n	8007298 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007278:	200a      	movs	r0, #10
 800727a:	f7fa fca3 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	330a      	adds	r3, #10
 8007282:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f920 	bl	80084ca <USB_GetMode>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <USB_SetCurrentMode+0x84>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2bc7      	cmp	r3, #199	; 0xc7
 8007294:	d9f0      	bls.n	8007278 <USB_SetCurrentMode+0x60>
 8007296:	e001      	b.n	800729c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e005      	b.n	80072a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2bc8      	cmp	r3, #200	; 0xc8
 80072a0:	d101      	bne.n	80072a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072b0:	b084      	sub	sp, #16
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	e009      	b.n	80072e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3340      	adds	r3, #64	; 0x40
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	2200      	movs	r2, #0
 80072dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3301      	adds	r3, #1
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b0e      	cmp	r3, #14
 80072e8:	d9f2      	bls.n	80072d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d11c      	bne.n	800732c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
 800732a:	e00b      	b.n	8007344 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800734a:	461a      	mov	r2, r3
 800734c:	2300      	movs	r3, #0
 800734e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007350:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10d      	bne.n	8007374 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f968 	bl	8007638 <USB_SetDevSpeed>
 8007368:	e008      	b.n	800737c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f963 	bl	8007638 <USB_SetDevSpeed>
 8007372:	e003      	b.n	800737c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007374:	2103      	movs	r1, #3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f95e 	bl	8007638 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800737c:	2110      	movs	r1, #16
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8fa 	bl	8007578 <USB_FlushTxFifo>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f924 	bl	80075dc <USB_FlushRxFifo>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a4:	461a      	mov	r2, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	461a      	mov	r2, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	e043      	b.n	8007450 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073de:	d118      	bne.n	8007412 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	461a      	mov	r2, r3
 80073f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e013      	b.n	8007424 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e008      	b.n	8007424 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007448:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3301      	adds	r3, #1
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007454:	461a      	mov	r2, r3
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4293      	cmp	r3, r2
 800745a:	d3b5      	bcc.n	80073c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	e043      	b.n	80074ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007478:	d118      	bne.n	80074ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748c:	461a      	mov	r2, r3
 800748e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e013      	b.n	80074be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	461a      	mov	r2, r3
 80074a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	e008      	b.n	80074be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	461a      	mov	r2, r3
 80074ba:	2300      	movs	r3, #0
 80074bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	461a      	mov	r2, r3
 80074cc:	2300      	movs	r3, #0
 80074ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	3301      	adds	r3, #1
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074ee:	461a      	mov	r2, r3
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d3b5      	bcc.n	8007462 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007508:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007516:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f043 0210 	orr.w	r2, r3, #16
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	4b10      	ldr	r3, [pc, #64]	; (8007574 <USB_DevInit+0x2c4>)
 8007532:	4313      	orrs	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007538:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f043 0208 	orr.w	r2, r3, #8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800754c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007550:	2b01      	cmp	r3, #1
 8007552:	d107      	bne.n	8007564 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800755c:	f043 0304 	orr.w	r3, r3, #4
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr
 8007574:	803c3800 	.word	0x803c3800

08007578 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3301      	adds	r3, #1
 800758a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007592:	d901      	bls.n	8007598 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e01b      	b.n	80075d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	daf2      	bge.n	8007586 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	019b      	lsls	r3, r3, #6
 80075a8:	f043 0220 	orr.w	r2, r3, #32
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075bc:	d901      	bls.n	80075c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e006      	b.n	80075d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d0f0      	beq.n	80075b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075f4:	d901      	bls.n	80075fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e018      	b.n	800762c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	daf2      	bge.n	80075e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2210      	movs	r2, #16
 800760a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007618:	d901      	bls.n	800761e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e006      	b.n	800762c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b10      	cmp	r3, #16
 8007628:	d0f0      	beq.n	800760c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007658:	4313      	orrs	r3, r2
 800765a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0306 	and.w	r3, r3, #6
 8007682:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
 800768e:	e00a      	b.n	80076a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d002      	beq.n	800769c <USB_GetDevSpeed+0x32>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b06      	cmp	r3, #6
 800769a:	d102      	bne.n	80076a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800769c:	2302      	movs	r3, #2
 800769e:	75fb      	strb	r3, [r7, #23]
 80076a0:	e001      	b.n	80076a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076a2:	230f      	movs	r3, #15
 80076a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d13a      	bne.n	8007746 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	2101      	movs	r1, #1
 80076e2:	fa01 f303 	lsl.w	r3, r1, r3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	68f9      	ldr	r1, [r7, #12]
 80076ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d155      	bne.n	80077b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007724:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	059b      	lsls	r3, r3, #22
 800772a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800772c:	4313      	orrs	r3, r2
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	e036      	b.n	80077b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774c:	69da      	ldr	r2, [r3, #28]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	2101      	movs	r1, #1
 8007758:	fa01 f303 	lsl.w	r3, r1, r3
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007764:	4313      	orrs	r3, r2
 8007766:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d11a      	bne.n	80077b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800779a:	430b      	orrs	r3, r1
 800779c:	4313      	orrs	r3, r2
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d161      	bne.n	80078a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f6:	d11f      	bne.n	8007838 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	440a      	add	r2, r1
 800780e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007816:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	2101      	movs	r1, #1
 800784a:	fa01 f303 	lsl.w	r3, r1, r3
 800784e:	b29b      	uxth	r3, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007858:	4013      	ands	r3, r2
 800785a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f303 	lsl.w	r3, r1, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800787c:	4013      	ands	r3, r2
 800787e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	0159      	lsls	r1, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	440b      	add	r3, r1
 8007896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789a:	4619      	mov	r1, r3
 800789c:	4b35      	ldr	r3, [pc, #212]	; (8007974 <USB_DeactivateEndpoint+0x1b0>)
 800789e:	4013      	ands	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]
 80078a2:	e060      	b.n	8007966 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ba:	d11f      	bne.n	80078fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f303 	lsl.w	r3, r1, r3
 8007912:	041b      	lsls	r3, r3, #16
 8007914:	43db      	mvns	r3, r3
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800791c:	4013      	ands	r3, r2
 800791e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	2101      	movs	r1, #1
 8007932:	fa01 f303 	lsl.w	r3, r1, r3
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	43db      	mvns	r3, r3
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007940:	4013      	ands	r3, r2
 8007942:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0159      	lsls	r1, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	440b      	add	r3, r1
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	4619      	mov	r1, r3
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <USB_DeactivateEndpoint+0x1b4>)
 8007962:	4013      	ands	r3, r2
 8007964:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	ec337800 	.word	0xec337800
 8007978:	eff37800 	.word	0xeff37800

0800797c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	; 0x28
 8007980:	af02      	add	r7, sp, #8
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	f040 817a 	bne.w	8007c92 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d132      	bne.n	8007a0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	0151      	lsls	r1, r2, #5
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	440a      	add	r2, r1
 80079e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a04:	0cdb      	lsrs	r3, r3, #19
 8007a06:	04db      	lsls	r3, r3, #19
 8007a08:	6113      	str	r3, [r2, #16]
 8007a0a:	e092      	b.n	8007b32 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a26:	0cdb      	lsrs	r3, r3, #19
 8007a28:	04db      	lsls	r3, r3, #19
 8007a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11a      	bne.n	8007a8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d903      	bls.n	8007a6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a88:	6113      	str	r3, [r2, #16]
 8007a8a:	e01b      	b.n	8007ac4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6919      	ldr	r1, [r3, #16]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	440b      	add	r3, r1
 8007aa4:	1e59      	subs	r1, r3, #1
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ab0:	4ba2      	ldr	r3, [pc, #648]	; (8007d3c <USB_EPStartXfer+0x3c0>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	69b9      	ldr	r1, [r7, #24]
 8007ab6:	0148      	lsls	r0, r1, #5
 8007ab8:	69f9      	ldr	r1, [r7, #28]
 8007aba:	4401      	add	r1, r0
 8007abc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ada:	69b9      	ldr	r1, [r7, #24]
 8007adc:	0148      	lsls	r0, r1, #5
 8007ade:	69f9      	ldr	r1, [r7, #28]
 8007ae0:	4401      	add	r1, r0
 8007ae2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d11f      	bne.n	8007b32 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d14b      	bne.n	8007bd0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d128      	bne.n	8007bae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d110      	bne.n	8007b8e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	e00f      	b.n	8007bae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	0151      	lsls	r1, r2, #5
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	e165      	b.n	8007e9c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	791b      	ldrb	r3, [r3, #4]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d015      	beq.n	8007c24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 814d 	beq.w	8007e9c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	2101      	movs	r1, #1
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	634b      	str	r3, [r1, #52]	; 0x34
 8007c22:	e13b      	b.n	8007e9c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d110      	bne.n	8007c56 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	e00f      	b.n	8007c76 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	0151      	lsls	r1, r2, #5
 8007c68:	69fa      	ldr	r2, [r7, #28]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	68d9      	ldr	r1, [r3, #12]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	b298      	uxth	r0, r3
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4603      	mov	r3, r0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f9b8 	bl	8008000 <USB_WritePacket>
 8007c90:	e104      	b.n	8007e9c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	0cdb      	lsrs	r3, r3, #19
 8007cae:	04db      	lsls	r3, r3, #19
 8007cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	0151      	lsls	r1, r2, #5
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	440a      	add	r2, r1
 8007cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cd4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d131      	bne.n	8007d40 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0a:	69b9      	ldr	r1, [r7, #24]
 8007d0c:	0148      	lsls	r0, r1, #5
 8007d0e:	69f9      	ldr	r1, [r7, #28]
 8007d10:	4401      	add	r1, r0
 8007d12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d16:	4313      	orrs	r3, r2
 8007d18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d38:	6113      	str	r3, [r2, #16]
 8007d3a:	e061      	b.n	8007e00 <USB_EPStartXfer+0x484>
 8007d3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d123      	bne.n	8007d90 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	0148      	lsls	r0, r1, #5
 8007d62:	69f9      	ldr	r1, [r7, #28]
 8007d64:	4401      	add	r1, r0
 8007d66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d8c:	6113      	str	r3, [r2, #16]
 8007d8e:	e037      	b.n	8007e00 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	8afa      	ldrh	r2, [r7, #22]
 8007dac:	fb03 f202 	mul.w	r2, r3, r2
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	8afb      	ldrh	r3, [r7, #22]
 8007dc4:	04d9      	lsls	r1, r3, #19
 8007dc6:	4b38      	ldr	r3, [pc, #224]	; (8007ea8 <USB_EPStartXfer+0x52c>)
 8007dc8:	400b      	ands	r3, r1
 8007dca:	69b9      	ldr	r1, [r7, #24]
 8007dcc:	0148      	lsls	r0, r1, #5
 8007dce:	69f9      	ldr	r1, [r7, #28]
 8007dd0:	4401      	add	r1, r0
 8007dd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df0:	69b9      	ldr	r1, [r7, #24]
 8007df2:	0148      	lsls	r0, r1, #5
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	4401      	add	r1, r0
 8007df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d10d      	bne.n	8007e22 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	68d9      	ldr	r1, [r3, #12]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	460a      	mov	r2, r1
 8007e20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d128      	bne.n	8007e7c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d110      	bne.n	8007e5c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e00f      	b.n	8007e7c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	1ff80000 	.word	0x1ff80000

08007eac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d14a      	bne.n	8007f60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee2:	f040 8086 	bne.w	8007ff2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	7812      	ldrb	r2, [r2, #0]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3301      	adds	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d902      	bls.n	8007f44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
          break;
 8007f42:	e056      	b.n	8007ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5c:	d0e7      	beq.n	8007f2e <USB_EPStopXfer+0x82>
 8007f5e:	e048      	b.n	8007ff2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f78:	d13b      	bne.n	8007ff2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	7812      	ldrb	r2, [r2, #0]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d902      	bls.n	8007fd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e00c      	b.n	8007ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff0:	d0e7      	beq.n	8007fc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008000:	b480      	push	{r7}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	460b      	mov	r3, r1
 8008010:	71fb      	strb	r3, [r7, #7]
 8008012:	4613      	mov	r3, r2
 8008014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800801e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d123      	bne.n	800806e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008026:	88bb      	ldrh	r3, [r7, #4]
 8008028:	3303      	adds	r3, #3
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e018      	b.n	8008066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	031a      	lsls	r2, r3, #12
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	4413      	add	r3, r2
 800803c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008040:	461a      	mov	r2, r3
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3301      	adds	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3301      	adds	r3, #1
 8008052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	3301      	adds	r3, #1
 8008058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	3301      	adds	r3, #1
 800805e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	3301      	adds	r3, #1
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	429a      	cmp	r2, r3
 800806c:	d3e2      	bcc.n	8008034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3724      	adds	r7, #36	; 0x24
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800807c:	b480      	push	{r7}
 800807e:	b08b      	sub	sp, #44	; 0x2c
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	b29b      	uxth	r3, r3
 8008098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	e014      	b.n	80080d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	3301      	adds	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	3301      	adds	r3, #1
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	3301      	adds	r3, #1
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	3301      	adds	r3, #1
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	3301      	adds	r3, #1
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3e6      	bcc.n	80080a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080da:	8bfb      	ldrh	r3, [r7, #30]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01e      	beq.n	800811e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ea:	461a      	mov	r2, r3
 80080ec:	f107 0310 	add.w	r3, r7, #16
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008100:	b2da      	uxtb	r2, r3
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	701a      	strb	r2, [r3, #0]
      i++;
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	3301      	adds	r3, #1
 800810a:	623b      	str	r3, [r7, #32]
      pDest++;
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	3301      	adds	r3, #1
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008112:	8bfb      	ldrh	r3, [r7, #30]
 8008114:	3b01      	subs	r3, #1
 8008116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008118:	8bfb      	ldrh	r3, [r7, #30]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1ea      	bne.n	80080f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008120:	4618      	mov	r0, r3
 8008122:	372c      	adds	r7, #44	; 0x2c
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d12c      	bne.n	80081a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	db12      	blt.n	8008180 <USB_EPSetStall+0x54>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00f      	beq.n	8008180 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800817e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	e02b      	b.n	80081fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db12      	blt.n	80081da <USB_EPSetStall+0xae>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00f      	beq.n	80081da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d128      	bne.n	8008276 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008242:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	791b      	ldrb	r3, [r3, #4]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d003      	beq.n	8008254 <USB_EPClearStall+0x4c>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	791b      	ldrb	r3, [r3, #4]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d138      	bne.n	80082c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	440a      	add	r2, r1
 800826a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	e027      	b.n	80082c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d003      	beq.n	80082a6 <USB_EPClearStall+0x9e>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	791b      	ldrb	r3, [r3, #4]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d10f      	bne.n	80082c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800830e:	4313      	orrs	r3, r2
 8008310:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800834e:	f023 0302 	bic.w	r3, r3, #2
 8008352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008362:	b480      	push	{r7}
 8008364:	b085      	sub	sp, #20
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800837c:	f023 0303 	bic.w	r3, r3, #3
 8008380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	4013      	ands	r3, r2
 80083ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	0c1b      	lsrs	r3, r3, #16
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4013      	ands	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	b29b      	uxth	r3, r3
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4013      	ands	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008460:	68bb      	ldr	r3, [r7, #8]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800846e:	b480      	push	{r7}
 8008470:	b087      	sub	sp, #28
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	01db      	lsls	r3, r3, #7
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4013      	ands	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084bc:	68bb      	ldr	r3, [r7, #8]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f003 0301 	and.w	r3, r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008504:	f023 0307 	bic.w	r3, r3, #7
 8008508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800851c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	460b      	mov	r3, r1
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	333c      	adds	r3, #60	; 0x3c
 8008542:	3304      	adds	r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4a26      	ldr	r2, [pc, #152]	; (80085e4 <USB_EP0_OutStart+0xb8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d90a      	bls.n	8008566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008560:	d101      	bne.n	8008566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	e037      	b.n	80085d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	461a      	mov	r2, r3
 800856e:	2300      	movs	r3, #0
 8008570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008594:	f043 0318 	orr.w	r3, r3, #24
 8008598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d10f      	bne.n	80085d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80085d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	4f54300a 	.word	0x4f54300a

080085e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008600:	d901      	bls.n	8008606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e01b      	b.n	800863e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	daf2      	bge.n	80085f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f043 0201 	orr.w	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800862a:	d901      	bls.n	8008630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e006      	b.n	800863e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b01      	cmp	r3, #1
 800863a:	d0f0      	beq.n	800861e <USB_CoreReset+0x36>

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008658:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800865c:	f002 fc2e 	bl	800aebc <USBD_static_malloc>
 8008660:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32b0      	adds	r2, #176	; 0xb0
 8008672:	2100      	movs	r1, #0
 8008674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008678:	2302      	movs	r3, #2
 800867a:	e0d4      	b.n	8008826 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800867c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008680:	2100      	movs	r1, #0
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f002 fc7e 	bl	800af84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	32b0      	adds	r2, #176	; 0xb0
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32b0      	adds	r2, #176	; 0xb0
 80086a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7c1b      	ldrb	r3, [r3, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d138      	bne.n	8008726 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086b4:	4b5e      	ldr	r3, [pc, #376]	; (8008830 <USBD_CDC_Init+0x1e4>)
 80086b6:	7819      	ldrb	r1, [r3, #0]
 80086b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086bc:	2202      	movs	r2, #2
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 fad9 	bl	800ac76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086c4:	4b5a      	ldr	r3, [pc, #360]	; (8008830 <USBD_CDC_Init+0x1e4>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	3324      	adds	r3, #36	; 0x24
 80086da:	2201      	movs	r2, #1
 80086dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086de:	4b55      	ldr	r3, [pc, #340]	; (8008834 <USBD_CDC_Init+0x1e8>)
 80086e0:	7819      	ldrb	r1, [r3, #0]
 80086e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e6:	2202      	movs	r2, #2
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f002 fac4 	bl	800ac76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086ee:	4b51      	ldr	r3, [pc, #324]	; (8008834 <USBD_CDC_Init+0x1e8>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008706:	2201      	movs	r2, #1
 8008708:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800870a:	4b4b      	ldr	r3, [pc, #300]	; (8008838 <USBD_CDC_Init+0x1ec>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 020f 	and.w	r2, r3, #15
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	3326      	adds	r3, #38	; 0x26
 8008720:	2210      	movs	r2, #16
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	e035      	b.n	8008792 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008726:	4b42      	ldr	r3, [pc, #264]	; (8008830 <USBD_CDC_Init+0x1e4>)
 8008728:	7819      	ldrb	r1, [r3, #0]
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	2202      	movs	r2, #2
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 faa1 	bl	800ac76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008734:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <USBD_CDC_Init+0x1e4>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	3324      	adds	r3, #36	; 0x24
 800874a:	2201      	movs	r2, #1
 800874c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <USBD_CDC_Init+0x1e8>)
 8008750:	7819      	ldrb	r1, [r3, #0]
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	2202      	movs	r2, #2
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f002 fa8d 	bl	800ac76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800875c:	4b35      	ldr	r3, [pc, #212]	; (8008834 <USBD_CDC_Init+0x1e8>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008774:	2201      	movs	r2, #1
 8008776:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008778:	4b2f      	ldr	r3, [pc, #188]	; (8008838 <USBD_CDC_Init+0x1ec>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3326      	adds	r3, #38	; 0x26
 800878e:	2210      	movs	r2, #16
 8008790:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008792:	4b29      	ldr	r3, [pc, #164]	; (8008838 <USBD_CDC_Init+0x1ec>)
 8008794:	7819      	ldrb	r1, [r3, #0]
 8008796:	2308      	movs	r3, #8
 8008798:	2203      	movs	r2, #3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f002 fa6b 	bl	800ac76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <USBD_CDC_Init+0x1ec>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3324      	adds	r3, #36	; 0x24
 80087b6:	2201      	movs	r2, #1
 80087b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	33b0      	adds	r3, #176	; 0xb0
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e018      	b.n	8008826 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7c1b      	ldrb	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <USBD_CDC_Init+0x1e8>)
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 fb22 	bl	800ae54 <USBD_LL_PrepareReceive>
 8008810:	e008      	b.n	8008824 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <USBD_CDC_Init+0x1e8>)
 8008814:	7819      	ldrb	r1, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f002 fb18 	bl	800ae54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200000c3 	.word	0x200000c3
 8008834:	200000c4 	.word	0x200000c4
 8008838:	200000c5 	.word	0x200000c5

0800883c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008848:	4b3a      	ldr	r3, [pc, #232]	; (8008934 <USBD_CDC_DeInit+0xf8>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 fa37 	bl	800acc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008854:	4b37      	ldr	r3, [pc, #220]	; (8008934 <USBD_CDC_DeInit+0xf8>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	2200      	movs	r2, #0
 800886c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800886e:	4b32      	ldr	r3, [pc, #200]	; (8008938 <USBD_CDC_DeInit+0xfc>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f002 fa24 	bl	800acc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800887a:	4b2f      	ldr	r3, [pc, #188]	; (8008938 <USBD_CDC_DeInit+0xfc>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008892:	2200      	movs	r2, #0
 8008894:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008896:	4b29      	ldr	r3, [pc, #164]	; (800893c <USBD_CDC_DeInit+0x100>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 fa10 	bl	800acc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80088a2:	4b26      	ldr	r3, [pc, #152]	; (800893c <USBD_CDC_DeInit+0x100>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f003 020f 	and.w	r2, r3, #15
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	3324      	adds	r3, #36	; 0x24
 80088b8:	2200      	movs	r2, #0
 80088ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088bc:	4b1f      	ldr	r3, [pc, #124]	; (800893c <USBD_CDC_DeInit+0x100>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 020f 	and.w	r2, r3, #15
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	3326      	adds	r3, #38	; 0x26
 80088d2:	2200      	movs	r2, #0
 80088d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	32b0      	adds	r2, #176	; 0xb0
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01f      	beq.n	8008928 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	33b0      	adds	r3, #176	; 0xb0
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32b0      	adds	r2, #176	; 0xb0
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	4618      	mov	r0, r3
 800890c:	f002 fae4 	bl	800aed8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32b0      	adds	r2, #176	; 0xb0
 800891a:	2100      	movs	r1, #0
 800891c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200000c3 	.word	0x200000c3
 8008938:	200000c4 	.word	0x200000c4
 800893c:	200000c5 	.word	0x200000c5

08008940 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	32b0      	adds	r2, #176	; 0xb0
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	e0bf      	b.n	8008af0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008978:	2b00      	cmp	r3, #0
 800897a:	d050      	beq.n	8008a1e <USBD_CDC_Setup+0xde>
 800897c:	2b20      	cmp	r3, #32
 800897e:	f040 80af 	bne.w	8008ae0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d03a      	beq.n	8008a00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b25b      	sxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	da1b      	bge.n	80089cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	33b0      	adds	r3, #176	; 0xb0
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80089aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	88d2      	ldrh	r2, [r2, #6]
 80089b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	88db      	ldrh	r3, [r3, #6]
 80089b6:	2b07      	cmp	r3, #7
 80089b8:	bf28      	it	cs
 80089ba:	2307      	movcs	r3, #7
 80089bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	89fa      	ldrh	r2, [r7, #14]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fd49 	bl	800a45c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80089ca:	e090      	b.n	8008aee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	2b3f      	cmp	r3, #63	; 0x3f
 80089dc:	d803      	bhi.n	80089e6 <USBD_CDC_Setup+0xa6>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	e000      	b.n	80089e8 <USBD_CDC_Setup+0xa8>
 80089e6:	2240      	movs	r2, #64	; 0x40
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80089ee:	6939      	ldr	r1, [r7, #16]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80089f6:	461a      	mov	r2, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 fd5b 	bl	800a4b4 <USBD_CtlPrepareRx>
      break;
 80089fe:	e076      	b.n	8008aee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	33b0      	adds	r3, #176	; 0xb0
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	7850      	ldrb	r0, [r2, #1]
 8008a16:	2200      	movs	r2, #0
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	4798      	blx	r3
      break;
 8008a1c:	e067      	b.n	8008aee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b0b      	cmp	r3, #11
 8008a24:	d851      	bhi.n	8008aca <USBD_CDC_Setup+0x18a>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <USBD_CDC_Setup+0xec>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008acb 	.word	0x08008acb
 8008a38:	08008acb 	.word	0x08008acb
 8008a3c:	08008acb 	.word	0x08008acb
 8008a40:	08008acb 	.word	0x08008acb
 8008a44:	08008acb 	.word	0x08008acb
 8008a48:	08008acb 	.word	0x08008acb
 8008a4c:	08008acb 	.word	0x08008acb
 8008a50:	08008acb 	.word	0x08008acb
 8008a54:	08008a87 	.word	0x08008a87
 8008a58:	08008ab1 	.word	0x08008ab1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d107      	bne.n	8008a78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a68:	f107 030a 	add.w	r3, r7, #10
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fcf3 	bl	800a45c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a76:	e032      	b.n	8008ade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fc7d 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	75fb      	strb	r3, [r7, #23]
          break;
 8008a84:	e02b      	b.n	8008ade <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d107      	bne.n	8008aa2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a92:	f107 030d 	add.w	r3, r7, #13
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fcde 	bl	800a45c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aa0:	e01d      	b.n	8008ade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 fc68 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	75fb      	strb	r3, [r7, #23]
          break;
 8008aae:	e016      	b.n	8008ade <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d00f      	beq.n	8008adc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fc5b 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ac8:	e008      	b.n	8008adc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fc54 	bl	800a37a <USBD_CtlError>
          ret = USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ad6:	e002      	b.n	8008ade <USBD_CDC_Setup+0x19e>
          break;
 8008ad8:	bf00      	nop
 8008ada:	e008      	b.n	8008aee <USBD_CDC_Setup+0x1ae>
          break;
 8008adc:	bf00      	nop
      }
      break;
 8008ade:	e006      	b.n	8008aee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 fc49 	bl	800a37a <USBD_CtlError>
      ret = USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	75fb      	strb	r3, [r7, #23]
      break;
 8008aec:	bf00      	nop
  }

  return (uint8_t)ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	32b0      	adds	r2, #176	; 0xb0
 8008b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e065      	b.n	8008bee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	32b0      	adds	r2, #176	; 0xb0
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	f003 020f 	and.w	r2, r3, #15
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	440b      	add	r3, r1
 8008b44:	3318      	adds	r3, #24
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d02f      	beq.n	8008bac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3318      	adds	r3, #24
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f003 010f 	and.w	r1, r3, #15
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	440b      	add	r3, r1
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4403      	add	r3, r0
 8008b74:	331c      	adds	r3, #28
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d112      	bne.n	8008bac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 020f 	and.w	r2, r3, #15
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	440b      	add	r3, r1
 8008b98:	3318      	adds	r3, #24
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b9e:	78f9      	ldrb	r1, [r7, #3]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f002 f934 	bl	800ae12 <USBD_LL_Transmit>
 8008baa:	e01f      	b.n	8008bec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	33b0      	adds	r3, #176	; 0xb0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	33b0      	adds	r3, #176	; 0xb0
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	32b0      	adds	r2, #176	; 0xb0
 8008c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	32b0      	adds	r2, #176	; 0xb0
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e01a      	b.n	8008c5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f002 f932 	bl	800ae96 <USBD_LL_GetRxDataSize>
 8008c32:	4602      	mov	r2, r0
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	33b0      	adds	r3, #176	; 0xb0
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	32b0      	adds	r2, #176	; 0xb0
 8008c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e025      	b.n	8008cd4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	33b0      	adds	r3, #176	; 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01a      	beq.n	8008cd2 <USBD_CDC_EP0_RxReady+0x6c>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ca2:	2bff      	cmp	r3, #255	; 0xff
 8008ca4:	d015      	beq.n	8008cd2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	33b0      	adds	r3, #176	; 0xb0
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008cbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	22ff      	movs	r2, #255	; 0xff
 8008cce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ce4:	2182      	movs	r1, #130	; 0x82
 8008ce6:	4818      	ldr	r0, [pc, #96]	; (8008d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ce8:	f000 fd0f 	bl	800970a <USBD_GetEpDesc>
 8008cec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cee:	2101      	movs	r1, #1
 8008cf0:	4815      	ldr	r0, [pc, #84]	; (8008d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cf2:	f000 fd0a 	bl	800970a <USBD_GetEpDesc>
 8008cf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cf8:	2181      	movs	r1, #129	; 0x81
 8008cfa:	4813      	ldr	r0, [pc, #76]	; (8008d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cfc:	f000 fd05 	bl	800970a <USBD_GetEpDesc>
 8008d00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d006      	beq.n	8008d22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1c:	711a      	strb	r2, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d30:	711a      	strb	r2, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2243      	movs	r2, #67	; 0x43
 8008d3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000080 	.word	0x20000080

08008d4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d54:	2182      	movs	r1, #130	; 0x82
 8008d56:	4818      	ldr	r0, [pc, #96]	; (8008db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d58:	f000 fcd7 	bl	800970a <USBD_GetEpDesc>
 8008d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4815      	ldr	r0, [pc, #84]	; (8008db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d62:	f000 fcd2 	bl	800970a <USBD_GetEpDesc>
 8008d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d68:	2181      	movs	r1, #129	; 0x81
 8008d6a:	4813      	ldr	r0, [pc, #76]	; (8008db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d6c:	f000 fccd 	bl	800970a <USBD_GetEpDesc>
 8008d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2210      	movs	r2, #16
 8008d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d006      	beq.n	8008d92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2200      	movs	r2, #0
 8008d88:	711a      	strb	r2, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f042 0202 	orr.w	r2, r2, #2
 8008d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d006      	beq.n	8008da6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	711a      	strb	r2, [r3, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f042 0202 	orr.w	r2, r2, #2
 8008da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2243      	movs	r2, #67	; 0x43
 8008daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000080 	.word	0x20000080

08008dbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008dc4:	2182      	movs	r1, #130	; 0x82
 8008dc6:	4818      	ldr	r0, [pc, #96]	; (8008e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dc8:	f000 fc9f 	bl	800970a <USBD_GetEpDesc>
 8008dcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4815      	ldr	r0, [pc, #84]	; (8008e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dd2:	f000 fc9a 	bl	800970a <USBD_GetEpDesc>
 8008dd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dd8:	2181      	movs	r1, #129	; 0x81
 8008dda:	4813      	ldr	r0, [pc, #76]	; (8008e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ddc:	f000 fc95 	bl	800970a <USBD_GetEpDesc>
 8008de0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2210      	movs	r2, #16
 8008dec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dfc:	711a      	strb	r2, [r3, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e10:	711a      	strb	r2, [r3, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2243      	movs	r2, #67	; 0x43
 8008e1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000080 	.word	0x20000080

08008e2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	220a      	movs	r2, #10
 8008e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e3a:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	2000003c 	.word	0x2000003c

08008e4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e009      	b.n	8008e74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	33b0      	adds	r3, #176	; 0xb0
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	32b0      	adds	r2, #176	; 0xb0
 8008e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e008      	b.n	8008eb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32b0      	adds	r2, #176	; 0xb0
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e004      	b.n	8008ef2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
	...

08008f00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	; 0xb0
 8008f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32b0      	adds	r2, #176	; 0xb0
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e018      	b.n	8008f60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7c1b      	ldrb	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <USBD_CDC_ReceivePacket+0x68>)
 8008f38:	7819      	ldrb	r1, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 ff85 	bl	800ae54 <USBD_LL_PrepareReceive>
 8008f4a:	e008      	b.n	8008f5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <USBD_CDC_ReceivePacket+0x68>)
 8008f4e:	7819      	ldrb	r1, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 ff7b 	bl	800ae54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200000c4 	.word	0x200000c4

08008f6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e01f      	b.n	8008fc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	79fa      	ldrb	r2, [r7, #7]
 8008fb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f001 fdf5 	bl	800aba8 <USBD_LL_Init>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e025      	b.n	8009030 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32ae      	adds	r2, #174	; 0xae
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32ae      	adds	r2, #174	; 0xae
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f107 020e 	add.w	r2, r7, #14
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 fdfd 	bl	800ac40 <USBD_LL_Start>
 8009046:	4603      	mov	r3, r0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	4611      	mov	r1, r2
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f90e 	bl	800a306 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090f8:	461a      	mov	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2b02      	cmp	r3, #2
 800910c:	d01a      	beq.n	8009144 <USBD_LL_SetupStage+0x72>
 800910e:	2b02      	cmp	r3, #2
 8009110:	d822      	bhi.n	8009158 <USBD_LL_SetupStage+0x86>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <USBD_LL_SetupStage+0x4a>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d00a      	beq.n	8009130 <USBD_LL_SetupStage+0x5e>
 800911a:	e01d      	b.n	8009158 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fb65 	bl	80097f4 <USBD_StdDevReq>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	e020      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fbcd 	bl	80098d8 <USBD_StdItfReq>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
      break;
 8009142:	e016      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc2f 	bl	80099b0 <USBD_StdEPReq>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
      break;
 8009156:	e00c      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800915e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009162:	b2db      	uxtb	r3, r3
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fdca 	bl	800ad00 <USBD_LL_StallEP>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	bf00      	nop
  }

  return ret;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	460b      	mov	r3, r1
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d16e      	bne.n	8009272 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800919a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	f040 8098 	bne.w	80092d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d913      	bls.n	80091dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4293      	cmp	r3, r2
 80091cc:	bf28      	it	cs
 80091ce:	4613      	movcs	r3, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f001 f98a 	bl	800a4ee <USBD_CtlContinueRx>
 80091da:	e07d      	b.n	80092d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d014      	beq.n	8009214 <USBD_LL_DataOutStage+0x98>
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d81d      	bhi.n	800922a <USBD_LL_DataOutStage+0xae>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <USBD_LL_DataOutStage+0x7c>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d003      	beq.n	80091fe <USBD_LL_DataOutStage+0x82>
 80091f6:	e018      	b.n	800922a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75bb      	strb	r3, [r7, #22]
            break;
 80091fc:	e018      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fa64 	bl	80096d6 <USBD_CoreFindIF>
 800920e:	4603      	mov	r3, r0
 8009210:	75bb      	strb	r3, [r7, #22]
            break;
 8009212:	e00d      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800921a:	b2db      	uxtb	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fa66 	bl	80096f0 <USBD_CoreFindEP>
 8009224:	4603      	mov	r3, r0
 8009226:	75bb      	strb	r3, [r7, #22]
            break;
 8009228:	e002      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	75bb      	strb	r3, [r7, #22]
            break;
 800922e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009230:	7dbb      	ldrb	r3, [r7, #22]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d119      	bne.n	800926a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b03      	cmp	r3, #3
 8009240:	d113      	bne.n	800926a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009242:	7dba      	ldrb	r2, [r7, #22]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	32ae      	adds	r2, #174	; 0xae
 8009248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009252:	7dba      	ldrb	r2, [r7, #22]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800925a:	7dba      	ldrb	r2, [r7, #22]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	32ae      	adds	r2, #174	; 0xae
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f001 f950 	bl	800a510 <USBD_CtlSendStatus>
 8009270:	e032      	b.n	80092d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009278:	b2db      	uxtb	r3, r3
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa37 	bl	80096f0 <USBD_CoreFindEP>
 8009282:	4603      	mov	r3, r0
 8009284:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009286:	7dbb      	ldrb	r3, [r7, #22]
 8009288:	2bff      	cmp	r3, #255	; 0xff
 800928a:	d025      	beq.n	80092d8 <USBD_LL_DataOutStage+0x15c>
 800928c:	7dbb      	ldrb	r3, [r7, #22]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d122      	bne.n	80092d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b03      	cmp	r3, #3
 800929c:	d117      	bne.n	80092ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800929e:	7dba      	ldrb	r2, [r7, #22]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	32ae      	adds	r2, #174	; 0xae
 80092a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00f      	beq.n	80092ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092ae:	7dba      	ldrb	r2, [r7, #22]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092b6:	7dba      	ldrb	r2, [r7, #22]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	32ae      	adds	r2, #174	; 0xae
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	7afa      	ldrb	r2, [r7, #11]
 80092c4:	4611      	mov	r1, r2
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	e000      	b.n	80092da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	460b      	mov	r3, r1
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d16f      	bne.n	80093d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3314      	adds	r3, #20
 80092fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009302:	2b02      	cmp	r3, #2
 8009304:	d15a      	bne.n	80093bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d914      	bls.n	800933c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	461a      	mov	r2, r3
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f001 f8b2 	bl	800a492 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f001 fd8d 	bl	800ae54 <USBD_LL_PrepareReceive>
 800933a:	e03f      	b.n	80093bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d11c      	bne.n	8009382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009350:	429a      	cmp	r2, r3
 8009352:	d316      	bcc.n	8009382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800935e:	429a      	cmp	r2, r3
 8009360:	d20f      	bcs.n	8009382 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 f893 	bl	800a492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009374:	2300      	movs	r3, #0
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f001 fd6a 	bl	800ae54 <USBD_LL_PrepareReceive>
 8009380:	e01c      	b.n	80093bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d10f      	bne.n	80093ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f001 fca5 	bl	800ad00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 f8bd 	bl	800a536 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d03a      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff fe42 	bl	8009050 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093d4:	e032      	b.n	800943c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	4619      	mov	r1, r3
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f985 	bl	80096f0 <USBD_CoreFindEP>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	d025      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d122      	bne.n	800943c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d11c      	bne.n	800943c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009402:	7dfa      	ldrb	r2, [r7, #23]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	32ae      	adds	r2, #174	; 0xae
 8009408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d014      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009412:	7dfa      	ldrb	r2, [r7, #23]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800941a:	7dfa      	ldrb	r2, [r7, #23]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	32ae      	adds	r2, #174	; 0xae
 8009420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	7afa      	ldrb	r2, [r7, #11]
 8009428:	4611      	mov	r1, r2
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	4798      	blx	r3
 800942e:	4603      	mov	r3, r0
 8009430:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009432:	7dbb      	ldrb	r3, [r7, #22]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009438:	7dbb      	ldrb	r3, [r7, #22]
 800943a:	e000      	b.n	800943e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d014      	beq.n	80094ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6852      	ldr	r2, [r2, #4]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	4611      	mov	r1, r2
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fbdf 	bl	800ac76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	2200      	movs	r2, #0
 80094cc:	2180      	movs	r1, #128	; 0x80
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 fbd1 	bl	800ac76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2240      	movs	r2, #64	; 0x40
 80094de:	621a      	str	r2, [r3, #32]

  return ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b04      	cmp	r3, #4
 800951c:	d006      	beq.n	800952c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009524:	b2da      	uxtb	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2204      	movs	r2, #4
 8009530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b04      	cmp	r3, #4
 8009554:	d106      	bne.n	8009564 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d110      	bne.n	80095a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	32ae      	adds	r2, #174	; 0xae
 80095c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e01c      	b.n	800960e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d115      	bne.n	800960c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32ae      	adds	r2, #174	; 0xae
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	32ae      	adds	r2, #174	; 0xae
 80095fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32ae      	adds	r2, #174	; 0xae
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e01c      	b.n	8009672 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b03      	cmp	r3, #3
 8009642:	d115      	bne.n	8009670 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	; 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32ae      	adds	r2, #174	; 0xae
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6852      	ldr	r2, [r2, #4]
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	4611      	mov	r1, r2
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b086      	sub	sp, #24
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	885b      	ldrh	r3, [r3, #2]
 8009726:	b29a      	uxth	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	429a      	cmp	r2, r3
 8009730:	d920      	bls.n	8009774 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800973a:	e013      	b.n	8009764 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800973c:	f107 030a 	add.w	r3, r7, #10
 8009740:	4619      	mov	r1, r3
 8009742:	6978      	ldr	r0, [r7, #20]
 8009744:	f000 f81b 	bl	800977e <USBD_GetNextDesc>
 8009748:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b05      	cmp	r3, #5
 8009750:	d108      	bne.n	8009764 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	789b      	ldrb	r3, [r3, #2]
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	429a      	cmp	r2, r3
 800975e:	d008      	beq.n	8009772 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009760:	2300      	movs	r3, #0
 8009762:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	885b      	ldrh	r3, [r3, #2]
 8009768:	b29a      	uxth	r2, r3
 800976a:	897b      	ldrh	r3, [r7, #10]
 800976c:	429a      	cmp	r2, r3
 800976e:	d8e5      	bhi.n	800973c <USBD_GetEpDesc+0x32>
 8009770:	e000      	b.n	8009774 <USBD_GetEpDesc+0x6a>
          break;
 8009772:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009774:	693b      	ldr	r3, [r7, #16]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	881a      	ldrh	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	4413      	add	r3, r2
 8009798:	b29a      	uxth	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097aa:	68fb      	ldr	r3, [r7, #12]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	3301      	adds	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097d6:	8a3b      	ldrh	r3, [r7, #16]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	b21a      	sxth	r2, r3
 80097dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097e6:	89fb      	ldrh	r3, [r7, #14]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d005      	beq.n	800981a <USBD_StdDevReq+0x26>
 800980e:	2b40      	cmp	r3, #64	; 0x40
 8009810:	d857      	bhi.n	80098c2 <USBD_StdDevReq+0xce>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00f      	beq.n	8009836 <USBD_StdDevReq+0x42>
 8009816:	2b20      	cmp	r3, #32
 8009818:	d153      	bne.n	80098c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	32ae      	adds	r2, #174	; 0xae
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	4798      	blx	r3
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	e04a      	b.n	80098cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	2b09      	cmp	r3, #9
 800983c:	d83b      	bhi.n	80098b6 <USBD_StdDevReq+0xc2>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <USBD_StdDevReq+0x50>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009899 	.word	0x08009899
 8009848:	080098ad 	.word	0x080098ad
 800984c:	080098b7 	.word	0x080098b7
 8009850:	080098a3 	.word	0x080098a3
 8009854:	080098b7 	.word	0x080098b7
 8009858:	08009877 	.word	0x08009877
 800985c:	0800986d 	.word	0x0800986d
 8009860:	080098b7 	.word	0x080098b7
 8009864:	0800988f 	.word	0x0800988f
 8009868:	08009881 	.word	0x08009881
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa3c 	bl	8009cec <USBD_GetDescriptor>
          break;
 8009874:	e024      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fba1 	bl	8009fc0 <USBD_SetAddress>
          break;
 800987e:	e01f      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fbe0 	bl	800a048 <USBD_SetConfig>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
          break;
 800988c:	e018      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc83 	bl	800a19c <USBD_GetConfig>
          break;
 8009896:	e013      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fcb4 	bl	800a208 <USBD_GetStatus>
          break;
 80098a0:	e00e      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fce3 	bl	800a270 <USBD_SetFeature>
          break;
 80098aa:	e009      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fd07 	bl	800a2c2 <USBD_ClrFeature>
          break;
 80098b4:	e004      	b.n	80098c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fd5e 	bl	800a37a <USBD_CtlError>
          break;
 80098be:	bf00      	nop
      }
      break;
 80098c0:	e004      	b.n	80098cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fd58 	bl	800a37a <USBD_CtlError>
      break;
 80098ca:	bf00      	nop
  }

  return ret;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop

080098d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d005      	beq.n	80098fe <USBD_StdItfReq+0x26>
 80098f2:	2b40      	cmp	r3, #64	; 0x40
 80098f4:	d852      	bhi.n	800999c <USBD_StdItfReq+0xc4>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <USBD_StdItfReq+0x26>
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d14e      	bne.n	800999c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009904:	b2db      	uxtb	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	2b02      	cmp	r3, #2
 800990a:	d840      	bhi.n	800998e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	889b      	ldrh	r3, [r3, #4]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b01      	cmp	r3, #1
 8009914:	d836      	bhi.n	8009984 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	889b      	ldrh	r3, [r3, #4]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff fed9 	bl	80096d6 <USBD_CoreFindIF>
 8009924:	4603      	mov	r3, r0
 8009926:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2bff      	cmp	r3, #255	; 0xff
 800992c:	d01d      	beq.n	800996a <USBD_StdItfReq+0x92>
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d11a      	bne.n	800996a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009934:	7bba      	ldrb	r2, [r7, #14]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32ae      	adds	r2, #174	; 0xae
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00f      	beq.n	8009964 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009944:	7bba      	ldrb	r2, [r7, #14]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800994c:	7bba      	ldrb	r2, [r7, #14]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32ae      	adds	r2, #174	; 0xae
 8009952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009962:	e004      	b.n	800996e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009968:	e001      	b.n	800996e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d110      	bne.n	8009998 <USBD_StdItfReq+0xc0>
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10d      	bne.n	8009998 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fdc7 	bl	800a510 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009982:	e009      	b.n	8009998 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fcf7 	bl	800a37a <USBD_CtlError>
          break;
 800998c:	e004      	b.n	8009998 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fcf2 	bl	800a37a <USBD_CtlError>
          break;
 8009996:	e000      	b.n	800999a <USBD_StdItfReq+0xc2>
          break;
 8009998:	bf00      	nop
      }
      break;
 800999a:	e004      	b.n	80099a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fceb 	bl	800a37a <USBD_CtlError>
      break;
 80099a4:	bf00      	nop
  }

  return ret;
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	889b      	ldrh	r3, [r3, #4]
 80099c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d007      	beq.n	80099e0 <USBD_StdEPReq+0x30>
 80099d0:	2b40      	cmp	r3, #64	; 0x40
 80099d2:	f200 817f 	bhi.w	8009cd4 <USBD_StdEPReq+0x324>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d02a      	beq.n	8009a30 <USBD_StdEPReq+0x80>
 80099da:	2b20      	cmp	r3, #32
 80099dc:	f040 817a 	bne.w	8009cd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff fe83 	bl	80096f0 <USBD_CoreFindEP>
 80099ea:	4603      	mov	r3, r0
 80099ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099ee:	7b7b      	ldrb	r3, [r7, #13]
 80099f0:	2bff      	cmp	r3, #255	; 0xff
 80099f2:	f000 8174 	beq.w	8009cde <USBD_StdEPReq+0x32e>
 80099f6:	7b7b      	ldrb	r3, [r7, #13]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f040 8170 	bne.w	8009cde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099fe:	7b7a      	ldrb	r2, [r7, #13]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a06:	7b7a      	ldrb	r2, [r7, #13]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	32ae      	adds	r2, #174	; 0xae
 8009a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 8163 	beq.w	8009cde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a18:	7b7a      	ldrb	r2, [r7, #13]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	32ae      	adds	r2, #174	; 0xae
 8009a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a2e:	e156      	b.n	8009cde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d008      	beq.n	8009a4a <USBD_StdEPReq+0x9a>
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	f300 8145 	bgt.w	8009cc8 <USBD_StdEPReq+0x318>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 809b 	beq.w	8009b7a <USBD_StdEPReq+0x1ca>
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d03c      	beq.n	8009ac2 <USBD_StdEPReq+0x112>
 8009a48:	e13e      	b.n	8009cc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d002      	beq.n	8009a5c <USBD_StdEPReq+0xac>
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d016      	beq.n	8009a88 <USBD_StdEPReq+0xd8>
 8009a5a:	e02c      	b.n	8009ab6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00d      	beq.n	8009a7e <USBD_StdEPReq+0xce>
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d00a      	beq.n	8009a7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f001 f947 	bl	800ad00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a72:	2180      	movs	r1, #128	; 0x80
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f001 f943 	bl	800ad00 <USBD_LL_StallEP>
 8009a7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a7c:	e020      	b.n	8009ac0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc7a 	bl	800a37a <USBD_CtlError>
              break;
 8009a86:	e01b      	b.n	8009ac0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	885b      	ldrh	r3, [r3, #2]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10e      	bne.n	8009aae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00b      	beq.n	8009aae <USBD_StdEPReq+0xfe>
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b80      	cmp	r3, #128	; 0x80
 8009a9a:	d008      	beq.n	8009aae <USBD_StdEPReq+0xfe>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	88db      	ldrh	r3, [r3, #6]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f929 	bl	800ad00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fd2e 	bl	800a510 <USBD_CtlSendStatus>

              break;
 8009ab4:	e004      	b.n	8009ac0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fc5e 	bl	800a37a <USBD_CtlError>
              break;
 8009abe:	bf00      	nop
          }
          break;
 8009ac0:	e107      	b.n	8009cd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d002      	beq.n	8009ad4 <USBD_StdEPReq+0x124>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d016      	beq.n	8009b00 <USBD_StdEPReq+0x150>
 8009ad2:	e04b      	b.n	8009b6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <USBD_StdEPReq+0x146>
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	2b80      	cmp	r3, #128	; 0x80
 8009ade:	d00a      	beq.n	8009af6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f90b 	bl	800ad00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aea:	2180      	movs	r1, #128	; 0x80
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 f907 	bl	800ad00 <USBD_LL_StallEP>
 8009af2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009af4:	e040      	b.n	8009b78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fc3e 	bl	800a37a <USBD_CtlError>
              break;
 8009afe:	e03b      	b.n	8009b78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	885b      	ldrh	r3, [r3, #2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d136      	bne.n	8009b76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 f911 	bl	800ad3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fcf7 	bl	800a510 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff fde2 	bl	80096f0 <USBD_CoreFindEP>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b30:	7b7b      	ldrb	r3, [r7, #13]
 8009b32:	2bff      	cmp	r3, #255	; 0xff
 8009b34:	d01f      	beq.n	8009b76 <USBD_StdEPReq+0x1c6>
 8009b36:	7b7b      	ldrb	r3, [r7, #13]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11c      	bne.n	8009b76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b3c:	7b7a      	ldrb	r2, [r7, #13]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b44:	7b7a      	ldrb	r2, [r7, #13]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32ae      	adds	r2, #174	; 0xae
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b54:	7b7a      	ldrb	r2, [r7, #13]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	32ae      	adds	r2, #174	; 0xae
 8009b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b6a:	e004      	b.n	8009b76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fc03 	bl	800a37a <USBD_CtlError>
              break;
 8009b74:	e000      	b.n	8009b78 <USBD_StdEPReq+0x1c8>
              break;
 8009b76:	bf00      	nop
          }
          break;
 8009b78:	e0ab      	b.n	8009cd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d002      	beq.n	8009b8c <USBD_StdEPReq+0x1dc>
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d032      	beq.n	8009bf0 <USBD_StdEPReq+0x240>
 8009b8a:	e097      	b.n	8009cbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <USBD_StdEPReq+0x1f2>
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	2b80      	cmp	r3, #128	; 0x80
 8009b96:	d004      	beq.n	8009ba2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fbed 	bl	800a37a <USBD_CtlError>
                break;
 8009ba0:	e091      	b.n	8009cc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	da0b      	bge.n	8009bc2 <USBD_StdEPReq+0x212>
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	3310      	adds	r3, #16
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	e00b      	b.n	8009bda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	3304      	adds	r3, #4
 8009bda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2202      	movs	r2, #2
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fc37 	bl	800a45c <USBD_CtlSendData>
              break;
 8009bee:	e06a      	b.n	8009cc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da11      	bge.n	8009c1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	f003 020f 	and.w	r2, r3, #15
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	440b      	add	r3, r1
 8009c0a:	3324      	adds	r3, #36	; 0x24
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d117      	bne.n	8009c42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fbb0 	bl	800a37a <USBD_CtlError>
                  break;
 8009c1a:	e054      	b.n	8009cc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	f003 020f 	and.w	r2, r3, #15
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fb9d 	bl	800a37a <USBD_CtlError>
                  break;
 8009c40:	e041      	b.n	8009cc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da0b      	bge.n	8009c62 <USBD_StdEPReq+0x2b2>
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	3310      	adds	r3, #16
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3304      	adds	r3, #4
 8009c60:	e00b      	b.n	8009c7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4413      	add	r3, r2
 8009c78:	3304      	adds	r3, #4
 8009c7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <USBD_StdEPReq+0x2d8>
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b80      	cmp	r3, #128	; 0x80
 8009c86:	d103      	bne.n	8009c90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e00e      	b.n	8009cae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 f871 	bl	800ad7c <USBD_LL_IsStallEP>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	e002      	b.n	8009cae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fbd1 	bl	800a45c <USBD_CtlSendData>
              break;
 8009cba:	e004      	b.n	8009cc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fb5b 	bl	800a37a <USBD_CtlError>
              break;
 8009cc4:	bf00      	nop
          }
          break;
 8009cc6:	e004      	b.n	8009cd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fb55 	bl	800a37a <USBD_CtlError>
          break;
 8009cd0:	bf00      	nop
      }
      break;
 8009cd2:	e005      	b.n	8009ce0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fb4f 	bl	800a37a <USBD_CtlError>
      break;
 8009cdc:	e000      	b.n	8009ce0 <USBD_StdEPReq+0x330>
      break;
 8009cde:	bf00      	nop
  }

  return ret;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	885b      	ldrh	r3, [r3, #2]
 8009d06:	0a1b      	lsrs	r3, r3, #8
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	f200 8128 	bhi.w	8009f62 <USBD_GetDescriptor+0x276>
 8009d12:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <USBD_GetDescriptor+0x2c>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d35 	.word	0x08009d35
 8009d1c:	08009d4d 	.word	0x08009d4d
 8009d20:	08009d8d 	.word	0x08009d8d
 8009d24:	08009f63 	.word	0x08009f63
 8009d28:	08009f63 	.word	0x08009f63
 8009d2c:	08009f03 	.word	0x08009f03
 8009d30:	08009f2f 	.word	0x08009f2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	7c12      	ldrb	r2, [r2, #16]
 8009d40:	f107 0108 	add.w	r1, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
      break;
 8009d4a:	e112      	b.n	8009f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	7c1b      	ldrb	r3, [r3, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10d      	bne.n	8009d70 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	f107 0208 	add.w	r2, r7, #8
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d6e:	e100      	b.n	8009f72 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	f107 0208 	add.w	r2, r7, #8
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	2202      	movs	r2, #2
 8009d88:	701a      	strb	r2, [r3, #0]
      break;
 8009d8a:	e0f2      	b.n	8009f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	f200 80ac 	bhi.w	8009ef0 <USBD_GetDescriptor+0x204>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <USBD_GetDescriptor+0xb4>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db9 	.word	0x08009db9
 8009da4:	08009ded 	.word	0x08009ded
 8009da8:	08009e21 	.word	0x08009e21
 8009dac:	08009e55 	.word	0x08009e55
 8009db0:	08009e89 	.word	0x08009e89
 8009db4:	08009ebd 	.word	0x08009ebd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00b      	beq.n	8009ddc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7c12      	ldrb	r2, [r2, #16]
 8009dd0:	f107 0108 	add.w	r1, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dda:	e091      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 facb 	bl	800a37a <USBD_CtlError>
            err++;
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	3301      	adds	r3, #1
 8009de8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dea:	e089      	b.n	8009f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	7c12      	ldrb	r2, [r2, #16]
 8009e04:	f107 0108 	add.w	r1, r7, #8
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0e:	e077      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fab1 	bl	800a37a <USBD_CtlError>
            err++;
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1e:	e06f      	b.n	8009f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7c12      	ldrb	r2, [r2, #16]
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e42:	e05d      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa97 	bl	800a37a <USBD_CtlError>
            err++;
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	72fb      	strb	r3, [r7, #11]
          break;
 8009e52:	e055      	b.n	8009f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7c12      	ldrb	r2, [r2, #16]
 8009e6c:	f107 0108 	add.w	r1, r7, #8
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e76:	e043      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa7d 	bl	800a37a <USBD_CtlError>
            err++;
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	3301      	adds	r3, #1
 8009e84:	72fb      	strb	r3, [r7, #11]
          break;
 8009e86:	e03b      	b.n	8009f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eaa:	e029      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa63 	bl	800a37a <USBD_CtlError>
            err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eba:	e021      	b.n	8009f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	7c12      	ldrb	r2, [r2, #16]
 8009ed4:	f107 0108 	add.w	r1, r7, #8
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ede:	e00f      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa49 	bl	800a37a <USBD_CtlError>
            err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
          break;
 8009eee:	e007      	b.n	8009f00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa41 	bl	800a37a <USBD_CtlError>
          err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009efe:	bf00      	nop
      }
      break;
 8009f00:	e037      	b.n	8009f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7c1b      	ldrb	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f12:	f107 0208 	add.w	r2, r7, #8
 8009f16:	4610      	mov	r0, r2
 8009f18:	4798      	blx	r3
 8009f1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f1c:	e029      	b.n	8009f72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fa2a 	bl	800a37a <USBD_CtlError>
        err++;
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f2c:	e021      	b.n	8009f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7c1b      	ldrb	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10d      	bne.n	8009f52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	f107 0208 	add.w	r2, r7, #8
 8009f42:	4610      	mov	r0, r2
 8009f44:	4798      	blx	r3
 8009f46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	2207      	movs	r2, #7
 8009f4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f50:	e00f      	b.n	8009f72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa10 	bl	800a37a <USBD_CtlError>
        err++;
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f60:	e007      	b.n	8009f72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa08 	bl	800a37a <USBD_CtlError>
      err++;
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f70:	bf00      	nop
  }

  if (err != 0U)
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11e      	bne.n	8009fb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	88db      	ldrh	r3, [r3, #6]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d016      	beq.n	8009fae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f80:	893b      	ldrh	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00e      	beq.n	8009fa4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	88da      	ldrh	r2, [r3, #6]
 8009f8a:	893b      	ldrh	r3, [r7, #8]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	bf28      	it	cs
 8009f90:	4613      	movcs	r3, r2
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f96:	893b      	ldrh	r3, [r7, #8]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	68f9      	ldr	r1, [r7, #12]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa5d 	bl	800a45c <USBD_CtlSendData>
 8009fa2:	e009      	b.n	8009fb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9e7 	bl	800a37a <USBD_CtlError>
 8009fac:	e004      	b.n	8009fb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 faae 	bl	800a510 <USBD_CtlSendStatus>
 8009fb4:	e000      	b.n	8009fb8 <USBD_GetDescriptor+0x2cc>
    return;
 8009fb6:	bf00      	nop
  }
}
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop

08009fc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	889b      	ldrh	r3, [r3, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d131      	bne.n	800a036 <USBD_SetAddress+0x76>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88db      	ldrh	r3, [r3, #6]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d12d      	bne.n	800a036 <USBD_SetAddress+0x76>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	2b7f      	cmp	r3, #127	; 0x7f
 8009fe0:	d829      	bhi.n	800a036 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	885b      	ldrh	r3, [r3, #2]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d104      	bne.n	800a004 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f9bc 	bl	800a37a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a002:	e01d      	b.n	800a040 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7bfa      	ldrb	r2, [r7, #15]
 800a008:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fedf 	bl	800add4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa7a 	bl	800a510 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02a:	e009      	b.n	800a040 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a034:	e004      	b.n	800a040 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f99e 	bl	800a37a <USBD_CtlError>
  }
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	4b4e      	ldr	r3, [pc, #312]	; (800a198 <USBD_SetConfig+0x150>)
 800a05e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a060:	4b4d      	ldr	r3, [pc, #308]	; (800a198 <USBD_SetConfig+0x150>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d905      	bls.n	800a074 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f985 	bl	800a37a <USBD_CtlError>
    return USBD_FAIL;
 800a070:	2303      	movs	r3, #3
 800a072:	e08c      	b.n	800a18e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d002      	beq.n	800a086 <USBD_SetConfig+0x3e>
 800a080:	2b03      	cmp	r3, #3
 800a082:	d029      	beq.n	800a0d8 <USBD_SetConfig+0x90>
 800a084:	e075      	b.n	800a172 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a086:	4b44      	ldr	r3, [pc, #272]	; (800a198 <USBD_SetConfig+0x150>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d020      	beq.n	800a0d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a08e:	4b42      	ldr	r3, [pc, #264]	; (800a198 <USBD_SetConfig+0x150>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a098:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <USBD_SetConfig+0x150>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7fe ffe1 	bl	8009066 <USBD_SetClassConfig>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d008      	beq.n	800a0c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f962 	bl	800a37a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0be:	e065      	b.n	800a18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa25 	bl	800a510 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0ce:	e05d      	b.n	800a18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fa1d 	bl	800a510 <USBD_CtlSendStatus>
      break;
 800a0d6:	e059      	b.n	800a18c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0d8:	4b2f      	ldr	r3, [pc, #188]	; (800a198 <USBD_SetConfig+0x150>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d112      	bne.n	800a106 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0e8:	4b2b      	ldr	r3, [pc, #172]	; (800a198 <USBD_SetConfig+0x150>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0f2:	4b29      	ldr	r3, [pc, #164]	; (800a198 <USBD_SetConfig+0x150>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7fe ffd0 	bl	800909e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa06 	bl	800a510 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a104:	e042      	b.n	800a18c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a106:	4b24      	ldr	r3, [pc, #144]	; (800a198 <USBD_SetConfig+0x150>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d02a      	beq.n	800a16a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7fe ffbe 	bl	800909e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a122:	4b1d      	ldr	r3, [pc, #116]	; (800a198 <USBD_SetConfig+0x150>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a12c:	4b1a      	ldr	r3, [pc, #104]	; (800a198 <USBD_SetConfig+0x150>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fe ff97 	bl	8009066 <USBD_SetClassConfig>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00f      	beq.n	800a162 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f918 	bl	800a37a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7fe ffa3 	bl	800909e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a160:	e014      	b.n	800a18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9d4 	bl	800a510 <USBD_CtlSendStatus>
      break;
 800a168:	e010      	b.n	800a18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f9d0 	bl	800a510 <USBD_CtlSendStatus>
      break;
 800a170:	e00c      	b.n	800a18c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f900 	bl	800a37a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a17a:	4b07      	ldr	r3, [pc, #28]	; (800a198 <USBD_SetConfig+0x150>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7fe ff8c 	bl	800909e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a186:	2303      	movs	r3, #3
 800a188:	73fb      	strb	r3, [r7, #15]
      break;
 800a18a:	bf00      	nop
  }

  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	200004b0 	.word	0x200004b0

0800a19c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	88db      	ldrh	r3, [r3, #6]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d004      	beq.n	800a1b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f8e2 	bl	800a37a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1b6:	e023      	b.n	800a200 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	dc02      	bgt.n	800a1ca <USBD_GetConfig+0x2e>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc03      	bgt.n	800a1d0 <USBD_GetConfig+0x34>
 800a1c8:	e015      	b.n	800a1f6 <USBD_GetConfig+0x5a>
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d00b      	beq.n	800a1e6 <USBD_GetConfig+0x4a>
 800a1ce:	e012      	b.n	800a1f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f93c 	bl	800a45c <USBD_CtlSendData>
        break;
 800a1e4:	e00c      	b.n	800a200 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f934 	bl	800a45c <USBD_CtlSendData>
        break;
 800a1f4:	e004      	b.n	800a200 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f8be 	bl	800a37a <USBD_CtlError>
        break;
 800a1fe:	bf00      	nop
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d81e      	bhi.n	800a25e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	88db      	ldrh	r3, [r3, #6]
 800a224:	2b02      	cmp	r3, #2
 800a226:	d004      	beq.n	800a232 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f8a5 	bl	800a37a <USBD_CtlError>
        break;
 800a230:	e01a      	b.n	800a268 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f043 0202 	orr.w	r2, r3, #2
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	330c      	adds	r3, #12
 800a252:	2202      	movs	r2, #2
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f900 	bl	800a45c <USBD_CtlSendData>
      break;
 800a25c:	e004      	b.n	800a268 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f88a 	bl	800a37a <USBD_CtlError>
      break;
 800a266:	bf00      	nop
  }
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	885b      	ldrh	r3, [r3, #2]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d107      	bne.n	800a292 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f940 	bl	800a510 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a290:	e013      	b.n	800a2ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d10b      	bne.n	800a2b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	889b      	ldrh	r3, [r3, #4]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f930 	bl	800a510 <USBD_CtlSendStatus>
}
 800a2b0:	e003      	b.n	800a2ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f860 	bl	800a37a <USBD_CtlError>
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d80b      	bhi.n	800a2f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d10c      	bne.n	800a2fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f910 	bl	800a510 <USBD_CtlSendStatus>
      }
      break;
 800a2f0:	e004      	b.n	800a2fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f840 	bl	800a37a <USBD_CtlError>
      break;
 800a2fa:	e000      	b.n	800a2fe <USBD_ClrFeature+0x3c>
      break;
 800a2fc:	bf00      	nop
  }
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3301      	adds	r3, #1
 800a32e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff fa41 	bl	80097b8 <SWAPBYTE>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fa34 	bl	80097b8 <SWAPBYTE>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3301      	adds	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fa27 	bl	80097b8 <SWAPBYTE>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	80da      	strh	r2, [r3, #6]
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fcba 	bl	800ad00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fcb6 	bl	800ad00 <USBD_LL_StallEP>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d036      	beq.n	800a420 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3b6:	6938      	ldr	r0, [r7, #16]
 800a3b8:	f000 f836 	bl	800a428 <USBD_GetLen>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	3301      	adds	r3, #1
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	7812      	ldrb	r2, [r2, #0]
 800a3d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3ec:	e013      	b.n	800a416 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	7812      	ldrb	r2, [r2, #0]
 800a3f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	613b      	str	r3, [r7, #16]
    idx++;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	3301      	adds	r3, #1
 800a404:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	3301      	adds	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e7      	bne.n	800a3ee <USBD_GetString+0x52>
 800a41e:	e000      	b.n	800a422 <USBD_GetString+0x86>
    return;
 800a420:	bf00      	nop
  }
}
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a438:	e005      	b.n	800a446 <USBD_GetLen+0x1e>
  {
    len++;
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	3301      	adds	r3, #1
 800a43e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	3301      	adds	r3, #1
 800a444:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f5      	bne.n	800a43a <USBD_GetLen+0x12>
  }

  return len;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	2100      	movs	r1, #0
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fcc5 	bl	800ae12 <USBD_LL_Transmit>

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 fcb4 	bl	800ae12 <USBD_LL_Transmit>

  return USBD_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	2100      	movs	r1, #0
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fcb8 	bl	800ae54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	2100      	movs	r1, #0
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 fca7 	bl	800ae54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2204      	movs	r2, #4
 800a51c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fc73 	bl	800ae12 <USBD_LL_Transmit>

  return USBD_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2205      	movs	r2, #5
 800a542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a546:	2300      	movs	r3, #0
 800a548:	2200      	movs	r2, #0
 800a54a:	2100      	movs	r1, #0
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc81 	bl	800ae54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a560:	2200      	movs	r2, #0
 800a562:	4912      	ldr	r1, [pc, #72]	; (800a5ac <MX_USB_DEVICE_Init+0x50>)
 800a564:	4812      	ldr	r0, [pc, #72]	; (800a5b0 <MX_USB_DEVICE_Init+0x54>)
 800a566:	f7fe fd01 	bl	8008f6c <USBD_Init>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a570:	f7f6 ff04 	bl	800137c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a574:	490f      	ldr	r1, [pc, #60]	; (800a5b4 <MX_USB_DEVICE_Init+0x58>)
 800a576:	480e      	ldr	r0, [pc, #56]	; (800a5b0 <MX_USB_DEVICE_Init+0x54>)
 800a578:	f7fe fd28 	bl	8008fcc <USBD_RegisterClass>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a582:	f7f6 fefb 	bl	800137c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a586:	490c      	ldr	r1, [pc, #48]	; (800a5b8 <MX_USB_DEVICE_Init+0x5c>)
 800a588:	4809      	ldr	r0, [pc, #36]	; (800a5b0 <MX_USB_DEVICE_Init+0x54>)
 800a58a:	f7fe fc5f 	bl	8008e4c <USBD_CDC_RegisterInterface>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a594:	f7f6 fef2 	bl	800137c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a598:	4805      	ldr	r0, [pc, #20]	; (800a5b0 <MX_USB_DEVICE_Init+0x54>)
 800a59a:	f7fe fd4d 	bl	8009038 <USBD_Start>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5a4:	f7f6 feea 	bl	800137c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	200000dc 	.word	0x200000dc
 800a5b0:	200004b4 	.word	0x200004b4
 800a5b4:	20000048 	.word	0x20000048
 800a5b8:	200000c8 	.word	0x200000c8

0800a5bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4905      	ldr	r1, [pc, #20]	; (800a5d8 <CDC_Init_FS+0x1c>)
 800a5c4:	4805      	ldr	r0, [pc, #20]	; (800a5dc <CDC_Init_FS+0x20>)
 800a5c6:	f7fe fc5b 	bl	8008e80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5ca:	4905      	ldr	r1, [pc, #20]	; (800a5e0 <CDC_Init_FS+0x24>)
 800a5cc:	4803      	ldr	r0, [pc, #12]	; (800a5dc <CDC_Init_FS+0x20>)
 800a5ce:	f7fe fc79 	bl	8008ec4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000f90 	.word	0x20000f90
 800a5dc:	200004b4 	.word	0x200004b4
 800a5e0:	20000790 	.word	0x20000790

0800a5e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
 800a600:	4613      	mov	r3, r2
 800a602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b23      	cmp	r3, #35	; 0x23
 800a608:	d84a      	bhi.n	800a6a0 <CDC_Control_FS+0xac>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <CDC_Control_FS+0x1c>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a6a1 	.word	0x0800a6a1
 800a614:	0800a6a1 	.word	0x0800a6a1
 800a618:	0800a6a1 	.word	0x0800a6a1
 800a61c:	0800a6a1 	.word	0x0800a6a1
 800a620:	0800a6a1 	.word	0x0800a6a1
 800a624:	0800a6a1 	.word	0x0800a6a1
 800a628:	0800a6a1 	.word	0x0800a6a1
 800a62c:	0800a6a1 	.word	0x0800a6a1
 800a630:	0800a6a1 	.word	0x0800a6a1
 800a634:	0800a6a1 	.word	0x0800a6a1
 800a638:	0800a6a1 	.word	0x0800a6a1
 800a63c:	0800a6a1 	.word	0x0800a6a1
 800a640:	0800a6a1 	.word	0x0800a6a1
 800a644:	0800a6a1 	.word	0x0800a6a1
 800a648:	0800a6a1 	.word	0x0800a6a1
 800a64c:	0800a6a1 	.word	0x0800a6a1
 800a650:	0800a6a1 	.word	0x0800a6a1
 800a654:	0800a6a1 	.word	0x0800a6a1
 800a658:	0800a6a1 	.word	0x0800a6a1
 800a65c:	0800a6a1 	.word	0x0800a6a1
 800a660:	0800a6a1 	.word	0x0800a6a1
 800a664:	0800a6a1 	.word	0x0800a6a1
 800a668:	0800a6a1 	.word	0x0800a6a1
 800a66c:	0800a6a1 	.word	0x0800a6a1
 800a670:	0800a6a1 	.word	0x0800a6a1
 800a674:	0800a6a1 	.word	0x0800a6a1
 800a678:	0800a6a1 	.word	0x0800a6a1
 800a67c:	0800a6a1 	.word	0x0800a6a1
 800a680:	0800a6a1 	.word	0x0800a6a1
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	0800a6a1 	.word	0x0800a6a1
 800a68c:	0800a6a1 	.word	0x0800a6a1
 800a690:	0800a6a1 	.word	0x0800a6a1
 800a694:	0800a6a1 	.word	0x0800a6a1
 800a698:	0800a6a1 	.word	0x0800a6a1
 800a69c:	0800a6a1 	.word	0x0800a6a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6a0:	bf00      	nop
  }

  return (USBD_OK);
 800a6a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	4805      	ldr	r0, [pc, #20]	; (800a6d4 <CDC_Receive_FS+0x24>)
 800a6be:	f7fe fc01 	bl	8008ec4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6c2:	4804      	ldr	r0, [pc, #16]	; (800a6d4 <CDC_Receive_FS+0x24>)
 800a6c4:	f7fe fc1c 	bl	8008f00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	200004b4 	.word	0x200004b4

0800a6d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	6039      	str	r1, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2212      	movs	r2, #18
 800a70c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a70e:	4b03      	ldr	r3, [pc, #12]	; (800a71c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	200000f8 	.word	0x200000f8

0800a720 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2204      	movs	r2, #4
 800a730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a732:	4b03      	ldr	r3, [pc, #12]	; (800a740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a734:	4618      	mov	r0, r3
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	2000010c 	.word	0x2000010c

0800a744 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a750:	79fb      	ldrb	r3, [r7, #7]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d105      	bne.n	800a762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	4907      	ldr	r1, [pc, #28]	; (800a778 <USBD_FS_ProductStrDescriptor+0x34>)
 800a75a:	4808      	ldr	r0, [pc, #32]	; (800a77c <USBD_FS_ProductStrDescriptor+0x38>)
 800a75c:	f7ff fe1e 	bl	800a39c <USBD_GetString>
 800a760:	e004      	b.n	800a76c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4904      	ldr	r1, [pc, #16]	; (800a778 <USBD_FS_ProductStrDescriptor+0x34>)
 800a766:	4805      	ldr	r0, [pc, #20]	; (800a77c <USBD_FS_ProductStrDescriptor+0x38>)
 800a768:	f7ff fe18 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a76c:	4b02      	ldr	r3, [pc, #8]	; (800a778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20001790 	.word	0x20001790
 800a77c:	0800b8f8 	.word	0x0800b8f8

0800a780 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	4904      	ldr	r1, [pc, #16]	; (800a7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a790:	4804      	ldr	r0, [pc, #16]	; (800a7a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a792:	f7ff fe03 	bl	800a39c <USBD_GetString>
  return USBD_StrDesc;
 800a796:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20001790 	.word	0x20001790
 800a7a4:	0800b910 	.word	0x0800b910

0800a7a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	221a      	movs	r2, #26
 800a7b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7ba:	f000 f843 	bl	800a844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7be:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000110 	.word	0x20000110

0800a7cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7d8:	79fb      	ldrb	r3, [r7, #7]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d105      	bne.n	800a7ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	4907      	ldr	r1, [pc, #28]	; (800a800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7e2:	4808      	ldr	r0, [pc, #32]	; (800a804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7e4:	f7ff fdda 	bl	800a39c <USBD_GetString>
 800a7e8:	e004      	b.n	800a7f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4904      	ldr	r1, [pc, #16]	; (800a800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ee:	4805      	ldr	r0, [pc, #20]	; (800a804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7f0:	f7ff fdd4 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f4:	4b02      	ldr	r3, [pc, #8]	; (800a800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001790 	.word	0x20001790
 800a804:	0800b924 	.word	0x0800b924

0800a808 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	6039      	str	r1, [r7, #0]
 800a812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	4907      	ldr	r1, [pc, #28]	; (800a83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a81e:	4808      	ldr	r0, [pc, #32]	; (800a840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a820:	f7ff fdbc 	bl	800a39c <USBD_GetString>
 800a824:	e004      	b.n	800a830 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	4904      	ldr	r1, [pc, #16]	; (800a83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a82a:	4805      	ldr	r0, [pc, #20]	; (800a840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a82c:	f7ff fdb6 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a830:	4b02      	ldr	r3, [pc, #8]	; (800a83c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20001790 	.word	0x20001790
 800a840:	0800b930 	.word	0x0800b930

0800a844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <Get_SerialNum+0x44>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a850:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <Get_SerialNum+0x48>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a856:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <Get_SerialNum+0x4c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4413      	add	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a86a:	2208      	movs	r2, #8
 800a86c:	4909      	ldr	r1, [pc, #36]	; (800a894 <Get_SerialNum+0x50>)
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f814 	bl	800a89c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a874:	2204      	movs	r2, #4
 800a876:	4908      	ldr	r1, [pc, #32]	; (800a898 <Get_SerialNum+0x54>)
 800a878:	68b8      	ldr	r0, [r7, #8]
 800a87a:	f000 f80f 	bl	800a89c <IntToUnicode>
  }
}
 800a87e:	bf00      	nop
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	1fff7a10 	.word	0x1fff7a10
 800a88c:	1fff7a14 	.word	0x1fff7a14
 800a890:	1fff7a18 	.word	0x1fff7a18
 800a894:	20000112 	.word	0x20000112
 800a898:	20000122 	.word	0x20000122

0800a89c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	75fb      	strb	r3, [r7, #23]
 800a8b2:	e027      	b.n	800a904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	0f1b      	lsrs	r3, r3, #28
 800a8b8:	2b09      	cmp	r3, #9
 800a8ba:	d80b      	bhi.n	800a8d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	0f1b      	lsrs	r3, r3, #28
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	440b      	add	r3, r1
 800a8cc:	3230      	adds	r2, #48	; 0x30
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e00a      	b.n	800a8ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	0f1b      	lsrs	r3, r3, #28
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	440b      	add	r3, r1
 800a8e4:	3237      	adds	r2, #55	; 0x37
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
 800a900:	3301      	adds	r3, #1
 800a902:	75fb      	strb	r3, [r7, #23]
 800a904:	7dfa      	ldrb	r2, [r7, #23]
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d3d3      	bcc.n	800a8b4 <IntToUnicode+0x18>
  }
}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
	...

0800a91c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	; 0x28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a924:	f107 0314 	add.w	r3, r7, #20
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	605a      	str	r2, [r3, #4]
 800a92e:	609a      	str	r2, [r3, #8]
 800a930:	60da      	str	r2, [r3, #12]
 800a932:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a93c:	d13a      	bne.n	800a9b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a946:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a948:	f043 0301 	orr.w	r3, r3, #1
 800a94c:	6313      	str	r3, [r2, #48]	; 0x30
 800a94e:	4b1b      	ldr	r3, [pc, #108]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	613b      	str	r3, [r7, #16]
 800a958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a95a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a960:	2302      	movs	r3, #2
 800a962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a968:	2303      	movs	r3, #3
 800a96a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a96c:	230a      	movs	r3, #10
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a970:	f107 0314 	add.w	r3, r7, #20
 800a974:	4619      	mov	r1, r3
 800a976:	4812      	ldr	r0, [pc, #72]	; (800a9c0 <HAL_PCD_MspInit+0xa4>)
 800a978:	f7f7 fb1e 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a97c:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a980:	4a0e      	ldr	r2, [pc, #56]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a986:	6353      	str	r3, [r2, #52]	; 0x34
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a990:	4a0a      	ldr	r2, [pc, #40]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a996:	6453      	str	r3, [r2, #68]	; 0x44
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <HAL_PCD_MspInit+0xa0>)
 800a99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	2043      	movs	r0, #67	; 0x43
 800a9aa:	f7f7 fa2e 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9ae:	2043      	movs	r0, #67	; 0x43
 800a9b0:	f7f7 fa47 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	3728      	adds	r7, #40	; 0x28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40023800 	.word	0x40023800
 800a9c0:	40020000 	.word	0x40020000

0800a9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f7fe fb79 	bl	80090d2 <USBD_LL_SetupStage>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4413      	add	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7fe fbb3 	bl	800917c <USBD_LL_DataOutStage>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3320      	adds	r3, #32
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	4619      	mov	r1, r3
 800aa46:	f7fe fc4c 	bl	80092e2 <USBD_LL_DataInStage>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fd86 	bl	8009572 <USBD_LL_SOF>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	79db      	ldrb	r3, [r3, #7]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
 800aa86:	e008      	b.n	800aa9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	79db      	ldrb	r3, [r3, #7]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d102      	bne.n	800aa96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e001      	b.n	800aa9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa96:	f7f6 fc71 	bl	800137c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aaa0:	7bfa      	ldrb	r2, [r7, #15]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe fd20 	bl	80094ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fcc8 	bl	8009446 <USBD_LL_Reset>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fd1b 	bl	800950a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7adb      	ldrb	r3, [r3, #11]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <HAL_PCD_SuspendCallback+0x48>)
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	4a03      	ldr	r2, [pc, #12]	; (800ab08 <HAL_PCD_SuspendCallback+0x48>)
 800aafa:	f043 0306 	orr.w	r3, r3, #6
 800aafe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	e000ed00 	.word	0xe000ed00

0800ab0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fd11 	bl	8009542 <USBD_LL_Resume>
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab3a:	78fa      	ldrb	r2, [r7, #3]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe fd69 	bl	8009616 <USBD_LL_IsoOUTIncomplete>
}
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab5e:	78fa      	ldrb	r2, [r7, #3]
 800ab60:	4611      	mov	r1, r2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fd25 	bl	80095b2 <USBD_LL_IsoINIncomplete>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fd7b 	bl	800967a <USBD_LL_DevConnected>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fd78 	bl	8009690 <USBD_LL_DevDisconnected>
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d13c      	bne.n	800ac32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abb8:	4a20      	ldr	r2, [pc, #128]	; (800ac3c <USBD_LL_Init+0x94>)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a1e      	ldr	r2, [pc, #120]	; (800ac3c <USBD_LL_Init+0x94>)
 800abc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <USBD_LL_Init+0x94>)
 800abca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <USBD_LL_Init+0x94>)
 800abd2:	2204      	movs	r2, #4
 800abd4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abd6:	4b19      	ldr	r3, [pc, #100]	; (800ac3c <USBD_LL_Init+0x94>)
 800abd8:	2202      	movs	r2, #2
 800abda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abdc:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <USBD_LL_Init+0x94>)
 800abde:	2200      	movs	r2, #0
 800abe0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abe2:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <USBD_LL_Init+0x94>)
 800abe4:	2202      	movs	r2, #2
 800abe6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abe8:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <USBD_LL_Init+0x94>)
 800abea:	2200      	movs	r2, #0
 800abec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abee:	4b13      	ldr	r3, [pc, #76]	; (800ac3c <USBD_LL_Init+0x94>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abf4:	4b11      	ldr	r3, [pc, #68]	; (800ac3c <USBD_LL_Init+0x94>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800abfa:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <USBD_LL_Init+0x94>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac00:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <USBD_LL_Init+0x94>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac06:	480d      	ldr	r0, [pc, #52]	; (800ac3c <USBD_LL_Init+0x94>)
 800ac08:	f7f7 fc9f 	bl	800254a <HAL_PCD_Init>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac12:	f7f6 fbb3 	bl	800137c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac16:	2180      	movs	r1, #128	; 0x80
 800ac18:	4808      	ldr	r0, [pc, #32]	; (800ac3c <USBD_LL_Init+0x94>)
 800ac1a:	f7f8 feca 	bl	80039b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	2100      	movs	r1, #0
 800ac22:	4806      	ldr	r0, [pc, #24]	; (800ac3c <USBD_LL_Init+0x94>)
 800ac24:	f7f8 fe7e 	bl	8003924 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac28:	2280      	movs	r2, #128	; 0x80
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	4803      	ldr	r0, [pc, #12]	; (800ac3c <USBD_LL_Init+0x94>)
 800ac2e:	f7f8 fe79 	bl	8003924 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20001990 	.word	0x20001990

0800ac40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7f7 fd86 	bl	8002768 <HAL_PCD_Start>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 f942 	bl	800aeec <USBD_Get_USB_Status>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	4608      	mov	r0, r1
 800ac80:	4611      	mov	r1, r2
 800ac82:	461a      	mov	r2, r3
 800ac84:	4603      	mov	r3, r0
 800ac86:	70fb      	strb	r3, [r7, #3]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70bb      	strb	r3, [r7, #2]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac9e:	78bb      	ldrb	r3, [r7, #2]
 800aca0:	883a      	ldrh	r2, [r7, #0]
 800aca2:	78f9      	ldrb	r1, [r7, #3]
 800aca4:	f7f8 fa5a 	bl	800315c <HAL_PCD_EP_Open>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acac:	7bfb      	ldrb	r3, [r7, #15]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 f91c 	bl	800aeec <USBD_Get_USB_Status>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	460b      	mov	r3, r1
 800accc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acdc:	78fa      	ldrb	r2, [r7, #3]
 800acde:	4611      	mov	r1, r2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7f8 faa3 	bl	800322c <HAL_PCD_EP_Close>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f8fd 	bl	800aeec <USBD_Get_USB_Status>
 800acf2:	4603      	mov	r3, r0
 800acf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7f8 fb5b 	bl	80033da <HAL_PCD_EP_SetStall>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f8de 	bl	800aeec <USBD_Get_USB_Status>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad58:	78fa      	ldrb	r2, [r7, #3]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f8 fb9f 	bl	80034a0 <HAL_PCD_EP_ClrStall>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 f8bf 	bl	800aeec <USBD_Get_USB_Status>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	da0b      	bge.n	800adb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	4613      	mov	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	440b      	add	r3, r1
 800adaa:	3316      	adds	r3, #22
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	e00b      	b.n	800adc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adb6:	68f9      	ldr	r1, [r7, #12]
 800adb8:	4613      	mov	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800adc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f8 f98e 	bl	8003114 <HAL_PCD_SetAddress>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f874 	bl	800aeec <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	607a      	str	r2, [r7, #4]
 800ae1c:	603b      	str	r3, [r7, #0]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae30:	7af9      	ldrb	r1, [r7, #11]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	f7f8 fa96 	bl	8003366 <HAL_PCD_EP_Transmit>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f000 f853 	bl	800aeec <USBD_Get_USB_Status>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	607a      	str	r2, [r7, #4]
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	460b      	mov	r3, r1
 800ae62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae72:	7af9      	ldrb	r1, [r7, #11]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	f7f8 fa22 	bl	80032c0 <HAL_PCD_EP_Receive>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f832 	bl	800aeec <USBD_Get_USB_Status>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aea8:	78fa      	ldrb	r2, [r7, #3]
 800aeaa:	4611      	mov	r1, r2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f8 fa42 	bl	8003336 <HAL_PCD_EP_GetRxCount>
 800aeb2:	4603      	mov	r3, r0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aec4:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <USBD_static_malloc+0x18>)
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	20001e74 	.word	0x20001e74

0800aed8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d817      	bhi.n	800af30 <USBD_Get_USB_Status+0x44>
 800af00:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <USBD_Get_USB_Status+0x1c>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af1f 	.word	0x0800af1f
 800af10:	0800af25 	.word	0x0800af25
 800af14:	0800af2b 	.word	0x0800af2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	e00b      	b.n	800af36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	73fb      	strb	r3, [r7, #15]
    break;
 800af22:	e008      	b.n	800af36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af24:	2301      	movs	r3, #1
 800af26:	73fb      	strb	r3, [r7, #15]
    break;
 800af28:	e005      	b.n	800af36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	73fb      	strb	r3, [r7, #15]
    break;
 800af2e:	e002      	b.n	800af36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	73fb      	strb	r3, [r7, #15]
    break;
 800af34:	bf00      	nop
  }
  return usb_status;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <_vsiprintf_r>:
 800af44:	b500      	push	{lr}
 800af46:	b09b      	sub	sp, #108	; 0x6c
 800af48:	9100      	str	r1, [sp, #0]
 800af4a:	9104      	str	r1, [sp, #16]
 800af4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af50:	9105      	str	r1, [sp, #20]
 800af52:	9102      	str	r1, [sp, #8]
 800af54:	4905      	ldr	r1, [pc, #20]	; (800af6c <_vsiprintf_r+0x28>)
 800af56:	9103      	str	r1, [sp, #12]
 800af58:	4669      	mov	r1, sp
 800af5a:	f000 f999 	bl	800b290 <_svfiprintf_r>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
 800af64:	b01b      	add	sp, #108	; 0x6c
 800af66:	f85d fb04 	ldr.w	pc, [sp], #4
 800af6a:	bf00      	nop
 800af6c:	ffff0208 	.word	0xffff0208

0800af70 <vsiprintf>:
 800af70:	4613      	mov	r3, r2
 800af72:	460a      	mov	r2, r1
 800af74:	4601      	mov	r1, r0
 800af76:	4802      	ldr	r0, [pc, #8]	; (800af80 <vsiprintf+0x10>)
 800af78:	6800      	ldr	r0, [r0, #0]
 800af7a:	f7ff bfe3 	b.w	800af44 <_vsiprintf_r>
 800af7e:	bf00      	nop
 800af80:	20000178 	.word	0x20000178

0800af84 <memset>:
 800af84:	4402      	add	r2, r0
 800af86:	4603      	mov	r3, r0
 800af88:	4293      	cmp	r3, r2
 800af8a:	d100      	bne.n	800af8e <memset+0xa>
 800af8c:	4770      	bx	lr
 800af8e:	f803 1b01 	strb.w	r1, [r3], #1
 800af92:	e7f9      	b.n	800af88 <memset+0x4>

0800af94 <__errno>:
 800af94:	4b01      	ldr	r3, [pc, #4]	; (800af9c <__errno+0x8>)
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	20000178 	.word	0x20000178

0800afa0 <__libc_init_array>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4d0d      	ldr	r5, [pc, #52]	; (800afd8 <__libc_init_array+0x38>)
 800afa4:	4c0d      	ldr	r4, [pc, #52]	; (800afdc <__libc_init_array+0x3c>)
 800afa6:	1b64      	subs	r4, r4, r5
 800afa8:	10a4      	asrs	r4, r4, #2
 800afaa:	2600      	movs	r6, #0
 800afac:	42a6      	cmp	r6, r4
 800afae:	d109      	bne.n	800afc4 <__libc_init_array+0x24>
 800afb0:	4d0b      	ldr	r5, [pc, #44]	; (800afe0 <__libc_init_array+0x40>)
 800afb2:	4c0c      	ldr	r4, [pc, #48]	; (800afe4 <__libc_init_array+0x44>)
 800afb4:	f000 fc6a 	bl	800b88c <_init>
 800afb8:	1b64      	subs	r4, r4, r5
 800afba:	10a4      	asrs	r4, r4, #2
 800afbc:	2600      	movs	r6, #0
 800afbe:	42a6      	cmp	r6, r4
 800afc0:	d105      	bne.n	800afce <__libc_init_array+0x2e>
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc8:	4798      	blx	r3
 800afca:	3601      	adds	r6, #1
 800afcc:	e7ee      	b.n	800afac <__libc_init_array+0xc>
 800afce:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd2:	4798      	blx	r3
 800afd4:	3601      	adds	r6, #1
 800afd6:	e7f2      	b.n	800afbe <__libc_init_array+0x1e>
 800afd8:	0800e4a0 	.word	0x0800e4a0
 800afdc:	0800e4a0 	.word	0x0800e4a0
 800afe0:	0800e4a0 	.word	0x0800e4a0
 800afe4:	0800e4a4 	.word	0x0800e4a4

0800afe8 <__retarget_lock_acquire_recursive>:
 800afe8:	4770      	bx	lr

0800afea <__retarget_lock_release_recursive>:
 800afea:	4770      	bx	lr

0800afec <_free_r>:
 800afec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afee:	2900      	cmp	r1, #0
 800aff0:	d044      	beq.n	800b07c <_free_r+0x90>
 800aff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff6:	9001      	str	r0, [sp, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f1a1 0404 	sub.w	r4, r1, #4
 800affe:	bfb8      	it	lt
 800b000:	18e4      	addlt	r4, r4, r3
 800b002:	f000 f8df 	bl	800b1c4 <__malloc_lock>
 800b006:	4a1e      	ldr	r2, [pc, #120]	; (800b080 <_free_r+0x94>)
 800b008:	9801      	ldr	r0, [sp, #4]
 800b00a:	6813      	ldr	r3, [r2, #0]
 800b00c:	b933      	cbnz	r3, 800b01c <_free_r+0x30>
 800b00e:	6063      	str	r3, [r4, #4]
 800b010:	6014      	str	r4, [r2, #0]
 800b012:	b003      	add	sp, #12
 800b014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b018:	f000 b8da 	b.w	800b1d0 <__malloc_unlock>
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	d908      	bls.n	800b032 <_free_r+0x46>
 800b020:	6825      	ldr	r5, [r4, #0]
 800b022:	1961      	adds	r1, r4, r5
 800b024:	428b      	cmp	r3, r1
 800b026:	bf01      	itttt	eq
 800b028:	6819      	ldreq	r1, [r3, #0]
 800b02a:	685b      	ldreq	r3, [r3, #4]
 800b02c:	1949      	addeq	r1, r1, r5
 800b02e:	6021      	streq	r1, [r4, #0]
 800b030:	e7ed      	b.n	800b00e <_free_r+0x22>
 800b032:	461a      	mov	r2, r3
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b10b      	cbz	r3, 800b03c <_free_r+0x50>
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d9fa      	bls.n	800b032 <_free_r+0x46>
 800b03c:	6811      	ldr	r1, [r2, #0]
 800b03e:	1855      	adds	r5, r2, r1
 800b040:	42a5      	cmp	r5, r4
 800b042:	d10b      	bne.n	800b05c <_free_r+0x70>
 800b044:	6824      	ldr	r4, [r4, #0]
 800b046:	4421      	add	r1, r4
 800b048:	1854      	adds	r4, r2, r1
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	6011      	str	r1, [r2, #0]
 800b04e:	d1e0      	bne.n	800b012 <_free_r+0x26>
 800b050:	681c      	ldr	r4, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	6053      	str	r3, [r2, #4]
 800b056:	440c      	add	r4, r1
 800b058:	6014      	str	r4, [r2, #0]
 800b05a:	e7da      	b.n	800b012 <_free_r+0x26>
 800b05c:	d902      	bls.n	800b064 <_free_r+0x78>
 800b05e:	230c      	movs	r3, #12
 800b060:	6003      	str	r3, [r0, #0]
 800b062:	e7d6      	b.n	800b012 <_free_r+0x26>
 800b064:	6825      	ldr	r5, [r4, #0]
 800b066:	1961      	adds	r1, r4, r5
 800b068:	428b      	cmp	r3, r1
 800b06a:	bf04      	itt	eq
 800b06c:	6819      	ldreq	r1, [r3, #0]
 800b06e:	685b      	ldreq	r3, [r3, #4]
 800b070:	6063      	str	r3, [r4, #4]
 800b072:	bf04      	itt	eq
 800b074:	1949      	addeq	r1, r1, r5
 800b076:	6021      	streq	r1, [r4, #0]
 800b078:	6054      	str	r4, [r2, #4]
 800b07a:	e7ca      	b.n	800b012 <_free_r+0x26>
 800b07c:	b003      	add	sp, #12
 800b07e:	bd30      	pop	{r4, r5, pc}
 800b080:	200021d4 	.word	0x200021d4

0800b084 <sbrk_aligned>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	4e0e      	ldr	r6, [pc, #56]	; (800b0c0 <sbrk_aligned+0x3c>)
 800b088:	460c      	mov	r4, r1
 800b08a:	6831      	ldr	r1, [r6, #0]
 800b08c:	4605      	mov	r5, r0
 800b08e:	b911      	cbnz	r1, 800b096 <sbrk_aligned+0x12>
 800b090:	f000 fba6 	bl	800b7e0 <_sbrk_r>
 800b094:	6030      	str	r0, [r6, #0]
 800b096:	4621      	mov	r1, r4
 800b098:	4628      	mov	r0, r5
 800b09a:	f000 fba1 	bl	800b7e0 <_sbrk_r>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d00a      	beq.n	800b0b8 <sbrk_aligned+0x34>
 800b0a2:	1cc4      	adds	r4, r0, #3
 800b0a4:	f024 0403 	bic.w	r4, r4, #3
 800b0a8:	42a0      	cmp	r0, r4
 800b0aa:	d007      	beq.n	800b0bc <sbrk_aligned+0x38>
 800b0ac:	1a21      	subs	r1, r4, r0
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	f000 fb96 	bl	800b7e0 <_sbrk_r>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d101      	bne.n	800b0bc <sbrk_aligned+0x38>
 800b0b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b0bc:	4620      	mov	r0, r4
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	200021d8 	.word	0x200021d8

0800b0c4 <_malloc_r>:
 800b0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c8:	1ccd      	adds	r5, r1, #3
 800b0ca:	f025 0503 	bic.w	r5, r5, #3
 800b0ce:	3508      	adds	r5, #8
 800b0d0:	2d0c      	cmp	r5, #12
 800b0d2:	bf38      	it	cc
 800b0d4:	250c      	movcc	r5, #12
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	4607      	mov	r7, r0
 800b0da:	db01      	blt.n	800b0e0 <_malloc_r+0x1c>
 800b0dc:	42a9      	cmp	r1, r5
 800b0de:	d905      	bls.n	800b0ec <_malloc_r+0x28>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b1c0 <_malloc_r+0xfc>
 800b0f0:	f000 f868 	bl	800b1c4 <__malloc_lock>
 800b0f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0f8:	461c      	mov	r4, r3
 800b0fa:	bb5c      	cbnz	r4, 800b154 <_malloc_r+0x90>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7ff ffc0 	bl	800b084 <sbrk_aligned>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	4604      	mov	r4, r0
 800b108:	d155      	bne.n	800b1b6 <_malloc_r+0xf2>
 800b10a:	f8d8 4000 	ldr.w	r4, [r8]
 800b10e:	4626      	mov	r6, r4
 800b110:	2e00      	cmp	r6, #0
 800b112:	d145      	bne.n	800b1a0 <_malloc_r+0xdc>
 800b114:	2c00      	cmp	r4, #0
 800b116:	d048      	beq.n	800b1aa <_malloc_r+0xe6>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	4631      	mov	r1, r6
 800b11c:	4638      	mov	r0, r7
 800b11e:	eb04 0903 	add.w	r9, r4, r3
 800b122:	f000 fb5d 	bl	800b7e0 <_sbrk_r>
 800b126:	4581      	cmp	r9, r0
 800b128:	d13f      	bne.n	800b1aa <_malloc_r+0xe6>
 800b12a:	6821      	ldr	r1, [r4, #0]
 800b12c:	1a6d      	subs	r5, r5, r1
 800b12e:	4629      	mov	r1, r5
 800b130:	4638      	mov	r0, r7
 800b132:	f7ff ffa7 	bl	800b084 <sbrk_aligned>
 800b136:	3001      	adds	r0, #1
 800b138:	d037      	beq.n	800b1aa <_malloc_r+0xe6>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	442b      	add	r3, r5
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	f8d8 3000 	ldr.w	r3, [r8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d038      	beq.n	800b1ba <_malloc_r+0xf6>
 800b148:	685a      	ldr	r2, [r3, #4]
 800b14a:	42a2      	cmp	r2, r4
 800b14c:	d12b      	bne.n	800b1a6 <_malloc_r+0xe2>
 800b14e:	2200      	movs	r2, #0
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	e00f      	b.n	800b174 <_malloc_r+0xb0>
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	1b52      	subs	r2, r2, r5
 800b158:	d41f      	bmi.n	800b19a <_malloc_r+0xd6>
 800b15a:	2a0b      	cmp	r2, #11
 800b15c:	d917      	bls.n	800b18e <_malloc_r+0xca>
 800b15e:	1961      	adds	r1, r4, r5
 800b160:	42a3      	cmp	r3, r4
 800b162:	6025      	str	r5, [r4, #0]
 800b164:	bf18      	it	ne
 800b166:	6059      	strne	r1, [r3, #4]
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	bf08      	it	eq
 800b16c:	f8c8 1000 	streq.w	r1, [r8]
 800b170:	5162      	str	r2, [r4, r5]
 800b172:	604b      	str	r3, [r1, #4]
 800b174:	4638      	mov	r0, r7
 800b176:	f104 060b 	add.w	r6, r4, #11
 800b17a:	f000 f829 	bl	800b1d0 <__malloc_unlock>
 800b17e:	f026 0607 	bic.w	r6, r6, #7
 800b182:	1d23      	adds	r3, r4, #4
 800b184:	1af2      	subs	r2, r6, r3
 800b186:	d0ae      	beq.n	800b0e6 <_malloc_r+0x22>
 800b188:	1b9b      	subs	r3, r3, r6
 800b18a:	50a3      	str	r3, [r4, r2]
 800b18c:	e7ab      	b.n	800b0e6 <_malloc_r+0x22>
 800b18e:	42a3      	cmp	r3, r4
 800b190:	6862      	ldr	r2, [r4, #4]
 800b192:	d1dd      	bne.n	800b150 <_malloc_r+0x8c>
 800b194:	f8c8 2000 	str.w	r2, [r8]
 800b198:	e7ec      	b.n	800b174 <_malloc_r+0xb0>
 800b19a:	4623      	mov	r3, r4
 800b19c:	6864      	ldr	r4, [r4, #4]
 800b19e:	e7ac      	b.n	800b0fa <_malloc_r+0x36>
 800b1a0:	4634      	mov	r4, r6
 800b1a2:	6876      	ldr	r6, [r6, #4]
 800b1a4:	e7b4      	b.n	800b110 <_malloc_r+0x4c>
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	e7cc      	b.n	800b144 <_malloc_r+0x80>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f000 f80e 	bl	800b1d0 <__malloc_unlock>
 800b1b4:	e797      	b.n	800b0e6 <_malloc_r+0x22>
 800b1b6:	6025      	str	r5, [r4, #0]
 800b1b8:	e7dc      	b.n	800b174 <_malloc_r+0xb0>
 800b1ba:	605b      	str	r3, [r3, #4]
 800b1bc:	deff      	udf	#255	; 0xff
 800b1be:	bf00      	nop
 800b1c0:	200021d4 	.word	0x200021d4

0800b1c4 <__malloc_lock>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	; (800b1cc <__malloc_lock+0x8>)
 800b1c6:	f7ff bf0f 	b.w	800afe8 <__retarget_lock_acquire_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	200021d0 	.word	0x200021d0

0800b1d0 <__malloc_unlock>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	; (800b1d8 <__malloc_unlock+0x8>)
 800b1d2:	f7ff bf0a 	b.w	800afea <__retarget_lock_release_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	200021d0 	.word	0x200021d0

0800b1dc <__ssputs_r>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	688e      	ldr	r6, [r1, #8]
 800b1e2:	461f      	mov	r7, r3
 800b1e4:	42be      	cmp	r6, r7
 800b1e6:	680b      	ldr	r3, [r1, #0]
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4690      	mov	r8, r2
 800b1ee:	d82c      	bhi.n	800b24a <__ssputs_r+0x6e>
 800b1f0:	898a      	ldrh	r2, [r1, #12]
 800b1f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1f6:	d026      	beq.n	800b246 <__ssputs_r+0x6a>
 800b1f8:	6965      	ldr	r5, [r4, #20]
 800b1fa:	6909      	ldr	r1, [r1, #16]
 800b1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b200:	eba3 0901 	sub.w	r9, r3, r1
 800b204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b208:	1c7b      	adds	r3, r7, #1
 800b20a:	444b      	add	r3, r9
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	429d      	cmp	r5, r3
 800b210:	bf38      	it	cc
 800b212:	461d      	movcc	r5, r3
 800b214:	0553      	lsls	r3, r2, #21
 800b216:	d527      	bpl.n	800b268 <__ssputs_r+0x8c>
 800b218:	4629      	mov	r1, r5
 800b21a:	f7ff ff53 	bl	800b0c4 <_malloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	b360      	cbz	r0, 800b27c <__ssputs_r+0xa0>
 800b222:	6921      	ldr	r1, [r4, #16]
 800b224:	464a      	mov	r2, r9
 800b226:	f000 faeb 	bl	800b800 <memcpy>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	6126      	str	r6, [r4, #16]
 800b238:	6165      	str	r5, [r4, #20]
 800b23a:	444e      	add	r6, r9
 800b23c:	eba5 0509 	sub.w	r5, r5, r9
 800b240:	6026      	str	r6, [r4, #0]
 800b242:	60a5      	str	r5, [r4, #8]
 800b244:	463e      	mov	r6, r7
 800b246:	42be      	cmp	r6, r7
 800b248:	d900      	bls.n	800b24c <__ssputs_r+0x70>
 800b24a:	463e      	mov	r6, r7
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	4632      	mov	r2, r6
 800b250:	4641      	mov	r1, r8
 800b252:	f000 faab 	bl	800b7ac <memmove>
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	1b9b      	subs	r3, r3, r6
 800b25a:	60a3      	str	r3, [r4, #8]
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	4433      	add	r3, r6
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	2000      	movs	r0, #0
 800b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b268:	462a      	mov	r2, r5
 800b26a:	f000 fad7 	bl	800b81c <_realloc_r>
 800b26e:	4606      	mov	r6, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d1e0      	bne.n	800b236 <__ssputs_r+0x5a>
 800b274:	6921      	ldr	r1, [r4, #16]
 800b276:	4650      	mov	r0, sl
 800b278:	f7ff feb8 	bl	800afec <_free_r>
 800b27c:	230c      	movs	r3, #12
 800b27e:	f8ca 3000 	str.w	r3, [sl]
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	f04f 30ff 	mov.w	r0, #4294967295
 800b28e:	e7e9      	b.n	800b264 <__ssputs_r+0x88>

0800b290 <_svfiprintf_r>:
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	4698      	mov	r8, r3
 800b296:	898b      	ldrh	r3, [r1, #12]
 800b298:	061b      	lsls	r3, r3, #24
 800b29a:	b09d      	sub	sp, #116	; 0x74
 800b29c:	4607      	mov	r7, r0
 800b29e:	460d      	mov	r5, r1
 800b2a0:	4614      	mov	r4, r2
 800b2a2:	d50e      	bpl.n	800b2c2 <_svfiprintf_r+0x32>
 800b2a4:	690b      	ldr	r3, [r1, #16]
 800b2a6:	b963      	cbnz	r3, 800b2c2 <_svfiprintf_r+0x32>
 800b2a8:	2140      	movs	r1, #64	; 0x40
 800b2aa:	f7ff ff0b 	bl	800b0c4 <_malloc_r>
 800b2ae:	6028      	str	r0, [r5, #0]
 800b2b0:	6128      	str	r0, [r5, #16]
 800b2b2:	b920      	cbnz	r0, 800b2be <_svfiprintf_r+0x2e>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	e0d0      	b.n	800b460 <_svfiprintf_r+0x1d0>
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	616b      	str	r3, [r5, #20]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c6:	2320      	movs	r3, #32
 800b2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d0:	2330      	movs	r3, #48	; 0x30
 800b2d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b478 <_svfiprintf_r+0x1e8>
 800b2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2da:	f04f 0901 	mov.w	r9, #1
 800b2de:	4623      	mov	r3, r4
 800b2e0:	469a      	mov	sl, r3
 800b2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2e6:	b10a      	cbz	r2, 800b2ec <_svfiprintf_r+0x5c>
 800b2e8:	2a25      	cmp	r2, #37	; 0x25
 800b2ea:	d1f9      	bne.n	800b2e0 <_svfiprintf_r+0x50>
 800b2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f0:	d00b      	beq.n	800b30a <_svfiprintf_r+0x7a>
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff ff6f 	bl	800b1dc <__ssputs_r>
 800b2fe:	3001      	adds	r0, #1
 800b300:	f000 80a9 	beq.w	800b456 <_svfiprintf_r+0x1c6>
 800b304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b306:	445a      	add	r2, fp
 800b308:	9209      	str	r2, [sp, #36]	; 0x24
 800b30a:	f89a 3000 	ldrb.w	r3, [sl]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80a1 	beq.w	800b456 <_svfiprintf_r+0x1c6>
 800b314:	2300      	movs	r3, #0
 800b316:	f04f 32ff 	mov.w	r2, #4294967295
 800b31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b31e:	f10a 0a01 	add.w	sl, sl, #1
 800b322:	9304      	str	r3, [sp, #16]
 800b324:	9307      	str	r3, [sp, #28]
 800b326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b32a:	931a      	str	r3, [sp, #104]	; 0x68
 800b32c:	4654      	mov	r4, sl
 800b32e:	2205      	movs	r2, #5
 800b330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b334:	4850      	ldr	r0, [pc, #320]	; (800b478 <_svfiprintf_r+0x1e8>)
 800b336:	f7f4 ff4b 	bl	80001d0 <memchr>
 800b33a:	9a04      	ldr	r2, [sp, #16]
 800b33c:	b9d8      	cbnz	r0, 800b376 <_svfiprintf_r+0xe6>
 800b33e:	06d0      	lsls	r0, r2, #27
 800b340:	bf44      	itt	mi
 800b342:	2320      	movmi	r3, #32
 800b344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b348:	0711      	lsls	r1, r2, #28
 800b34a:	bf44      	itt	mi
 800b34c:	232b      	movmi	r3, #43	; 0x2b
 800b34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b352:	f89a 3000 	ldrb.w	r3, [sl]
 800b356:	2b2a      	cmp	r3, #42	; 0x2a
 800b358:	d015      	beq.n	800b386 <_svfiprintf_r+0xf6>
 800b35a:	9a07      	ldr	r2, [sp, #28]
 800b35c:	4654      	mov	r4, sl
 800b35e:	2000      	movs	r0, #0
 800b360:	f04f 0c0a 	mov.w	ip, #10
 800b364:	4621      	mov	r1, r4
 800b366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b36a:	3b30      	subs	r3, #48	; 0x30
 800b36c:	2b09      	cmp	r3, #9
 800b36e:	d94d      	bls.n	800b40c <_svfiprintf_r+0x17c>
 800b370:	b1b0      	cbz	r0, 800b3a0 <_svfiprintf_r+0x110>
 800b372:	9207      	str	r2, [sp, #28]
 800b374:	e014      	b.n	800b3a0 <_svfiprintf_r+0x110>
 800b376:	eba0 0308 	sub.w	r3, r0, r8
 800b37a:	fa09 f303 	lsl.w	r3, r9, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	46a2      	mov	sl, r4
 800b384:	e7d2      	b.n	800b32c <_svfiprintf_r+0x9c>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	1d19      	adds	r1, r3, #4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	9103      	str	r1, [sp, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	bfbb      	ittet	lt
 800b392:	425b      	neglt	r3, r3
 800b394:	f042 0202 	orrlt.w	r2, r2, #2
 800b398:	9307      	strge	r3, [sp, #28]
 800b39a:	9307      	strlt	r3, [sp, #28]
 800b39c:	bfb8      	it	lt
 800b39e:	9204      	strlt	r2, [sp, #16]
 800b3a0:	7823      	ldrb	r3, [r4, #0]
 800b3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a4:	d10c      	bne.n	800b3c0 <_svfiprintf_r+0x130>
 800b3a6:	7863      	ldrb	r3, [r4, #1]
 800b3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3aa:	d134      	bne.n	800b416 <_svfiprintf_r+0x186>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	1d1a      	adds	r2, r3, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	9203      	str	r2, [sp, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	bfb8      	it	lt
 800b3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3bc:	3402      	adds	r4, #2
 800b3be:	9305      	str	r3, [sp, #20]
 800b3c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b488 <_svfiprintf_r+0x1f8>
 800b3c4:	7821      	ldrb	r1, [r4, #0]
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	f7f4 ff01 	bl	80001d0 <memchr>
 800b3ce:	b138      	cbz	r0, 800b3e0 <_svfiprintf_r+0x150>
 800b3d0:	9b04      	ldr	r3, [sp, #16]
 800b3d2:	eba0 000a 	sub.w	r0, r0, sl
 800b3d6:	2240      	movs	r2, #64	; 0x40
 800b3d8:	4082      	lsls	r2, r0
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	3401      	adds	r4, #1
 800b3de:	9304      	str	r3, [sp, #16]
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	4825      	ldr	r0, [pc, #148]	; (800b47c <_svfiprintf_r+0x1ec>)
 800b3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ea:	2206      	movs	r2, #6
 800b3ec:	f7f4 fef0 	bl	80001d0 <memchr>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d038      	beq.n	800b466 <_svfiprintf_r+0x1d6>
 800b3f4:	4b22      	ldr	r3, [pc, #136]	; (800b480 <_svfiprintf_r+0x1f0>)
 800b3f6:	bb1b      	cbnz	r3, 800b440 <_svfiprintf_r+0x1b0>
 800b3f8:	9b03      	ldr	r3, [sp, #12]
 800b3fa:	3307      	adds	r3, #7
 800b3fc:	f023 0307 	bic.w	r3, r3, #7
 800b400:	3308      	adds	r3, #8
 800b402:	9303      	str	r3, [sp, #12]
 800b404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b406:	4433      	add	r3, r6
 800b408:	9309      	str	r3, [sp, #36]	; 0x24
 800b40a:	e768      	b.n	800b2de <_svfiprintf_r+0x4e>
 800b40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b410:	460c      	mov	r4, r1
 800b412:	2001      	movs	r0, #1
 800b414:	e7a6      	b.n	800b364 <_svfiprintf_r+0xd4>
 800b416:	2300      	movs	r3, #0
 800b418:	3401      	adds	r4, #1
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	4619      	mov	r1, r3
 800b41e:	f04f 0c0a 	mov.w	ip, #10
 800b422:	4620      	mov	r0, r4
 800b424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b428:	3a30      	subs	r2, #48	; 0x30
 800b42a:	2a09      	cmp	r2, #9
 800b42c:	d903      	bls.n	800b436 <_svfiprintf_r+0x1a6>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0c6      	beq.n	800b3c0 <_svfiprintf_r+0x130>
 800b432:	9105      	str	r1, [sp, #20]
 800b434:	e7c4      	b.n	800b3c0 <_svfiprintf_r+0x130>
 800b436:	fb0c 2101 	mla	r1, ip, r1, r2
 800b43a:	4604      	mov	r4, r0
 800b43c:	2301      	movs	r3, #1
 800b43e:	e7f0      	b.n	800b422 <_svfiprintf_r+0x192>
 800b440:	ab03      	add	r3, sp, #12
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	462a      	mov	r2, r5
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <_svfiprintf_r+0x1f4>)
 800b448:	a904      	add	r1, sp, #16
 800b44a:	4638      	mov	r0, r7
 800b44c:	f3af 8000 	nop.w
 800b450:	1c42      	adds	r2, r0, #1
 800b452:	4606      	mov	r6, r0
 800b454:	d1d6      	bne.n	800b404 <_svfiprintf_r+0x174>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	065b      	lsls	r3, r3, #25
 800b45a:	f53f af2d 	bmi.w	800b2b8 <_svfiprintf_r+0x28>
 800b45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b460:	b01d      	add	sp, #116	; 0x74
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	ab03      	add	r3, sp, #12
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	462a      	mov	r2, r5
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <_svfiprintf_r+0x1f4>)
 800b46e:	a904      	add	r1, sp, #16
 800b470:	4638      	mov	r0, r7
 800b472:	f000 f879 	bl	800b568 <_printf_i>
 800b476:	e7eb      	b.n	800b450 <_svfiprintf_r+0x1c0>
 800b478:	0800e464 	.word	0x0800e464
 800b47c:	0800e46e 	.word	0x0800e46e
 800b480:	00000000 	.word	0x00000000
 800b484:	0800b1dd 	.word	0x0800b1dd
 800b488:	0800e46a 	.word	0x0800e46a

0800b48c <_printf_common>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	4616      	mov	r6, r2
 800b492:	4699      	mov	r9, r3
 800b494:	688a      	ldr	r2, [r1, #8]
 800b496:	690b      	ldr	r3, [r1, #16]
 800b498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bfb8      	it	lt
 800b4a0:	4613      	movlt	r3, r2
 800b4a2:	6033      	str	r3, [r6, #0]
 800b4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	b10a      	cbz	r2, 800b4b2 <_printf_common+0x26>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	6033      	str	r3, [r6, #0]
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	0699      	lsls	r1, r3, #26
 800b4b6:	bf42      	ittt	mi
 800b4b8:	6833      	ldrmi	r3, [r6, #0]
 800b4ba:	3302      	addmi	r3, #2
 800b4bc:	6033      	strmi	r3, [r6, #0]
 800b4be:	6825      	ldr	r5, [r4, #0]
 800b4c0:	f015 0506 	ands.w	r5, r5, #6
 800b4c4:	d106      	bne.n	800b4d4 <_printf_common+0x48>
 800b4c6:	f104 0a19 	add.w	sl, r4, #25
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	6832      	ldr	r2, [r6, #0]
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	dc26      	bgt.n	800b522 <_printf_common+0x96>
 800b4d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4d8:	1e13      	subs	r3, r2, #0
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	bf18      	it	ne
 800b4de:	2301      	movne	r3, #1
 800b4e0:	0692      	lsls	r2, r2, #26
 800b4e2:	d42b      	bmi.n	800b53c <_printf_common+0xb0>
 800b4e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d01e      	beq.n	800b530 <_printf_common+0xa4>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f003 0306 	and.w	r3, r3, #6
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	bf02      	ittt	eq
 800b4fe:	68e5      	ldreq	r5, [r4, #12]
 800b500:	6833      	ldreq	r3, [r6, #0]
 800b502:	1aed      	subeq	r5, r5, r3
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	bf0c      	ite	eq
 800b508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b50c:	2500      	movne	r5, #0
 800b50e:	4293      	cmp	r3, r2
 800b510:	bfc4      	itt	gt
 800b512:	1a9b      	subgt	r3, r3, r2
 800b514:	18ed      	addgt	r5, r5, r3
 800b516:	2600      	movs	r6, #0
 800b518:	341a      	adds	r4, #26
 800b51a:	42b5      	cmp	r5, r6
 800b51c:	d11a      	bne.n	800b554 <_printf_common+0xc8>
 800b51e:	2000      	movs	r0, #0
 800b520:	e008      	b.n	800b534 <_printf_common+0xa8>
 800b522:	2301      	movs	r3, #1
 800b524:	4652      	mov	r2, sl
 800b526:	4649      	mov	r1, r9
 800b528:	4638      	mov	r0, r7
 800b52a:	47c0      	blx	r8
 800b52c:	3001      	adds	r0, #1
 800b52e:	d103      	bne.n	800b538 <_printf_common+0xac>
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b538:	3501      	adds	r5, #1
 800b53a:	e7c6      	b.n	800b4ca <_printf_common+0x3e>
 800b53c:	18e1      	adds	r1, r4, r3
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	2030      	movs	r0, #48	; 0x30
 800b542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b546:	4422      	add	r2, r4
 800b548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b54c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b550:	3302      	adds	r3, #2
 800b552:	e7c7      	b.n	800b4e4 <_printf_common+0x58>
 800b554:	2301      	movs	r3, #1
 800b556:	4622      	mov	r2, r4
 800b558:	4649      	mov	r1, r9
 800b55a:	4638      	mov	r0, r7
 800b55c:	47c0      	blx	r8
 800b55e:	3001      	adds	r0, #1
 800b560:	d0e6      	beq.n	800b530 <_printf_common+0xa4>
 800b562:	3601      	adds	r6, #1
 800b564:	e7d9      	b.n	800b51a <_printf_common+0x8e>
	...

0800b568 <_printf_i>:
 800b568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b56c:	7e0f      	ldrb	r7, [r1, #24]
 800b56e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b570:	2f78      	cmp	r7, #120	; 0x78
 800b572:	4691      	mov	r9, r2
 800b574:	4680      	mov	r8, r0
 800b576:	460c      	mov	r4, r1
 800b578:	469a      	mov	sl, r3
 800b57a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b57e:	d807      	bhi.n	800b590 <_printf_i+0x28>
 800b580:	2f62      	cmp	r7, #98	; 0x62
 800b582:	d80a      	bhi.n	800b59a <_printf_i+0x32>
 800b584:	2f00      	cmp	r7, #0
 800b586:	f000 80d4 	beq.w	800b732 <_printf_i+0x1ca>
 800b58a:	2f58      	cmp	r7, #88	; 0x58
 800b58c:	f000 80c0 	beq.w	800b710 <_printf_i+0x1a8>
 800b590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b598:	e03a      	b.n	800b610 <_printf_i+0xa8>
 800b59a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b59e:	2b15      	cmp	r3, #21
 800b5a0:	d8f6      	bhi.n	800b590 <_printf_i+0x28>
 800b5a2:	a101      	add	r1, pc, #4	; (adr r1, 800b5a8 <_printf_i+0x40>)
 800b5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a8:	0800b601 	.word	0x0800b601
 800b5ac:	0800b615 	.word	0x0800b615
 800b5b0:	0800b591 	.word	0x0800b591
 800b5b4:	0800b591 	.word	0x0800b591
 800b5b8:	0800b591 	.word	0x0800b591
 800b5bc:	0800b591 	.word	0x0800b591
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b591 	.word	0x0800b591
 800b5c8:	0800b591 	.word	0x0800b591
 800b5cc:	0800b591 	.word	0x0800b591
 800b5d0:	0800b591 	.word	0x0800b591
 800b5d4:	0800b719 	.word	0x0800b719
 800b5d8:	0800b641 	.word	0x0800b641
 800b5dc:	0800b6d3 	.word	0x0800b6d3
 800b5e0:	0800b591 	.word	0x0800b591
 800b5e4:	0800b591 	.word	0x0800b591
 800b5e8:	0800b73b 	.word	0x0800b73b
 800b5ec:	0800b591 	.word	0x0800b591
 800b5f0:	0800b641 	.word	0x0800b641
 800b5f4:	0800b591 	.word	0x0800b591
 800b5f8:	0800b591 	.word	0x0800b591
 800b5fc:	0800b6db 	.word	0x0800b6db
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	1d1a      	adds	r2, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	602a      	str	r2, [r5, #0]
 800b608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b60c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b610:	2301      	movs	r3, #1
 800b612:	e09f      	b.n	800b754 <_printf_i+0x1ec>
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	682b      	ldr	r3, [r5, #0]
 800b618:	0607      	lsls	r7, r0, #24
 800b61a:	f103 0104 	add.w	r1, r3, #4
 800b61e:	6029      	str	r1, [r5, #0]
 800b620:	d501      	bpl.n	800b626 <_printf_i+0xbe>
 800b622:	681e      	ldr	r6, [r3, #0]
 800b624:	e003      	b.n	800b62e <_printf_i+0xc6>
 800b626:	0646      	lsls	r6, r0, #25
 800b628:	d5fb      	bpl.n	800b622 <_printf_i+0xba>
 800b62a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b62e:	2e00      	cmp	r6, #0
 800b630:	da03      	bge.n	800b63a <_printf_i+0xd2>
 800b632:	232d      	movs	r3, #45	; 0x2d
 800b634:	4276      	negs	r6, r6
 800b636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b63a:	485a      	ldr	r0, [pc, #360]	; (800b7a4 <_printf_i+0x23c>)
 800b63c:	230a      	movs	r3, #10
 800b63e:	e012      	b.n	800b666 <_printf_i+0xfe>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	1d19      	adds	r1, r3, #4
 800b646:	6029      	str	r1, [r5, #0]
 800b648:	0605      	lsls	r5, r0, #24
 800b64a:	d501      	bpl.n	800b650 <_printf_i+0xe8>
 800b64c:	681e      	ldr	r6, [r3, #0]
 800b64e:	e002      	b.n	800b656 <_printf_i+0xee>
 800b650:	0641      	lsls	r1, r0, #25
 800b652:	d5fb      	bpl.n	800b64c <_printf_i+0xe4>
 800b654:	881e      	ldrh	r6, [r3, #0]
 800b656:	4853      	ldr	r0, [pc, #332]	; (800b7a4 <_printf_i+0x23c>)
 800b658:	2f6f      	cmp	r7, #111	; 0x6f
 800b65a:	bf0c      	ite	eq
 800b65c:	2308      	moveq	r3, #8
 800b65e:	230a      	movne	r3, #10
 800b660:	2100      	movs	r1, #0
 800b662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b666:	6865      	ldr	r5, [r4, #4]
 800b668:	60a5      	str	r5, [r4, #8]
 800b66a:	2d00      	cmp	r5, #0
 800b66c:	bfa2      	ittt	ge
 800b66e:	6821      	ldrge	r1, [r4, #0]
 800b670:	f021 0104 	bicge.w	r1, r1, #4
 800b674:	6021      	strge	r1, [r4, #0]
 800b676:	b90e      	cbnz	r6, 800b67c <_printf_i+0x114>
 800b678:	2d00      	cmp	r5, #0
 800b67a:	d04b      	beq.n	800b714 <_printf_i+0x1ac>
 800b67c:	4615      	mov	r5, r2
 800b67e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b682:	fb03 6711 	mls	r7, r3, r1, r6
 800b686:	5dc7      	ldrb	r7, [r0, r7]
 800b688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b68c:	4637      	mov	r7, r6
 800b68e:	42bb      	cmp	r3, r7
 800b690:	460e      	mov	r6, r1
 800b692:	d9f4      	bls.n	800b67e <_printf_i+0x116>
 800b694:	2b08      	cmp	r3, #8
 800b696:	d10b      	bne.n	800b6b0 <_printf_i+0x148>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	07de      	lsls	r6, r3, #31
 800b69c:	d508      	bpl.n	800b6b0 <_printf_i+0x148>
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	6861      	ldr	r1, [r4, #4]
 800b6a2:	4299      	cmp	r1, r3
 800b6a4:	bfde      	ittt	le
 800b6a6:	2330      	movle	r3, #48	; 0x30
 800b6a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6b0:	1b52      	subs	r2, r2, r5
 800b6b2:	6122      	str	r2, [r4, #16]
 800b6b4:	f8cd a000 	str.w	sl, [sp]
 800b6b8:	464b      	mov	r3, r9
 800b6ba:	aa03      	add	r2, sp, #12
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f7ff fee4 	bl	800b48c <_printf_common>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d14a      	bne.n	800b75e <_printf_i+0x1f6>
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	b004      	add	sp, #16
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	f043 0320 	orr.w	r3, r3, #32
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	4833      	ldr	r0, [pc, #204]	; (800b7a8 <_printf_i+0x240>)
 800b6dc:	2778      	movs	r7, #120	; 0x78
 800b6de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	6829      	ldr	r1, [r5, #0]
 800b6e6:	061f      	lsls	r7, r3, #24
 800b6e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6ec:	d402      	bmi.n	800b6f4 <_printf_i+0x18c>
 800b6ee:	065f      	lsls	r7, r3, #25
 800b6f0:	bf48      	it	mi
 800b6f2:	b2b6      	uxthmi	r6, r6
 800b6f4:	07df      	lsls	r7, r3, #31
 800b6f6:	bf48      	it	mi
 800b6f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b6fc:	6029      	str	r1, [r5, #0]
 800b6fe:	bf48      	it	mi
 800b700:	6023      	strmi	r3, [r4, #0]
 800b702:	b91e      	cbnz	r6, 800b70c <_printf_i+0x1a4>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	f023 0320 	bic.w	r3, r3, #32
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	2310      	movs	r3, #16
 800b70e:	e7a7      	b.n	800b660 <_printf_i+0xf8>
 800b710:	4824      	ldr	r0, [pc, #144]	; (800b7a4 <_printf_i+0x23c>)
 800b712:	e7e4      	b.n	800b6de <_printf_i+0x176>
 800b714:	4615      	mov	r5, r2
 800b716:	e7bd      	b.n	800b694 <_printf_i+0x12c>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	6826      	ldr	r6, [r4, #0]
 800b71c:	6961      	ldr	r1, [r4, #20]
 800b71e:	1d18      	adds	r0, r3, #4
 800b720:	6028      	str	r0, [r5, #0]
 800b722:	0635      	lsls	r5, r6, #24
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	d501      	bpl.n	800b72c <_printf_i+0x1c4>
 800b728:	6019      	str	r1, [r3, #0]
 800b72a:	e002      	b.n	800b732 <_printf_i+0x1ca>
 800b72c:	0670      	lsls	r0, r6, #25
 800b72e:	d5fb      	bpl.n	800b728 <_printf_i+0x1c0>
 800b730:	8019      	strh	r1, [r3, #0]
 800b732:	2300      	movs	r3, #0
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	4615      	mov	r5, r2
 800b738:	e7bc      	b.n	800b6b4 <_printf_i+0x14c>
 800b73a:	682b      	ldr	r3, [r5, #0]
 800b73c:	1d1a      	adds	r2, r3, #4
 800b73e:	602a      	str	r2, [r5, #0]
 800b740:	681d      	ldr	r5, [r3, #0]
 800b742:	6862      	ldr	r2, [r4, #4]
 800b744:	2100      	movs	r1, #0
 800b746:	4628      	mov	r0, r5
 800b748:	f7f4 fd42 	bl	80001d0 <memchr>
 800b74c:	b108      	cbz	r0, 800b752 <_printf_i+0x1ea>
 800b74e:	1b40      	subs	r0, r0, r5
 800b750:	6060      	str	r0, [r4, #4]
 800b752:	6863      	ldr	r3, [r4, #4]
 800b754:	6123      	str	r3, [r4, #16]
 800b756:	2300      	movs	r3, #0
 800b758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b75c:	e7aa      	b.n	800b6b4 <_printf_i+0x14c>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	462a      	mov	r2, r5
 800b762:	4649      	mov	r1, r9
 800b764:	4640      	mov	r0, r8
 800b766:	47d0      	blx	sl
 800b768:	3001      	adds	r0, #1
 800b76a:	d0ad      	beq.n	800b6c8 <_printf_i+0x160>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	079b      	lsls	r3, r3, #30
 800b770:	d413      	bmi.n	800b79a <_printf_i+0x232>
 800b772:	68e0      	ldr	r0, [r4, #12]
 800b774:	9b03      	ldr	r3, [sp, #12]
 800b776:	4298      	cmp	r0, r3
 800b778:	bfb8      	it	lt
 800b77a:	4618      	movlt	r0, r3
 800b77c:	e7a6      	b.n	800b6cc <_printf_i+0x164>
 800b77e:	2301      	movs	r3, #1
 800b780:	4632      	mov	r2, r6
 800b782:	4649      	mov	r1, r9
 800b784:	4640      	mov	r0, r8
 800b786:	47d0      	blx	sl
 800b788:	3001      	adds	r0, #1
 800b78a:	d09d      	beq.n	800b6c8 <_printf_i+0x160>
 800b78c:	3501      	adds	r5, #1
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	9903      	ldr	r1, [sp, #12]
 800b792:	1a5b      	subs	r3, r3, r1
 800b794:	42ab      	cmp	r3, r5
 800b796:	dcf2      	bgt.n	800b77e <_printf_i+0x216>
 800b798:	e7eb      	b.n	800b772 <_printf_i+0x20a>
 800b79a:	2500      	movs	r5, #0
 800b79c:	f104 0619 	add.w	r6, r4, #25
 800b7a0:	e7f5      	b.n	800b78e <_printf_i+0x226>
 800b7a2:	bf00      	nop
 800b7a4:	0800e475 	.word	0x0800e475
 800b7a8:	0800e486 	.word	0x0800e486

0800b7ac <memmove>:
 800b7ac:	4288      	cmp	r0, r1
 800b7ae:	b510      	push	{r4, lr}
 800b7b0:	eb01 0402 	add.w	r4, r1, r2
 800b7b4:	d902      	bls.n	800b7bc <memmove+0x10>
 800b7b6:	4284      	cmp	r4, r0
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	d807      	bhi.n	800b7cc <memmove+0x20>
 800b7bc:	1e43      	subs	r3, r0, #1
 800b7be:	42a1      	cmp	r1, r4
 800b7c0:	d008      	beq.n	800b7d4 <memmove+0x28>
 800b7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ca:	e7f8      	b.n	800b7be <memmove+0x12>
 800b7cc:	4402      	add	r2, r0
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	428a      	cmp	r2, r1
 800b7d2:	d100      	bne.n	800b7d6 <memmove+0x2a>
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7de:	e7f7      	b.n	800b7d0 <memmove+0x24>

0800b7e0 <_sbrk_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d06      	ldr	r5, [pc, #24]	; (800b7fc <_sbrk_r+0x1c>)
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4608      	mov	r0, r1
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	f7f5 ffce 	bl	800178c <_sbrk>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_sbrk_r+0x1a>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_sbrk_r+0x1a>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	200021cc 	.word	0x200021cc

0800b800 <memcpy>:
 800b800:	440a      	add	r2, r1
 800b802:	4291      	cmp	r1, r2
 800b804:	f100 33ff 	add.w	r3, r0, #4294967295
 800b808:	d100      	bne.n	800b80c <memcpy+0xc>
 800b80a:	4770      	bx	lr
 800b80c:	b510      	push	{r4, lr}
 800b80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b816:	4291      	cmp	r1, r2
 800b818:	d1f9      	bne.n	800b80e <memcpy+0xe>
 800b81a:	bd10      	pop	{r4, pc}

0800b81c <_realloc_r>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	4680      	mov	r8, r0
 800b822:	4614      	mov	r4, r2
 800b824:	460e      	mov	r6, r1
 800b826:	b921      	cbnz	r1, 800b832 <_realloc_r+0x16>
 800b828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	4611      	mov	r1, r2
 800b82e:	f7ff bc49 	b.w	800b0c4 <_malloc_r>
 800b832:	b92a      	cbnz	r2, 800b840 <_realloc_r+0x24>
 800b834:	f7ff fbda 	bl	800afec <_free_r>
 800b838:	4625      	mov	r5, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b840:	f000 f81b 	bl	800b87a <_malloc_usable_size_r>
 800b844:	4284      	cmp	r4, r0
 800b846:	4607      	mov	r7, r0
 800b848:	d802      	bhi.n	800b850 <_realloc_r+0x34>
 800b84a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b84e:	d812      	bhi.n	800b876 <_realloc_r+0x5a>
 800b850:	4621      	mov	r1, r4
 800b852:	4640      	mov	r0, r8
 800b854:	f7ff fc36 	bl	800b0c4 <_malloc_r>
 800b858:	4605      	mov	r5, r0
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d0ed      	beq.n	800b83a <_realloc_r+0x1e>
 800b85e:	42bc      	cmp	r4, r7
 800b860:	4622      	mov	r2, r4
 800b862:	4631      	mov	r1, r6
 800b864:	bf28      	it	cs
 800b866:	463a      	movcs	r2, r7
 800b868:	f7ff ffca 	bl	800b800 <memcpy>
 800b86c:	4631      	mov	r1, r6
 800b86e:	4640      	mov	r0, r8
 800b870:	f7ff fbbc 	bl	800afec <_free_r>
 800b874:	e7e1      	b.n	800b83a <_realloc_r+0x1e>
 800b876:	4635      	mov	r5, r6
 800b878:	e7df      	b.n	800b83a <_realloc_r+0x1e>

0800b87a <_malloc_usable_size_r>:
 800b87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87e:	1f18      	subs	r0, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	bfbc      	itt	lt
 800b884:	580b      	ldrlt	r3, [r1, r0]
 800b886:	18c0      	addlt	r0, r0, r3
 800b888:	4770      	bx	lr
	...

0800b88c <_init>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	bf00      	nop
 800b890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b892:	bc08      	pop	{r3}
 800b894:	469e      	mov	lr, r3
 800b896:	4770      	bx	lr

0800b898 <_fini>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	bf00      	nop
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr
